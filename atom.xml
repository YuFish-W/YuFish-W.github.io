<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酒书茶社</title>
  
  <subtitle>人是生而自由的，却无往不在枷锁之中。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-01T10:22:20.584Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YuFish-W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java注释中的代码也可能会被执行</title>
    <link href="http://example.com/2022/09/01/%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B9%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2022/09/01/%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B9%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%89%A7%E8%A1%8C/</id>
    <published>2022-09-01T10:21:00.000Z</published>
    <updated>2022-09-01T10:22:20.584Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>java中正常情况下注释中的代码都不会被执行，但是有一些特殊情况值得注意：<span id="more"></span></p></li><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// \u000a a=1;</span></span><br><span class="line"><span class="comment">// \u000a b=2;</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;---&quot;</span> + b);</span><br></pre></td></tr></table></figure><ul><li>这里输出的结果是<code>1---2</code></li></ul></li><li><p>上面注释中的内容前面有<code>\u000a</code>串字符，这是<code>unicode</code>字符</p><ul><li><code>\u000a</code>在<code>unicode</code>中是<strong>换行</strong>的意思</li></ul></li><li><p>java编写代码的时候可以<strong>在源代码中直接写<code>unicode</code>字符</strong>，他们会<strong>在任何词汇翻译之前执行</strong>，因此注释符号<code>//</code>之后的代码最开始就会别换行成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">b=<span class="number">2</span>;</span><br><span class="line">System.out.println(a + <span class="string">&quot;---&quot;</span> + b);</span><br></pre></td></tr></table></figure></li><li><p>同样的<strong>回车符</strong>也能起到这种效果：</p><ul><li><code>\u000d</code>在<code>unicode</code>中是回车的意思</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java中正常情况下注释中的代码都不会被执行，但是有一些特殊情况值得注意：</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode51:N皇后</title>
    <link href="http://example.com/2022/08/16/LeetCode51N%E7%9A%87%E5%90%8E/"/>
    <id>http://example.com/2022/08/16/LeetCode51N%E7%9A%87%E5%90%8E/</id>
    <published>2022-08-16T04:27:33.000Z</published>
    <updated>2022-08-16T04:29:20.393Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>如题：</strong> </p><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220816120830529.png" alt="image-20220816120830529"></p></li></ul><p><strong>思路：</strong></p><ul><li><p>该题是经典回溯法题目<span id="more"></span></p></li><li><p>我们从第一行开始逐行放置皇后，然后放置第二行的皇后，第二行皇后放置的时候需要和第一行皇后比较位置，如果是同一列或者在同一斜线上就不能放置</p></li><li><p><strong>我们可以使用一个select数组记录每一行皇后放在第几列，<u>数组的下标表示第几行，值表示第几列</u>，例如select[3]=1，表示第三行的皇后放置在第一列</strong> </p><ul><li><p><strong>检验是否同一列：</strong></p><ul><li>例如我们检验第4行皇后能否放在第4列，只需要遍历select数组0-3的值，看是否有select[i]=4，</li></ul></li><li><p><strong>检验是否同一斜线：</strong></p><ul><li>例如我们检验第4行皇后能否放在第4列，只需要遍历select数组0-3的值，<strong>检查每一行皇后所在列数和当前列数差值的绝对值是否等于每一行皇后的行数和当前行数差值的绝对值是否相等</strong>，如果相等则它们处于同一斜线</li></ul></li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用来返回最后所有放置的结果</span></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//用来统计单次放置的结果，统计完后加入到res</span></span><br><span class="line">    List&lt;String&gt; add;</span><br><span class="line">    <span class="comment">//长度为n，select[0]=1表示第0行的皇后放在1的位置</span></span><br><span class="line">    <span class="keyword">int</span>[] select;</span><br><span class="line">    <span class="comment">//用来配合select形成每行的结果，加入到add中</span></span><br><span class="line">    <span class="keyword">char</span>[] temp;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        add = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line">        select = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        backTrack(n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回溯法，从第row行开始，每行遍历0-n位置组个选择</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="comment">//当row==n的时候说明将0-n-1位置的皇后放置好了，select数组记录了每一行皇后放置的位置</span></span><br><span class="line">        <span class="keyword">if</span> (row==n)&#123;</span><br><span class="line">            <span class="comment">//将上次的结果清理</span></span><br><span class="line">            add.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                Arrays.fill(temp,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                temp[select[i]]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                add.add(<span class="keyword">new</span> String(temp));</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(add));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!canSet(select,row,i))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//回溯法一般做出选择之后需要撤销选择，但这里不需要撤销，</span></span><br><span class="line">            <span class="comment">// 因为我们下次选择的时候会覆盖这次选择结果，撤不撤销无所谓</span></span><br><span class="line">            select[row] = i;</span><br><span class="line">            backTrack(n,row+<span class="number">1</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canSet</span><span class="params">(<span class="keyword">int</span>[] n,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n[i]==col||Math.abs(i-row)==Math.abs(n[i]-col))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如题：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220816120830529.png&quot; alt=&quot;image-20220816120830529&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;该题是经典回溯法题目</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>解决虚拟机linux磁盘容量扩容以及重启网络连接图标消失问题</title>
    <link href="http://example.com/2022/08/15/linux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    <id>http://example.com/2022/08/15/linux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</id>
    <published>2022-08-15T11:40:30.000Z</published>
    <updated>2022-08-15T14:48:44.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>亲测有效</strong> </p></blockquote><h2 id="这里操作的是centos系统"><a href="#这里操作的是centos系统" class="headerlink" title="这里操作的是centos系统"></a>这里操作的是<code>centos</code>系统</h2><ul><li><strong>首先在关机状态下扩展磁盘容量</strong> <ul><li><strong>点击扩展，设置好自定的容量然后开机</strong> <span id="more"></span><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220806220825854.png" alt="image-20220806220825854"></li></ul></li></ul></li><li><strong>开机后此时磁盘容量不会变化</strong>，此时输入<code>lsblk</code>查看当前磁盘和磁盘分区情况<ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220805130021957.png" alt="image-20220805130021957"></li><li>比如需要<strong>将新扩容的容量加入到<code>sda3</code>分区里面</strong> </li></ul></li><li><strong>首先<code>fdisk /dev/sda</code>进入要扩容的分区<code>sda</code></strong> </li><li><strong>然后输出<code>d</code>删除磁盘分区，然后输入此次我们要删除的分区编号<code>3</code></strong><ul><li><strong>这里不用担心原先的文件会消失，我们重启之前重新分配就好</strong> </li></ul></li><li><strong>然后输入<code>n</code>表示<u>创建新分区</u>，再输入<code>p</code>表示创建主分区，选择编号是3即创建<code>sda3</code>，然后之后的指定容量<u>直接按回车</u>表示<u>将剩余的全部分给这个新分区</u></strong>  </li><li><strong>然后出入<code>w</code>表示保存</strong> </li><li><strong><code>reboot</code>重启</strong> </li><li>此时<code>lsblk</code>查看到<code>sda3</code><strong>逻辑磁盘容量增加为指定容量</strong>，而且这个<strong>磁盘和原先一样都是挂载在同一个目录的</strong>，因为我们在<strong>配置文件中配置了磁盘分区和目录挂载的对应关系</strong>，因此我们删除这个分区然后在<strong>创建同编号的<code>sda3</code>分区</strong>这个<strong>挂载关系是一样的</strong> <ul><li>查看该配置文件<code>vim /etc/fstab</code>：<ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220806222654673.png" alt="image-20220806222654673"><ul><li>第一个指的是磁盘文件，我们可以直接写<code>/dev/sda3</code>与磁盘分区对应上，也可以找到磁盘文件里面的对应这个分区的<code>UUID</code>然后使用，我这里是系统生成的时候选用的<code>UUID</code></li><li>第二个就是我们挂载的目录</li></ul></li></ul></li></ul></li><li>此时<code>df -h</code>看到<strong>文件系统层发现磁盘大小没变</strong>，<strong>需要手动刷新</strong><ul><li><code>resize2fs /dev/sda3</code> </li><li>然后<code>reboot</code>重启</li></ul></li><li><strong>如果重启发现网络连接图标直接消失，使用这个命令：</strong> <ul><li><code>mv /var/lib/NetworkManager /var/lib/NetworkManager.bak</code></li><li><strong>然后重启</strong> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;亲测有效&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;这里操作的是centos系统&quot;&gt;&lt;a href=&quot;#这里操作的是centos系统&quot; class=&quot;headerlink&quot; title=&quot;这里操作的是centos系统&quot;&gt;&lt;/a&gt;这里操作的是&lt;code&gt;centos&lt;/code&gt;系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先在关机状态下扩展磁盘容量&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点击扩展，设置好自定的容量然后开机&lt;/strong&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Feign时Feign、Ribbon、Hystrix超时时间分析</title>
    <link href="http://example.com/2022/08/02/Feign%E3%80%81Ribbon%E3%80%81Hystrix%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/"/>
    <id>http://example.com/2022/08/02/Feign%E3%80%81Ribbon%E3%80%81Hystrix%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</id>
    <published>2022-08-01T20:18:01.000Z</published>
    <updated>2022-08-01T20:39:41.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ribbon和feign超时时间分析"><a href="#ribbon和feign超时时间分析" class="headerlink" title="ribbon和feign超时时间分析"></a><code>ribbon</code>和<code>feign</code>超时时间分析</h2><ul><li><code>ribbon</code>和<code>Feign</code>默认超时时间都是<code>1s</code> <ul><li>下面是<code>RibbonClientConfiguration </code>类，里面指明了<code>ribbon</code>的<strong>默认连接超时时间</strong>和<strong>默认读取超时时间</strong>都是1s <span id="more"></span><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220802034730409.png" alt="image-20220802034730409"></li></ul></li></ul></li><li>配置方法</li></ul><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="comment"># 设置 feign 超时时间</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">        <span class="comment">#超时时间默认为1s</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">             <span class="comment">#不设置connectTimeout会导致readTimeout设置不生效</span></span><br><span class="line">             <span class="comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端连接所需要的时间</span></span><br><span class="line">            <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">             <span class="comment">#指建立连接后从服务端读取到可用资源所用的时间</span></span><br><span class="line">            <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><ul><li>注意：<code>Feign</code> 和 <code>Ribbon</code> 的超时时间<strong>只会有一个生效</strong> </li><li>当我们没有显式配饰<code>feign</code>的超时时间的是时候，如果配置了<code>ribbon</code>的超时时间，则只有这个配置会生效，<code>feign</code>默认的1s超时无效</li><li>如果我们<code>feign</code>和<code>ribbon</code>的超时时间都配置了，会以<code>feign</code>配置的为准</li></ul></blockquote><h2 id="hystrix超时时间分析"><a href="#hystrix超时时间分析" class="headerlink" title="hystrix超时时间分析"></a><code>hystrix</code>超时时间分析</h2><ul><li><p><code>hystrix</code> 的默认超时时间是 1s，这个配置在 <code>HystrixCommandProperties</code> 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_executionTimeoutInMilliseconds = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></li><li><p>配置方法：</p></li></ul><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 hystrix 超时时间</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#注意：这个hystrix要单独配置才会生效，不能接着上面的feign里面的hystrix配置，那样是无效的</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p><strong>注意：我们如果没有开启<code>feign</code>的<code>hystrix</code>功能的话那么<code>hystrix</code>的超时时间就不会生效，即有没有配置</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>如果配置了<code>hystrix</code>功能，那么它的<strong>超时时间默认就是开启的</strong>，且<strong>该时间是1秒</strong>，这个时间和<code>ribbon</code>的超时时间<strong>会同时起作用</strong>，不像上面的<code>feign</code>的超时时间和<code>ribbon</code>超时时间二选一，我们可以通过上面的配置<code>hystrix</code>的超时时间让它更长，或者显式禁用<code>hystrix</code>的超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">        <span class="comment">#这里表示禁用hystrix的超时时间限制</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果我们禁用了<code>hystrix</code>的超时时间配置，那么我们在方法上用<code>@HystrixCommand</code>里这样配置超时时间也会失效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &gt;<span class="meta">@HystrixCommand(fallbackMethod = &quot;xxxxx&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;1500&quot;)</span></span><br><span class="line"><span class="meta"> &gt;&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>也就是说这里的1.5s超时配置无效</li></ul></blockquote></li></ul></blockquote></blockquote><ul><li>开启<code>feign</code>的<code>hystrix</code>功能后我们可以通过注解在方法上面配置针对该方法的超时时间，<strong>这个时间限制是在上面配置文件之后的，即先判断时间是否超出配置文件中的（没配置就是默认1s），再判断是否超出当前注解里面规定的</strong> </li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><ul><li><strong>如果注解里面禁用了超时时间配置，那么这里也不会生效</strong></li></ul></blockquote><ul><li><p><strong>再次提醒：<code>hystrix</code>的超时时间配置和<code>ribbon</code>的超时时间配置是同时生效的</strong> </p><ul><li><p>例如如果我们远程调用另一服务，而另一服务需要运行<code>3s</code>，那么此时我们如果不想报错，就需要<strong>同时配置</strong><code>hystrix</code>和<code>ribbon</code>的超时时间超过<code>3s</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只有在feign中开启了hystrix功能后，hystrix的超时时间才回生效，如果我们压根不使用hystrix的功能就不用配置了</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ribbon和feign超时时间分析&quot;&gt;&lt;a href=&quot;#ribbon和feign超时时间分析&quot; class=&quot;headerlink&quot; title=&quot;ribbon和feign超时时间分析&quot;&gt;&lt;/a&gt;&lt;code&gt;ribbon&lt;/code&gt;和&lt;code&gt;feign&lt;/code&gt;超时时间分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ribbon&lt;/code&gt;和&lt;code&gt;Feign&lt;/code&gt;默认超时时间都是&lt;code&gt;1s&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;下面是&lt;code&gt;RibbonClientConfiguration &lt;/code&gt;类，里面指明了&lt;code&gt;ribbon&lt;/code&gt;的&lt;strong&gt;默认连接超时时间&lt;/strong&gt;和&lt;strong&gt;默认读取超时时间&lt;/strong&gt;都是1s</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="微服务调用" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode315：计算右侧小于当前元素的个数</title>
    <link href="http://example.com/2022/07/28/LeetCode315%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E6%95%B0/"/>
    <id>http://example.com/2022/07/28/LeetCode315%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E6%95%B0/</id>
    <published>2022-07-28T06:51:33.000Z</published>
    <updated>2022-07-28T07:01:19.583Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如题：</p><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220728133709381.png" alt="image-20220728133709381"></p></li></ul><p><strong>分析思路：</strong> </p><ul><li>思路一：挨个元素利用<code>for</code>循环计算出后面小于当前元素数，但是这样属于两层<code>for</code>循环，时间复杂度是O(N^2)，不可取 <span id="more"></span></li><li>思路二：由于我们要计算<strong>每个元素</strong>之后小于当前元素的元素个数，那么我们肯定要<strong>遍历每个元素</strong>，因此这里的<strong>O(N)的时间复杂度是至少需要的</strong>，剩下的问题是如何统计当前元素右侧更小的元素个数，那么就需要<strong>将遍历到的元素和其他元素进行比较</strong>，我们如果对每个元素都用<code>for</code>循环完成<strong>两两比较</strong>那么复杂度是O(N^2)，因此这样<strong>直接整体统计的方法不可取</strong>，我们可以<strong>先部分再整体</strong>：我们不用一次性计算出当前元素右侧更小的元素个数，可以先统计一部分，最后完成整体统计，因此需要思考有什么方法在遍历数组的时候可以<strong>先将一部分元素两两比较，最后完成整体比较的</strong>？二路归并排序。<ul><li>二路归并排序会先将左边的排好序，再将右边的排好序，然后利用<code>merge</code>函数将左右两边的子数组合并，注意：<strong>我们在<code>merge</code>合并的时候其实就已经对两个子数组中的元素两两比较了</strong>。等到<strong>归并排序结束，我们就能够两两比较整个数组</strong>。</li><li><strong>二路归并排序时间复杂度是<code>nlogn</code>，其中<code>logn</code>代表<code>merge</code>函数对左右子数组合并的次数，<code>n</code>代表每次合并操作的复杂度。因此我们可以理解为<code>merge</code>函数的时间复杂度为<code>O(n)</code>，我们会调用<code>logn</code>次<code>merge</code>函数</strong>。<ul><li>意思就是：<strong>merge函数里面遍历两个子数组将它们合并的复杂度是<code>O(n)</code>，此时如果我们在<code>merge</code>函数中 额外 进行我们自己需要的遍历，保证我们新增的遍历操作时间复杂度不超过<code>O(n)</code>，这样加上原本的合并操作，时间复杂度最多也是<code>O(2n)</code>，忽略常数后时间复杂度不变</strong>。</li></ul></li><li>因此可以得出结论：<strong>我们可以利用归并排序中<code>merge</code>函数仅调用<code>logn</code>次就能两两比较整个数组的特点，在merge函数组增加一个时间复杂度为<code>O(n)</code>的遍历操作，这样就能够避免嵌套for循环的<code>n²</code>时间复杂度</strong>。</li></ul></li><li>由于<strong>最后返回的时候我们要在每个元素原来的位置记录，而排序算法会打乱元素的原始位置，因此应该记录每个元素最开始的索引位置</strong>，这里有两种思路<ul><li>一：使用<code>HashMap</code>记录每个元素值到索引的映射，这种方法能简单快速得到每个元素的原始索引，但是<strong>只适用于数组中元素不重复的情况</strong> </li><li>二：我们额外使用一个记录类，这个类里面有<code>value</code>和<code>index</code>两个属性，记录每个元素和该元素原始位置</li><li><strong>本题应该用思路二，因为元素有重复，</strong> 需要注意的是，我们应该将原本对<code>int</code>数组排序改成对这个记录类数组排序，归并排序的时候操作是一样的，只不过需要额外调用一些<code>value</code>属性罢了。</li></ul></li></ul><p><strong>代码如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在归并排序的merge合并两个有序子数组的时候，如果左边大于右边，就让右指针右移，直到碰到左指针的值小于等于右指针的值，</span></span><br><span class="line"><span class="comment">// 此时从中间位置到右指针位置之间的所有元素就都是 小于 此时左指针的值，直接累加统计这些元素个数：right-mid-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个记录类来记录数组中每个元素和原始索引</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Record</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于我们的Record类里面有值，因此可以将对int数组的排序改成对Record数组的排序</span></span><br><span class="line">    <span class="keyword">private</span> Record[] records;</span><br><span class="line">    <span class="comment">//归并排序的时候需要用到的临时数组</span></span><br><span class="line">    <span class="keyword">private</span> Record[] temp;</span><br><span class="line">    <span class="comment">//记录每个元素右侧更小元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一系列初始化</span></span><br><span class="line">        records = <span class="keyword">new</span> Record[nums.length];</span><br><span class="line">        temp = <span class="keyword">new</span> Record[nums.length];</span><br><span class="line">        count = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            records[i] = <span class="keyword">new</span> Record(i,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行归并排序</span></span><br><span class="line">        sort(records,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将count数组里记录的加到list集合中</span></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : count)&#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Record[] records,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里不能用(left+right)/2，可能会有益处的风险</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        sort(records,left,mid);</span><br><span class="line">        sort(records,mid+<span class="number">1</span>,right);</span><br><span class="line">        merge(records,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Record[] records,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//利用System.arraycopy方法将records数组中left到right位置的元素拷贝到temp数组中对应位置，</span></span><br><span class="line">        <span class="comment">//也可以用for循环一个个赋值，但是该方法效率更高</span></span><br><span class="line">        System.arraycopy(records,left,temp,left,right-left+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left,l=left,r=mid+<span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == mid+<span class="number">1</span>)&#123;</span><br><span class="line">                records[i] = temp[r++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (r == right+<span class="number">1</span>)&#123;<span class="comment">//这里r==right+1表示右指针到头了，表示此时右边子数组中所有元素比当前元素小</span></span><br><span class="line">                count[temp[l].index] += r - mid - <span class="number">1</span>;<span class="comment">//也可以直接写right-mid</span></span><br><span class="line">                records[i] = temp[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[l].val &lt;= temp[r].val)&#123;</span><br><span class="line">                <span class="comment">//这里条件一定是左边小于等于右边，因为如果只写左边小于右边，</span></span><br><span class="line">                <span class="comment">// 那么这就意味着当右边等于左边的时候指针也会右移，此时从中间到右边之中的值</span></span><br><span class="line">                <span class="comment">// 就不全是小于左边的了，换句话说我们计算右边元素比左边小的数量的时候是利用右指针每次移动都是因为右指针指向的数小于</span></span><br><span class="line">                <span class="comment">// 左指针指向的数，这样从mid+1到right-1这些元素就都是小于左指针的元素了，因此右指针和左指针相等的话右指针不应该右移，</span></span><br><span class="line">                <span class="comment">// 除非计算的是右边元素小于等于当前元素的数量</span></span><br><span class="line">                count[temp[l].index] += r - mid - <span class="number">1</span>;</span><br><span class="line">                records[i] = temp[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                records[i] = temp[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220728133709381.png&quot; alt=&quot;image-20220728133709381&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分析思路：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思路一：挨个元素利用&lt;code&gt;for&lt;/code&gt;循环计算出后面小于当前元素数，但是这样属于两层&lt;code&gt;for&lt;/code&gt;循环，时间复杂度是O(N^2)，不可取</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>java中两个线程i++100次结果</title>
    <link href="http://example.com/2022/07/13/java%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8Bi++100%E6%AC%A1%E7%BB%93%E6%9E%9C/"/>
    <id>http://example.com/2022/07/13/java%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8Bi++100%E6%AC%A1%E7%BB%93%E6%9E%9C/</id>
    <published>2022-07-13T10:29:18.000Z</published>
    <updated>2022-07-13T10:33:35.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析java中两个线程分别i-一百次的结果"><a href="#解析java中两个线程分别i-一百次的结果" class="headerlink" title="解析java中两个线程分别i++一百次的结果"></a>解析<code>java</code>中两个线程分别i++一百次的结果</h1><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ul><li>假设<strong>i从0开始</strong>，那么<strong>两个线程</strong>分别<strong>i++一百次</strong>后i的值有可能是：<code>2-200</code>。</li></ul><span id="more"></span><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul><li>首先我们要知道<code>java</code>中的<code>i++</code><strong>不是原子操作</strong>，因为这个操作分为三个步骤：<ol><li>将内存中i的值读到寄存器</li><li>在寄存器中自增</li><li>将自增后的值写回内存</li></ol></li></ul><h3 id="①i-200"><a href="#①i-200" class="headerlink" title="①i=200"></a>①i=200</h3><ul><li>这种情况<strong>比较理想</strong>，假如两个线程之间没有发生打断对方<code>i++</code>时候三个步骤中的任何一步，那么<code>i</code>的值就会顺理成章自增200次，最后得到200。</li></ul><h3 id="②i-2"><a href="#②i-2" class="headerlink" title="②i=2"></a>②i=2</h3><ul><li>这种情况<strong>比较极端</strong>：<ul><li><strong>线程一</strong>将<code>i=0</code>的值取出到寄存器中，寄存器中的值+1变成1，还未写回内存，<strong>被线程二打断</strong>，此时内存中<code>i=0</code>，进程一寄存器的值为1</li><li><strong>线程二</strong>完成99次自增操作，此时内存中<code>i=99</code>，<strong>被线程一打断</strong>，线程一将寄存器中的1写回内存，此时内存中的<code>i=99</code>被覆盖成<code>i=1</code>，然后<strong>线程一又被线程二打断</strong> </li><li>此时<strong>线程二</strong>只剩最后一次自增操作，它首先将此时内存中<code>i=1</code>的值读到寄存器中，寄存器中的值加一变成2，<strong>被线程一打断</strong> </li><li>此时内存中<code>i=1</code>，<strong>线程一</strong>完成剩下的全部自增操作，此时<code>i=100</code>，<strong>轮到线程二</strong> </li><li><strong>线程二</strong>将寄存器中的2写回内存，最后内存中<code>i=2</code> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解析java中两个线程分别i-一百次的结果&quot;&gt;&lt;a href=&quot;#解析java中两个线程分别i-一百次的结果&quot; class=&quot;headerlink&quot; title=&quot;解析java中两个线程分别i++一百次的结果&quot;&gt;&lt;/a&gt;解析&lt;code&gt;java&lt;/code&gt;中两个线程分别i++一百次的结果&lt;/h1&gt;&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;假设&lt;strong&gt;i从0开始&lt;/strong&gt;，那么&lt;strong&gt;两个线程&lt;/strong&gt;分别&lt;strong&gt;i++一百次&lt;/strong&gt;后i的值有可能是：&lt;code&gt;2-200&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分析如何将map/model的数据放入request保存域</title>
    <link href="http://example.com/2022/05/16/%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%B0%86mapmodel%E7%9A%84%E6%95%B0%E6%8D%AE%E6%94%BE%E5%85%A5request%E4%BF%9D%E5%AD%98%E5%9F%9F/"/>
    <id>http://example.com/2022/05/16/%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%B0%86mapmodel%E7%9A%84%E6%95%B0%E6%8D%AE%E6%94%BE%E5%85%A5request%E4%BF%9D%E5%AD%98%E5%9F%9F/</id>
    <published>2022-05-16T12:16:46.000Z</published>
    <updated>2022-05-16T12:18:07.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析如何将map-model的数据放入request保存域"><a href="#分析如何将map-model的数据放入request保存域" class="headerlink" title="分析如何将map/model的数据放入request保存域"></a>分析如何将map/model的数据放入request保存域</h1><ul><li><strong>以下源码不需要全看，主要看写了中文注释的地方即可，一步一步进去就明白了</strong> <span id="more"></span></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*首先是进入到DispatcherServlet这个中央控制器中的doDispatcher()方法里的这一步（每个请求都会经由</span></span><br><span class="line"><span class="comment">DispatcherServlet处理，进入到doDispatcher()方法）*/</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="comment">//=========进入ha.handle</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================进入handleInternal</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    checkRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">            <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">        <span class="comment">//进入的就是这里</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">            applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            prepareResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================进入invokeHandlerMethod(request, response, handlerMethod);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">        invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里会创建mavContainer</span></span><br><span class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">        modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">        AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">        asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">        asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">        asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">        asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">        asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            Object result = asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Resume with async result [&quot;</span> + formatted + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进入的就是这里</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入invocableMethod.invokeAndHandle(webRequest, mavContainer);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//invokeFOrRequest，进入的就是这里</span></span><br><span class="line">    Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line">    Assert.state(<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>, <span class="string">&quot;No return value handlers&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">            returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================进入invokeForRequest(webRequest, mavContainer, providedArgs)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                               Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入这里面会返回args数组，这个args数组保存的就是我们需要的每个参数解析后的值/对象</span></span><br><span class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//!!!!执行我们的控制器方法，底层是一系列反射</span></span><br><span class="line">    <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入getMethodArgumentValues(request, mavContainer, providedArgs)</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">                                           Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//args数组保存的就是每个参数的值</span></span><br><span class="line">    Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">    <span class="comment">//这个for循环一次对每个参数进行赋值，存放在args数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        MethodParameter parameter = parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//进入这里！！！</span></span><br><span class="line">            args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                String exMsg = ex.getMessage();</span><br><span class="line">                <span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">                    logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</span><br><span class="line"><span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unsupported parameter type [&quot;</span> +</span><br><span class="line">parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================分两步，先进入getArgumentResolver(parameter)找到当前参数对应的参数解析器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从缓存中直接获取这个参数对应的解析器，第一次的话肯定没有</span></span><br><span class="line">    HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从所有的argumentResolvers里面一个一个找，找到了就放入缓存里，这个缓存将参数作为键，解析器作为值下一调用直接获取</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">            <span class="comment">//判断此解析器是否支持当前参数，例如参数是否包含某注解，因此对应某解析器，对象参数也有对应的解析器</span></span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                result = resolver;</span><br><span class="line">                <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================第二步：再进入resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                              NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！！！！！！！关键，这里可以看见我们返回的是mavContainer对象的defaultModel属性</span></span><br><span class="line">    <span class="comment">//无论参数是map还是model还是modelmap，他们的解析器虽然不同，但是resolveArgument()方法都是返回mavContainer.getModel()</span></span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================进入mavContainer.getModel()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelMap <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里可以看见，如果使用的是默认的模型的话，返回的就是mavContainer这个对象的defaultModel属性</span></span><br><span class="line">    <span class="keyword">if</span> (useDefaultModel()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defaultModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.redirectModel == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redirectModel = <span class="keyword">new</span> ModelMap();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redirectModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>由上可知，我们参数中<code>map/model</code>最终得到的都是<code>mavContainer</code>这个对象的<code>defaultModel</code>属性，这个属性的类型是<code>BindingAwareModelMap</code>，之前讲过这个<code>BindingAwareModelMap</code>实现了<code>map/model</code>这两个接口，因此返回这个类型我们的map或者model都可以接收。</strong></p><ul><li><p><strong>而且如果我们参数同时有<code>map</code>和<code>model</code>，返回的对象实际上是同一个，以为上面可以看到实际上就是调用<code>mavContainer.getModel()</code>返回的，而<code>mavContainer</code>这个对象的创建是在解析参数之前，一次请求映射只会创建一个，因此<code>mavContainer.getModel()</code>返回的是同一个对象。</strong></p></li><li><p><strong>此时我们使用<code>map</code>或者<code>model</code>添加键值对实际上都会动态绑定到<code>BindingAwareModelMap</code>这个类型调用它的添加方法，因此我们map/model添加的键值对都放在同一个对象里，而这个对象实际上就是<code>mavContainer</code>的<code>defualtModel</code>属性，因此我们添加过后这个属性就有了对应的数据。</strong></p></li><li><p><strong>例如这样添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="number">123</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;2&quot;</span>,<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p><strong>添加过后</strong><img src="https://img-blog.csdnimg.cn/img_convert/38858d63a639942b9eff45b8a0372ebc.png" alt="image-20220516194059723"></p><ul><li><strong>可以看到<code>defalutModel</code>这个属性有了对应的键值对数据</strong> </li></ul></li></ul></li><li><p><strong>然后执行完了控制器里面的方法后返回到<code>invocableMethod.invokeAndHandle(webRequest, mavContainer)</code>这一步</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//...省略很多</span></span><br><span class="line">        <span class="comment">//这里创建的mavContainer对象</span></span><br><span class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">        <span class="comment">//...省略很多</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            Object result = asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Resume with async result [&quot;</span> + formatted + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////刚刚就是从这里进入的，现在从返回继续执行</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//现在进入这里</span></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入getModelAndView(mavContainer, modelFactory, webRequest)方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">getModelAndView</span><span class="params">(ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     ModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">    <span class="keyword">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到我们操作更新过的模型，如果不是重定向请求就是default这个</span></span><br><span class="line">    ModelMap model = mavContainer.getModel();</span><br><span class="line">    <span class="comment">//将这个mavContainer映射的视图名称和模型数据都作为参数new一个ModelAndView对象出来，这个就是我们最后得到的，这里返回它</span></span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class="line">    <span class="keyword">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class="line">        mav.setView((View) mavContainer.getView());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (model <span class="keyword">instanceof</span> RedirectAttributes) &#123;</span><br><span class="line">        Map&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class="line">        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后就是将这个创建出来的mav层层返回直到mv = ha.handle(processedRequest, response, mappedHandler.getHandler())这里</span></span><br></pre></td></tr></table></figure></li><li><p><strong>至此，我们已经将我们控制器方法里面的键值对添加到了doDispatcher方法里面的mav对象中，之后真正将这个mav对象中的模型数据放到request保存域中的方法是<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler())</code>之后的<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)</code>这个方法</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/26ea45e0c92de763b59bdaa858921abf.png" alt="image-20220516195845213"></p><p>进入<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//...省略一些不相关的</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Did the handler return a view to render?</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            <span class="comment">//render方法渲染视图，进入这里！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">render(mv, request, response);</span><br><span class="line"><span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//========================进入render(mv, request, response);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//...省略一些不相关的</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, mv.getStatus());</span><br><span class="line">response.setStatus(mv.getStatus().value());</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//继续进入这个render方法！！！！！！</span></span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//======================进入view.render(mv.getModelInternal(), request, response);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(<span class="meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;View &quot;</span> + formatViewName() +</span><br><span class="line"><span class="string">&quot;, model &quot;</span> + (model != <span class="keyword">null</span> ? model : Collections.emptyMap()) +</span><br><span class="line">(<span class="keyword">this</span>.staticAttributes.isEmpty() ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;, static attributes &quot;</span> + <span class="keyword">this</span>.staticAttributes));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">prepareResponse(request, response);</span><br><span class="line">    <span class="comment">//这里是重点，进入这个方法！！！！！！！！！！！！！！！！！</span></span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================进入renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">    <span class="comment">//这里就是暴露mdoel的数据作为RequestAttributes，进去！！！！！！！！！！！！！</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br><span class="line"><span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//====================进去exposeModelAsRequestAttributes(model, request);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以看到就是遍历model的每一个键值对，将它用request对象的setAttribute()方法设置</span></span><br><span class="line">    model.forEach((name, value) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(name, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            request.removeAttribute(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>至此分析完毕。</strong> </p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分析如何将map-model的数据放入request保存域&quot;&gt;&lt;a href=&quot;#分析如何将map-model的数据放入request保存域&quot; class=&quot;headerlink&quot; title=&quot;分析如何将map/model的数据放入request保存域&quot;&gt;&lt;/a&gt;分析如何将map/model的数据放入request保存域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下源码不需要全看，主要看写了中文注释的地方即可，一步一步进去就明白了&lt;/strong&gt;</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="ssm" scheme="http://example.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode74:网络延迟问题</title>
    <link href="http://example.com/2022/05/14/LeetCode743%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F/"/>
    <id>http://example.com/2022/05/14/LeetCode743%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F/</id>
    <published>2022-05-14T11:31:25.000Z</published>
    <updated>2022-05-16T12:16:11.050Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题：</strong> <img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220514183856067.png" alt="image-20220514183856067"></p><p><strong>分析思路：</strong> <span id="more"></span></p><ul><li><p>从实例的途中就可以看出这是一个有向带权图，每条边的权重表示从一个节点发送信号到另一个节点所需要的时间。</p></li><li><p><strong>题目要我们返回从某一个节点开始发送信号，需要多久才能使所有节点都收到这个信号，这里有两层含义</strong>：</p><ul><li><strong>第一层</strong>：如果当前节点到另一个节点有两条路径，这两条路径都能到达，我们应该选取花费时间更少的那条</li><li><strong>第二层</strong>：需要保证所有节点都能收到该信号，因此所需要的时间应为当前节点到其他节点的需要花费时间中需要时间最久的那个时间，这样才能保证在这个时间内所有节点都能收到该信号</li></ul></li><li><p>因此，<strong>第一个问题是</strong>如何得到当前节点到另一个节点的所有路径中花费时间最短的路径？</p><ul><li><strong>这个问题我们可以用<code>dijkstra</code>算法解决，这个算法就是解决最短路径问题的。</strong> </li><li><strong>注意<code>dijkstra</code>算法的使用条件：加权有向图，没有负权重</strong>，因此当前问题满足条件。</li></ul></li><li><p><strong>第二个问题</strong>是如何知道到哪个节点所需要的 最短路径时间 是最长的？</p><ul><li><strong>我们可以在<code>dijkstra</code>算法计算每一个节点的耗费时间的同时利用一个数组记录当前节点到每一个节点所需要的最短时间。</strong> </li></ul></li></ul><p><strong>代码：</strong> </p><ul><li><code>dijkstra</code>算法实质上是在<code>BFS</code>层次遍历图的过程中计算最短路径的，因此我们需要构建图，这里用邻接表法构建图。</li><li><code>dijkstra</code>需要一个数组记录开始结点到其他所有节点的最短路径长度，我们可以这样实现：<ul><li>初始化一个<code>distFromStart</code>，记录的值<strong>初始化为无穷大</strong>（因为我们要缩小这个值）。</li><li>在遍历图的过程中找到当前结点的所有邻居节点，然后计算<strong>从开始结点到当前结点的路径长度</strong>加上<strong>当前节点到邻居节点的权重</strong>，即<strong>当前路径到该达邻居节点的路径长度</strong>，判断这个长度和<code>distFromStart</code>数组记录的长度的大小，**<code>distFromStart</code>数组始终记录更小的那个值。** <ul><li><strong>上述条件中我们可以知道的是当前结点到邻居节点的权重，那么我们如何知道开始节点到当前节点的路径长度？</strong> <ul><li>我们可以<strong>用一个类来记录这个信息</strong>，这个类有属性<code>id</code>表示节点编号，属性<code>distFromStart</code>表示开始结点到当前结点的路径长度。在<code>BFS</code>过程中我们用这个类的对象来代表每一个节点，加入到队列中遍历。</li></ul></li></ul></li><li><strong>这样我们在遍历的时候弹出队列中的节点就可以得到开始结点到当前结点的路径长度了，在利用建立的邻接表可以根据这个节点的<code>id</code>找到它的每一个邻居，由此可以完成判断。</strong> </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表里每一个节点的类型是int[]，该数组长度为2，0索引存放目的节点，1索引存放到目的节点的权重。</span></span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt;[] graph;</span><br><span class="line">    <span class="comment">//实时记录每个结点到起始结点的最短距离,在每次寻找邻居节点的时候用来判断当前路径走这条路是否可行</span></span><br><span class="line">    <span class="keyword">int</span>[] distFromStart;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用邻接表法建图</span></span><br><span class="line">        built(times, n);</span><br><span class="line">        <span class="comment">//用dijkstra计算每个结点和起始结点的最短路径</span></span><br><span class="line">        dijkstra(graph, k);</span><br><span class="line">        <span class="comment">//找最大时间，代表所有结点收到信号的最短时间</span></span><br><span class="line">        <span class="keyword">int</span> maxTime = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从1开始，结点编号没有0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; distFromStart.length; i++) &#123;</span><br><span class="line">            <span class="comment">//如果长度还是101则表示路径长度没有更新，即表示这个节点无法到达，直接返回-1</span></span><br><span class="line">            <span class="keyword">if</span> (distFromStart[i] == <span class="number">101</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (distFromStart[i] &gt; maxTime) maxTime = distFromStart[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于节点的编号是从1开始的，所以初始化大小n+1</span></span><br><span class="line">        graph = <span class="keyword">new</span> ArrayList[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] time : times) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = time[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> to = time[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> weight = time[<span class="number">2</span>];</span><br><span class="line">            graph[start].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;to, weight&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录每个几点的基本信息，即编号和与起始结点的路径长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">int</span> distFromStart;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> distFromStart)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.distFromStart = distFromStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(List&lt;<span class="keyword">int</span>[]&gt;[] graph, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优先权队列对 从开始结点到当前结点的距离distFromStart 从小到大排序</span></span><br><span class="line">        PriorityQueue&lt;Node&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.distFromStart - b.distFromStart);</span><br><span class="line"></span><br><span class="line">        distFromStart = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="comment">//权重最大为100，初始化为一个大于它的数</span></span><br><span class="line">        Arrays.fill(distFromStart, <span class="number">101</span>);</span><br><span class="line">        distFromStart[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        priorityQueue.offer(<span class="keyword">new</span> Node(start, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">            Node Node = priorityQueue.poll();</span><br><span class="line">            <span class="keyword">int</span> curNodeID = Node.id;<span class="comment">//当前结点id</span></span><br><span class="line">            <span class="keyword">int</span> curDistFromStart = Node.distFromStart;<span class="comment">//当前路径下开始节点到当前结点的路径长度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (curDistFromStart &gt; distFromStart[curNodeID]) &#123;</span><br><span class="line">                <span class="comment">// 表示已经有一条更短的路径到达 curNode 节点了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] neighbor : graph[curNodeID]) &#123;</span><br><span class="line">                <span class="keyword">int</span> weight = neighbor[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> nextNodeID = neighbor[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (curDistFromStart + weight &lt; distFromStart[nextNodeID]) &#123;</span><br><span class="line">                    distFromStart[nextNodeID] = curDistFromStart + weight;</span><br><span class="line">                    priorityQueue.offer(<span class="keyword">new</span> Node(nextNodeID, curDistFromStart + weight));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面我们使用优先权队列保存每个而不是普通队列，这样效率更高。<strong>因为我们要找的是开始节点到当前节点的最短路径，在找这条最短路径的过程中我们如果能够保证每次都从更短的子路径开始找，则最终的找到的路径是最短路径的概率会更高。这是一种贪心策略。</strong>  </li><li>在<code>BFS</code>遍历图的时候我们不需要使用<code>visited</code>数组保证我们不走回头路，因为我们只有在找到更短路径的时候才回把节点加入队列中，如果走回头路的话这个路径肯定比数组中记录的更长。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题：&lt;/strong&gt; &lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220514183856067.png&quot; alt=&quot;image-20220514183856067&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析思路：&lt;/strong&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数组集合互相转换的时候应该注意的问题</title>
    <link href="http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-08T11:29:51.000Z</published>
    <updated>2022-07-28T08:30:36.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组转换成集合"><a href="#数组转换成集合" class="headerlink" title="数组转换成集合"></a>数组转换成集合</h1><ul><li><p><strong>可以使用<code>Arrays.asList()</code>方法。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191253736.png" alt="image-20220508191253736">，集合里存放的是单个的数字。 <span id="more"></span></p></li><li><p><strong><u>特别注意</u><strong>：这里</strong>数组不能使用<code>int[]</code>来定义</strong>，因为集合需要指定泛型，而泛型只能是引用类型，<code>Arrays.asList()</code>方法返回的集合的泛型会和数组类型一致，但是如果数组类型是基本数据类型而不是引用类型，则会将<strong>整个数组<code>int[]</code>当成泛型类型</strong>。此时集合里的元素就不再是单个的数字，而是整个整个的数组了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li>输出结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191454595.png" alt="image-20220508191454595">，集合里存放的是数组。</li></ul></li></ul></li><li><p><strong><code>Arrays.asList</code>方法返回一个<code>List</code>，是一个视图，它的底层仍然是数组，因此不能使用<code>add</code>,<code>remove</code>方法，因为这会改变数组大小，只能使用访问底层数组的<code>get</code>和修改数组元素的<code>set</code>方法。</strong> </p><ol><li><p>修改方法<code>set()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br><span class="line">list.set(<span class="number">0</span>,<span class="number">111</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li>结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191917993.png" alt="image-20220508191917993"> </li></ul></li><li><p><code>add()/remove()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//list.remove(1);</span></span><br></pre></td></tr></table></figure><ul><li>结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508192044362.png" alt="image-20220508192044362"> </li></ul></li></ol><ul><li><strong>从源码分析：</strong> <ul><li><strong>这个方法返回的是一个<code>Arrays</code>的内部类<code>java.util.Arrays$ArrayList</code>。这个内部类继承了<code>AbstractList</code>，而<code>AbstractList</code>又继承了<code>List</code>。因此我们得用<code>List</code>来接收这个结果，不能用<code>ArrayList</code>！！！</strong> </li><li><strong>此时我们使用返回的<code>List</code>类型的集合并调用这个集合的方法，在运行的时候根据动态绑定机制会去运行类型<code>java.util.Arrays$ArrayList</code>中调用这个方法，而<code>java.util.Arrays$ArrayList</code>这个类是没有<code>add()</code>和<code>remove()</code>这两个方法的，因此我们调用会失败。</strong> </li></ul></li><li>额外：集合的<code>subList()</code>方法返回的视图没有操作限制，可以将任何增删改操作应用于这个视图，同时它会影响到原集合例如删除这个子视图相当于删除了元集合中的这些元素。</li></ul></li></ul><h1 id="集合转换成数组"><a href="#集合转换成数组" class="headerlink" title="集合转换成数组"></a>集合转换成数组</h1><ul><li><p><strong>List集合的<code>toArray()</code>方法可以将集合转成对应类型的数组：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">arrayList.add(<span class="number">2</span>);</span><br><span class="line">arrayList.add(<span class="number">3</span>);</span><br><span class="line">arrayList.add(<span class="number">5</span>);</span><br><span class="line">Object[] objects1 = arrayList.toArray();<span class="comment">//直接返回会返回一个Object类型的数组</span></span><br><span class="line">Integer[] integers1 = arrayList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);<span class="comment">//添加这个参数即可，下面解释</span></span><br></pre></td></tr></table></figure><ul><li><strong>如果直接调用<code>toArray()</code>将返回一个对象数组，此时由于数组的类型是不能强制转换的，即即使当前<code>Obeject</code>数组中的元素都是<code>Integer</code>类型也无法将它转换成<code>Integer</code>类型的数组。</strong> </li><li><strong>想要获得指定类型的数组必须在方法里new一个这种类型的数组，此时就会返回一个同类型的数组。参数中数组的长度小于集合大小会自动扩大到集合大小，长度大于集合大小多余的位置填<code>null</code>。</strong> </li><li><strong>对返回的数组的操作不会影响到该集合：</strong> <ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508185549110.png" alt="image-20220508185549110"></li></ul></li></ul></li><li><p><strong>数组没有类型转换，即不能将int类型的数组转换成Object类型的数组。但是集合这样是可以的：</strong> </p><ul><li><pre><code class="java">List&lt;Integer&gt; f = new ArrayList&lt;&gt;();ArrayList&lt;Integer&gt; c = (ArrayList&lt;Integer&gt;)f;</code></pre></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数组转换成集合&quot;&gt;&lt;a href=&quot;#数组转换成集合&quot; class=&quot;headerlink&quot; title=&quot;数组转换成集合&quot;&gt;&lt;/a&gt;数组转换成集合&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可以使用&lt;code&gt;Arrays.asList()&lt;/code&gt;方法。&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Integer[] a = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输出结果：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191253736.png&quot; alt=&quot;image-20220508191253736&quot;&gt;，集合里存放的是单个的数字。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springMVC的拦截器分析</title>
    <link href="http://example.com/2022/05/04/springMVC%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/05/04/springMVC%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%88%86%E6%9E%90/</id>
    <published>2022-05-04T02:53:06.000Z</published>
    <updated>2022-05-04T03:03:24.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-拦截器的作用时机"><a href="#1-拦截器的作用时机" class="headerlink" title="1. 拦截器的作用时机"></a>1. 拦截器的作用时机</h1><ul><li>和过滤器一样，拦截器也可以拦截请求。</li><li>过滤器是在<code>DispatcherServlet</code>处理之前拦截，拦截器是在<code>DispatcherServlet</code>处理请求然后调用控制器方法(即我们自己写的处理请求的方法，用<code>@RequestMapping</code>标注)之前进行拦截。<span id="more"></span></li></ul><h1 id="2-拦截器的三个默认方法"><a href="#2-拦截器的三个默认方法" class="headerlink" title="2. 拦截器的三个默认方法"></a>2. 拦截器的三个默认方法</h1><ul><li>实现拦截器需要实现<code>HandlerInterceptor</code>这个接口，这个<strong>接口</strong>中有三个<strong>默认方法</strong>，<strong>这三个方法的执行顺序</strong>：<ul><li><strong>preHandle</strong>：<strong>控制器方法执行之前</strong>执行preHandle()，返回值是一个boolean，表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</li><li><strong>postHandle</strong>：控制器方法执行之后执行postHandle()</li><li><strong>afterComplation</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</li></ul></li><li>我们实现接口然后重写这三个方法，就会在对应的时机被自动执行。</li></ul><h1 id="3-分析拦截器方法执行时机"><a href="#3-分析拦截器方法执行时机" class="headerlink" title="3. 分析拦截器方法执行时机"></a>3. 分析拦截器方法执行时机</h1><h2 id="3-1-preHandle-和postHandle-执行时机"><a href="#3-1-preHandle-和postHandle-执行时机" class="headerlink" title="3.1 preHandle()和postHandle()执行时机"></a>3.1 <code>preHandle()</code>和<code>postHandle()</code>执行时机</h2><ul><li><p><strong>在处理请求的时候会调用<code>DispatcherServlet</code>，这里面有如下代码</strong>:</p></li><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/tmpB871.png" alt="tmpB871" style="zoom: 80%;" /><ul><li><p><code>mv=ha.handle()</code>这里就是调用<strong>处理请求</strong>的方法，返回值是一个<code>ModelAndView</code>类型的对象。</p></li><li><p><strong>上图这里可以看见在<code>mv=ha.handle()</code>之前和之后调用了<code>applayPreHandle()</code>和<code>applyPostHandle()</code>两个方法</strong>。这两个方法就是执行所有拦截器的<code>preHandle()</code>方法和<code>postHandle()</code>方法。<u>**因此可以看见在处理请求之前执行<code>preHandle()</code>，处理请求之后执行<code>postHandle()</code>**。</u></p></li><li><p><strong>上图的<code>mappedHandler</code>是一个处理执行链</strong>，类型为<code>HandlerExecutionChain</code> </p><ul><li>这个对象包含<strong>三个属性</strong>，如下图所示：<ul><li><strong>第一个</strong><code>handler</code>表示<strong>当前请求对应的控制器方法</strong>；</li><li><strong>第二个</strong>表示当前请求对应的<strong>所有拦截器集合</strong>，可以看见<strong>第一个是自带的拦截器</strong>，第二个是我们配置的；</li><li><strong>第三个</strong>表示的是<code>applyPreHandle()</code>这个方法执行完后<strong>最后一个<code>PreHandle()</code>方法返回<code>ture</code>的拦截器的索引</strong>。</li><li><img src="https://img-blog.csdnimg.cn/img_convert/10ee178ca64d7b85a0c7252eba4c5e4f.png" alt="image-20220503155412733"></li></ul></li></ul></li><li><p>既然<strong>有拦截就要有放行</strong>，拦截器的三个方法中要想要<strong>进行拦截肯定得在处理器方法执行之前</strong>，即<strong>只有PreHandle()方法会进行拦截然后判断是否放行</strong>。看下三个方法的源码，<strong>只有<code>PreHandle()</code>方法有返回值，返回true代表放行，false代表不放行</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cd000447b3e29a9a79ec53c9ae21f025.png" alt="image-20220503144628331"></p></li><li><p><strong>这里调用<code>applyPreHandler()</code>方法的源码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//这里循环遍历所有的interceptor,按顺序遍历，这个顺序就是我们在配置文件中配置的顺序，除了我们配置的还有一个自带的，</span></span><br><span class="line">    <span class="comment">//这个拦截器是第一个生效的，索引是0</span></span><br><span class="line">    <span class="comment">//for循环的第三个表示将每个返回true的拦截器的索引,赋值给interceptorIndex属性,然后再让索引自增，即interceptorIndex记录的就是</span></span><br><span class="line">    <span class="comment">//这个applyPreHandeler()方法执行完后最后一个放行的拦截器的索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.interceptorList.size(); <span class="keyword">this</span>.interceptorIndex = i++) &#123;</span><br><span class="line">        HandlerInterceptor interceptor = (HandlerInterceptor)<span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="comment">//这里会调用每一个interceptor的preHandle方法，然后如果返回false表示不放行</span></span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.triggerAfterCompletion(request, response, (Exception)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>preHandle()</code>返回false则进入if语句，里面同样会返回false，然后返回到上一层调用的地方：<img src="https://img-blog.csdnimg.cn/img_convert/36ce20c62f1d84e280e55b4f90f8e2f0.png" alt="image-20220503144932312"><ul><li><strong>这里是false则进入if语句，直接retrun，因此不会执行下面的控制器方法，这就意味着<code>preHandle()</code>返回false代表不放行</strong>。</li></ul></li></ul></li></ul></li></ul><h2 id="3-2-afterComplation方法执行时机"><a href="#3-2-afterComplation方法执行时机" class="headerlink" title="3.2 afterComplation方法执行时机"></a>3.2 <code>afterComplation</code>方法执行时机</h2><ul><li><p><strong>在<code>DispatcherServlet</code>中有如下代码</strong>：</p></li><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220503142150596.png" alt="image-20220503142150596" style="zoom:67%;" /></li><li><ul><li><strong>这里的<code>this.render()</code>方法就是渲染视图的</strong>，在这个方法下面调用了<code>treggerAfterCompletion()</code>方法，这个方法会调用<strong>不放行的那个拦截器之前的所有拦截器的<code>afterComplation</code>方法</strong>。<u><strong>因此在渲染视图之后调用<code>afterComplation</code></strong></u>。</li><li>但是如果<strong>前面的<code>PreHandle</code>方法如果不放行</strong>，则执行不到这里，但是<strong>前面的<code>applyPreHandler()</code>方法中会在不放行的时候自己调用<code>treggerAfterCompletion()</code>方法</strong>，因此<strong>放行和不放行执行<code>treggerAfterCompletion()</code>方法的地方不是同一个</strong>。</li></ul></li></ul><h1 id="4-多个拦截器时每个方法的执行顺序"><a href="#4-多个拦截器时每个方法的执行顺序" class="headerlink" title="4. 多个拦截器时每个方法的执行顺序"></a>4. 多个拦截器时每个方法的执行顺序</h1><ul><li>若每个拦截器的preHandle()都返回true<ul><li>此时多个拦截器的执行顺序和<strong>拦截器在SpringMVC的配置文件的配置顺序</strong>有关：</li><li><strong><code>preHandle()</code>会按照配置的顺序执行，而<code>postHandle()</code>和<code>afterComplation()</code>会按照配置的反序执行</strong></li></ul></li></ul><h2 id="4-1-分析顺序执行和反序执行"><a href="#4-1-分析顺序执行和反序执行" class="headerlink" title="4.1 分析顺序执行和反序执行"></a>4.1 分析顺序执行和反序执行</h2><p><strong>这里看源码</strong>：</p><h3 id="preHandle"><a href="#preHandle" class="headerlink" title="preHandle"></a>preHandle</h3><ul><li><p>这里调用所有拦截器的<code>preHandle()</code>方法：<img src="https://img-blog.csdnimg.cn/img_convert/6aace45ad24a261a9e49ee4d67d1ac0f.png" alt="image-20220503160647835"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p><ul><li>这里for循环遍历<strong>从索引0开始遍历</strong>interceptorList集合中的所有拦截器，这个集合<strong>拦截器的索引顺序就是我们在配置文件中配置的顺序</strong>，因此<code>preHandle()</code>是<strong>按照配置顺序执行</strong> </li></ul></li></ul><h3 id="postHandle"><a href="#postHandle" class="headerlink" title="postHandle"></a>postHandle</h3><ul><li><p><strong>这里会调用所有拦截器的<code>postHandle()</code>方法</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/681ed2a49cb710764c0c61c5c2cfacb2.png" alt="image-20220503160932167"></p><ul><li>这个方法的调用是在<code>applyPreHandler()</code>这个方法执行完后执行的，<strong>因此如果这个<code>applyPreHandler()</code>方法在遍历所有拦截器的<code>preHandle()</code>方法时碰到了返回false的，即不放行，则会直接return掉，不会执行这个<code>applyPostHandle()</code>方法</strong>。<strong>因此只要有一个拦截器不放行，则所有拦截器的<code>postHandle()</code>都不执行</strong>，如下图：</li><li><img src="https://img-blog.csdnimg.cn/img_convert/0863178cbe17cb75a0d3ac469b4eddbc.png" alt="image-20220503162156080"></li></ul></li><li><p>如果所有的<code>PreHandle()</code>方法都放行，则会执行这个<code>applyPostHandle()</code>方法，从这里<u><strong>可以看到它是从<code>interceptorList</code>集合的最后一个索引开始向前遍历的，因此是反序</strong></u> </p><ul><li><img src="https://img-blog.csdnimg.cn/img_convert/cf8a4f8e44552be402c9bfa36bc37a27.png" alt="image-20220503160954516"></li></ul></li></ul><h3 id="afterComplation"><a href="#afterComplation" class="headerlink" title="afterComplation"></a>afterComplation</h3><ul><li><p>下面代码会执行所有拦截器的<code>afterComplation()</code>方法，可以看出<u><strong>for循环遍历拦截器集合的时候也是从后往前遍历的</strong></u> </p><p><img src="https://img-blog.csdnimg.cn/img_convert/54837dc787070d49ab5b1e9b3dce7aa0.png" alt="image-20220503161448647"></p></li></ul><p>上述的**<code>triggerAfterCompletion()</code>方法有两个地方可能会执行**：</p><ul><li><ol><li><p><strong>如果有拦截器不放行</strong>：在执行所有<code>PreHandle()</code>方法的<code>applyPreHandler()</code>方法中，如果碰到某个拦截器的<code>PreHandle()</code>方法不放行，就会执行<code>triggerAfterCompletion()</code>方法。<strong>此时不会渲染视图，因为被拦截了</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p></li><li><p><strong>如果全部放行</strong>：则会在视图渲染之后执行，上面有分析。</p></li></ol></li><li><p><strong>有拦截器不放行时</strong>：</p><ul><li><p><strong>源码</strong>：for循环里面的if语句在判断时就会执行<code>preHandle()</code>，如果<strong>不放行则进入if语句，里面会调用<code>triggerAfterCompletion()</code>方法</strong> <img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p></li><li><p><strong>此时<code>preHandle()</code>返回false的那个拦截器之前的拦截器的<code>afterComplation()</code>会执行，理由如下</strong>：</p><ul><li><p><strong>这里会调用最后一个放行的拦截器和它之前的所有拦截器的<code>afterComplation()</code>方法</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54837dc787070d49ab5b1e9b3dce7aa0.png" alt="image-20220503161448647"></p></li><li><p><strong><code>this.interceptorIndex</code>就是在<code>applyPreHandler()</code>方法中赋值的，它记录的是最后一个放行的拦截器在集合中的索引，而<code>preHandle()</code>方法在碰到返回false的<code>preHandle()</code>拦截器方法后就会执行这个<code>triggerAfterCompletion()</code>方法(即这个拦截器的<code>preHandle()</code>方法不放行)，此时<code>this.interceptorIndex</code>就记录的是最后一个放行的拦截器索引</strong>。</p></li><li><p><u><strong>因此返回false的拦截器之前的拦截器的<code>afterComplation()</code>都会执行</strong></u> </p></li></ul></li></ul></li><li><p><strong>若某个拦截器的preHandle()返回了false</strong> </p><ul><li>即如果某个拦截器的<code>preHandle()</code>返回了false，<strong>则<code>preHandle()</code>执行次数会比<code>afterComplation()</code>执行次数多一次，多的就是按个返回false的<code>preHandle()</code></strong> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-拦截器的作用时机&quot;&gt;&lt;a href=&quot;#1-拦截器的作用时机&quot; class=&quot;headerlink&quot; title=&quot;1. 拦截器的作用时机&quot;&gt;&lt;/a&gt;1. 拦截器的作用时机&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;和过滤器一样，拦截器也可以拦截请求。&lt;/li&gt;
&lt;li&gt;过滤器是在&lt;code&gt;DispatcherServlet&lt;/code&gt;处理之前拦截，拦截器是在&lt;code&gt;DispatcherServlet&lt;/code&gt;处理请求然后调用控制器方法(即我们自己写的处理请求的方法，用&lt;code&gt;@RequestMapping&lt;/code&gt;标注)之前进行拦截。</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="ssm" scheme="http://example.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>在java集合中调用remove方法后调用iterator.next()报错</title>
    <link href="http://example.com/2022/04/26/%E9%9B%86%E5%90%88%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8next%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/04/26/%E9%9B%86%E5%90%88%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8next%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2022-04-26T04:48:54.000Z</published>
    <updated>2022-07-30T06:24:09.590Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>例如使用<code>Arraylist</code>集合返回的一个iterator迭代器，我们<strong>这样使用会报错</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = arrayList.iterator();<span class="comment">//获得迭代器</span></span><br><span class="line">arrayList.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (iterator.hasNext()) System.out.println(iterator.next());</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p><strong>分析</strong>：</p><ul><li><p>我们来看**<code>iterator.next()</code>方法源码：** </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();<span class="comment">//调用这个方法检查，我们刚刚报错就是因为调用这个方法</span></span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>ArrayList</code></strong> 继承了 <strong><code>AbstractList</code>，</strong> 其中<code>AbstractList</code>中有个<code>modCount</code>代表了<strong>集合修改的次数</strong>。<strong>在<code>ArrayList</code>的<code>iterator</code>的<code>next()</code>方法中会判断<code>expectedModCount</code>与<code>modCount</code>是否相等，如果相等继续执行，不相等报错</strong>。</p></li><li><p>这个<code>expectedModCount</code>是迭代器这个类的一个属性，<strong>调用<code>ArrayList</code>自身的<code>add</code>和<code>remove</code>等改变集合大小的方法都会导致<code>modCount+1</code>，但是不会修改<code>expectedModCount</code>。</strong> </p></li><li><p>返回的<strong>迭代器是<code>ArrayList</code>的一个私有内部类(下文有这个内部类的源码）</strong>，在调用集合的iterator()方法返回迭代器的时候底层是new一个新的迭代器返回，它在<strong>创建的时候会将当前<code>modCount</code>的值赋给<code>expectedModCount</code>，因此创建的时候两者相等</strong>。</p></li><li><p><strong>因此我们在创建迭代器后，如果使用了<code>ArrayList</code>本身的add方法导致<code>modCount+1</code>后，此时<code>modCount</code>和<code>expectedModCount</code>不相等了，再调用迭代器的next()方法就会报错</strong>。</p><ul><li><p>注意：这里不止调用<code>add</code>会报错，调用<code>ArrayList</code>本身的<code>remove</code>也会报错，<strong>关键在于这些方法修改了<code>modCount</code>但是没有修改<code>expectedModCount</code>。</strong> </p></li><li><p><strong>如果我们是用迭代器的<code>remove</code>方法则不会报错，因为迭代器的remove方法在删除元素后会将新的<code>modCount</code>的值赋给<code>expectedModCount</code>：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;<span class="comment">//这个cursor表示的是下一个需要遍历的元素，lastRet表示上一次遍历到的元素</span></span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;<span class="comment">//这里会保持两者是一致的</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：我们在删除<code>lastRet</code>索引位置表示的上一个遍历的元素后，将<code>lastRet</code>的索引赋给<code>cursor</code>表示下一个需要遍历的索引位置</strong>。<ul><li><strong>这个时候可能会有疑惑：为什么这个位置元素被删除了下一次遍历还是这个位置</strong>？<ul><li><strong>这是因为我们<code>remove</code>删除上一个元素后，数组大小-1，即被删除元素后的元素都会往前移动，此时lastRet这个索引在新数组中指向的就是刚刚的下一个元素</strong>。</li></ul></li></ul></li><li><strong>删除之后将<code>lastRet</code>置为-1，而remove方法开始就会判断<code>lastRet</code>是否小于0，防止连续两次调用<code>remove</code>方法删除元素</strong>。</li></ul></li></ul></li><li><p>ArrayList中的iterator私有内部类是这样定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例如使用&lt;code&gt;Arraylist&lt;/code&gt;集合返回的一个iterator迭代器，我们&lt;strong&gt;这样使用会报错&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;Integer&amp;gt; arrayList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arrayList.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Iterator&amp;lt;Integer&amp;gt; iterator = arrayList.iterator();&lt;span class=&quot;comment&quot;&gt;//获得迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arrayList.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iterator.hasNext()) System.out.println(iterator.next());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Sring如何改变</title>
    <link href="http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/"/>
    <id>http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/</id>
    <published>2022-04-18T01:38:03.000Z</published>
    <updated>2022-08-04T06:10:36.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么说String类型不可变？"><a href="#为什么说String类型不可变？" class="headerlink" title="为什么说String类型不可变？"></a><strong>为什么说<code>String</code>类型不可变</strong>？</h1><ul><li><p><code>String</code>的源码里其实使用一个<code>char</code>数组来存储字符串的，**<code>String</code>之所以说不可变，就是因为这个char数组它是<code>private</code>类型，而且<code>String</code>没有对外暴露和提供修改这个<code>char</code>数组的方法，因此我们无法更改这个<code>char</code>数组的值，所以<code>String</code>是不可变的**。</p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418084542067.png" alt="image-20220418084542067"><span id="more"></span></p></li><li><p><strong>注意</strong>：这里<code>char</code>数组被<code>final</code>修饰<strong>不代表不可变</strong>，因为数组是引用类型，final修饰引用类型的时候代表引用不可更改，即我们<strong>只是不能将这个<code>value</code>属性指向新的引用</strong>，但是<strong>它原本指向的这个<code>char</code>数组中的字符我们是可以更改的</strong>。</p></li><li><p>因此，<strong>如果我们可以通过更改<code>value</code>指向的<code>char</code>数组本身，就可以改变字符串</strong>。正常情况下我们是无法更改的，这也是我们说字符串不可变的原因，但是我们通过极端方法也是可以更改的，例如<strong>使用反射可以得到这个私有的value属性，然后通过爆破我们就可以访问这个私有属性了</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String  s = &quot;aabbc&quot;;</span><br><span class="line">Class&lt;? extends String&gt; aClass = s.getClass();</span><br><span class="line">Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性</span><br><span class="line">value.setAccessible(true);//将它设置成可以访问</span><br><span class="line">char[] chars =  (char[]) value.get(s);</span><br><span class="line">System.out.println(s);//在修改之前输出s</span><br><span class="line">chars[0] = &#x27;k&#x27;;         //修改s</span><br><span class="line">System.out.println(s);//输出修改之后的s</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418091040434.png" alt="image-20220418091040434"></p><ul><li><strong>可以看出这个字符串确实被改变了</strong>。</li></ul></li></ul><h1 id="证明我们是真的修改了字符串"><a href="#证明我们是真的修改了字符串" class="headerlink" title="证明我们是真的修改了字符串"></a>证明我们是真的修改了字符串</h1><h2 id="字符串的hashCode-方法"><a href="#字符串的hashCode-方法" class="headerlink" title="字符串的hashCode()方法"></a>字符串的<code>hashCode()</code>方法</h2><ul><li><p><strong>这里我们不能用<code>hashCode()</code>返回的哈希值来判断是否是同一个字符串</strong>，因为<code>hashCode</code>码值不等于地址，字符串的<code>hashCode</code>码是通过对每个字符进行一定的规则的累加得到的，然而<code>String</code>类中有一个int类型的属性叫<code>hash</code>，<strong>当这个<code>hash</code>=0的时候就会去计算这个String的<code>hashCode</code>码值</strong>，但是计算完后就会将计算结果赋值给这个<code>hash</code>属性；<strong>如果<code>hash</code>不等于0就返回这个属性值作为当前字符串的<code>hashCode</code><strong>。因此我们第一次计算调用<code>hashCode()</code>的时候由于<code>int</code>类型的属性默认为0，所以会逐个字符计算<code>hash</code>值，</strong>第二次调用<code>hashCode()</code>的时候返回的<code>hash</code>值其实是第一次计算出来缓存好的</strong>，因此肯定是相同的，所以此时调用<code>hashCode()</code>方法返回的值无法用来判断是否为同一个字符串。</p><ul><li><p><strong>源码如下</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private int hash; // Default to 0</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    int h = hash;//得到当前属性hash的值</span><br><span class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) &#123;//如果它为0就计算当前字符串的hashCode</span><br><span class="line">        char val[] = value;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = 31 * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;//计算完了后赋值给hash属性</span><br><span class="line">    &#125;</span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>我们可以这样判断修改过后的字符串到底是<strong>原地修改</strong>得到的还是<strong>重新赋值</strong>得到的：<strong>将这个字符串的引用赋值给另一个字符串变量tempC，我们修改这个字符串前后都输出这个tempC，如果我们是原地修改，那么这个tempC输出的值前后两次肯定一样；如果是重新赋值，那么tempC的值前后两次肯定不同</strong>。</p><ul><li><pre><code>String  s = &quot;aabbc&quot;;Class&lt;? extends String&gt; aClass = s.getClass();Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性value.setAccessible(true);//将它设置成可以访问char[] chars =  (char[]) value.get(s);String tempC = s;System.out.println(tempC );//在修改之前输出tempC chars[0] = &#39;k&#39;;         //修改sSystem.out.println(tempC );//输出修改之后的tempC <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **结果如下**：![image-20220418092752119](https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092752119.png)</span><br><span class="line"></span><br><span class="line">- **如果是重新赋值的情况**，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>String  s = &quot;aabbc&quot;;String tempC = s;System.out.println(tempC);s = &quot;sss&quot;;System.out.println(tempC);</code></pre><ul><li><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092930118.png" alt="image-20220418092930118"></li></ul></li></ul></li><li><p><strong>因此可知字符串确实是可以通过反射修改的</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么说String类型不可变？&quot;&gt;&lt;a href=&quot;#为什么说String类型不可变？&quot; class=&quot;headerlink&quot; title=&quot;为什么说String类型不可变？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么说&lt;code&gt;String&lt;/code&gt;类型不可变&lt;/strong&gt;？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;的源码里其实使用一个&lt;code&gt;char&lt;/code&gt;数组来存储字符串的，**&lt;code&gt;String&lt;/code&gt;之所以说不可变，就是因为这个char数组它是&lt;code&gt;private&lt;/code&gt;类型，而且&lt;code&gt;String&lt;/code&gt;没有对外暴露和提供修改这个&lt;code&gt;char&lt;/code&gt;数组的方法，因此我们无法更改这个&lt;code&gt;char&lt;/code&gt;数组的值，所以&lt;code&gt;String&lt;/code&gt;是不可变的**。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418084542067.png&quot; alt=&quot;image-20220418084542067&quot;&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode752:打开转盘锁</title>
    <link href="http://example.com/2022/04/12/LeetCode752%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/"/>
    <id>http://example.com/2022/04/12/LeetCode752%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</id>
    <published>2022-04-12T15:44:46.000Z</published>
    <updated>2022-04-12T15:49:51.047Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220412230720405.png" alt="image-20220412230720405"></p><ul><li><p><strong>分析题目</strong>：</p><ul><li><p>题目用长度为4的字符串表示密码，我们<strong>转动密码的时候每一位上只能上或下转动一次</strong>，我们<strong>可以理解转动一位密码就相当于更改这个密码字符串其中一个字符的值</strong>，因此我们可以<strong>编写两个方法，分别代表将密码字符串中的某一位向上移动一位和向下移动一位</strong>：<span id="more"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将密码字符串s的第t位向上拨动一位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveUp</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();<span class="comment">//将当前密码字符串转成char数组，便于更改每一位的值，最后将这个char数组转成字符串</span></span><br><span class="line">    <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;9&#x27;</span>)&#123;<span class="comment">//当值为9时向上拨动应该为0</span></span><br><span class="line">        chars[t]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        chars[t] += <span class="number">1</span>;<span class="comment">//其它情况下就是当前字符值+1</span></span><br><span class="line">        <span class="comment">//注意这里是加int类型的1而不是char类型的1，因为char类型底层是对应ASCII的，ASCII码是用int类型的值对应查找char类型的字符，</span></span><br><span class="line">        <span class="comment">//而&#x27;1&#x27;,&#x27;2&#x27;这些字符在码表中是连续的，我们将&#x27;1&#x27;的ASCII码值+1可以得到&#x27;2&#x27;，</span></span><br><span class="line">        <span class="comment">//但是如果加的是字符类型的&#x27;1&#x27;那么它的ASCII码值并不是1，此时得出的字符并不是&#x27;2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveDown</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        chars[t]=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        chars[t] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>思路</strong>：</p><ul><li><p>我们要从当前’0000’开始找到正确的密码，那么就需要<strong>穷举所有的可能来判断是否和目标target值相等</strong>。</p></li><li><p><strong>如何穷举</strong>？</p><ul><li><strong>当我们在转动密码的时候我们可以转动四位中的任何一位，而每次转动有两个方向，因此我们每次转动后有8中可能出现的结果。我们可以理解成从当前状态做出一个操作后变到下一个状态，将这两个状态用线连接起来表示他们是相邻的两个状态，因此第一个状态后会有8根线连着代表接下来有8个可能状态。然后我们再从这8个状态中依次进行相同的操作，此时我们可以发现：这很像无向图的遍历</strong>。<ul><li><strong>因此我们可以将穷举所有可能抽象理解为遍历一个无向图</strong>！！！</li></ul></li></ul></li><li><p><strong>图的遍历有两种方式</strong>：</p><ol><li>DFS遍历</li><li>BFS层次遍历</li></ol><ul><li><strong>这里我们应该使用BFS遍历的方法</strong>，因为我们需要计算从’0000’<strong>至少</strong>转动<strong>多少下</strong>能够找到正确密码，而<strong>BFS层次遍历的时候每一层就相当于转动了一次，最终找到正确密码的时候我们只需计算它当前在遍历的第几层，这就是找到它的最短路径</strong>！</li></ul></li><li><p><strong>题目中额外有一个<code>deadends</code>数组，我们转动密码的时候要注意不能转动成这个状态，否则密码会被锁定，因此我们可以用一个<code>HashSet</code>来保存这个数组的值，当我们遍历到一个新状态的时候就判断这个状态是否在这个<code>HashSet</code>集合中，如果是就终止这个状态再往下遍历；如果不是就在这个状态下继续遍历</strong>。</p></li></ul></li><li><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//BFS层次遍历需要用到的队列</span></span><br><span class="line">        HashSet&lt;String&gt; deadendSet = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deadends));<span class="comment">//保存会导致锁定的密码值</span></span><br><span class="line">        HashSet&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//保存哪些状态我们遍历过，即哪些密码值我们有转到过，如果遍历过就不加入队列中</span></span><br><span class="line">        String start = <span class="string">&quot;0000&quot;</span>;</span><br><span class="line">        q.offer(start);<span class="comment">//往队列中加入初始值</span></span><br><span class="line">        visited.add(start);<span class="comment">//将初始值设置为遍历过的状态</span></span><br><span class="line">        <span class="keyword">int</span> stepCount=<span class="number">0</span>;<span class="comment">//用来记录找到正确密码的最少步数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty())&#123;<span class="comment">//队列非空时一直遍历</span></span><br><span class="line">            <span class="keyword">int</span> size = q.size();<span class="comment">//记录当前层有多少个结点，遍历完这些结点后遍历下一层</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                String s = q.poll();<span class="comment">//队头元素出队</span></span><br><span class="line">                <span class="keyword">if</span> (deadendSet.contains(s))<span class="keyword">continue</span>;<span class="comment">//如果当前状态会导致锁定，就跳过当前此次循环，即停止从该层向下遍历</span></span><br><span class="line">                <span class="keyword">if</span> (target.equals(s))<span class="keyword">return</span> stepCount;<span class="comment">//如果找到了目标，就返回当前记录的步数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//这个密码四个位置每个位置都可以转动，一次遍历</span></span><br><span class="line">                    String up = moveUp(s, i);<span class="comment">//先向上转动</span></span><br><span class="line">                    <span class="keyword">if</span> (!visited.contains(up))&#123;<span class="comment">//如果向上转动后的值我们未曾遍历过，就加入队列，否则不加入</span></span><br><span class="line">                        q.offer(up);</span><br><span class="line">                        visited.add(up);</span><br><span class="line">                    &#125;</span><br><span class="line">                    String down = moveDown(s,i);<span class="comment">//再向下转动</span></span><br><span class="line">                    <span class="keyword">if</span> (!visited.contains(down) )&#123;<span class="comment">//如果向下转动后的值我们未曾遍历过，就加入队列，否则不加入</span></span><br><span class="line">                        q.offer(down);</span><br><span class="line">                        visited.add(down);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stepCount++;<span class="comment">//遍历完当前层，层次+1，代表当前层次</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">moveUp</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            chars[t]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            chars[t] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">moveDown</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            chars[t]=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            chars[t] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220412230720405.png&quot; alt=&quot;image-20220412230720405&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分析题目&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目用长度为4的字符串表示密码，我们&lt;strong&gt;转动密码的时候每一位上只能上或下转动一次&lt;/strong&gt;，我们&lt;strong&gt;可以理解转动一位密码就相当于更改这个密码字符串其中一个字符的值&lt;/strong&gt;，因此我们可以&lt;strong&gt;编写两个方法，分别代表将密码字符串中的某一位向上移动一位和向下移动一位&lt;/strong&gt;：</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode210:课程表</title>
    <link href="http://example.com/2022/04/05/LeetCode210%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://example.com/2022/04/05/LeetCode210%E8%AF%BE%E7%A8%8B%E8%A1%A8/</id>
    <published>2022-04-05T14:25:33.000Z</published>
    <updated>2022-07-28T07:00:59.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220405215303452.png" alt="image-20220405215303452"></p><ul><li><p><strong>解读题意</strong>：题目中的<code>numCourses</code>表示需要修读的<strong>课程总数</strong>，且<strong>课程编号是从<code>0-numCourses-1</code><strong>的，<code>prerequisites</code>表示</strong>每两门课之间的依赖关系</strong>。我们需要给出<strong>各门课程学习的先后顺序</strong>，保证合理完成全部课程。如果无法完成所有课程，就返回空数组。</p></li><li><p><strong>什么时候无法完成</strong>？<span id="more"></span></p><ul><li>当课程之间存在<strong>循环依赖的时候就无法完成</strong>，例如完成<code>[1,2],[2,1]</code>这样，因此<strong>我们可以将这些依赖关系抽象成一个有向图，需要做的就是检测图中有没有环</strong>。</li></ul></li><li><p><strong>如果可以完成，如何记录下来先后顺序</strong>？</p><ul><li><p>将所有课程依赖关系看成图，那么<strong>完成课程的顺序就是这个有向图的拓扑排序顺序</strong>，而拓扑排序就是一次遍历每个入度为0的结点，入度为0即不被任何结点指向。</p></li><li><p>有向图的拓扑排序可以利用<code>DFS</code>深度优先搜索或者<code>BFS</code>广度优先搜索进行，这里我们是用<code>DFS</code>：</p><ul><li><p><strong>对于<code>DFS</code>来说，图的拓扑排序可以理解为后序遍历的结果然后反转</strong>。因为<strong>后序遍历先遍历叶子节点，叶子节点其实就是出度为0的结点，否则就不是叶子，也就是说一次遍历出度为翻0的所有借点，反转后就是根据入度为0的顺序遍历了</strong>。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void traverse(List&lt;Integer&gt;[] graph,int s)&#123;</span><br><span class="line">    for (Integer child : graph[s]) &#123;</span><br><span class="line">        traverse(graph,child);</span><br><span class="line">    &#125;</span><br><span class="line">    arrayList.add(s);//在遍历代码后的位置将当前结点加入集合中，这里就是后序遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：不能是先序遍历，因为有可能一个父母指向同一个孩子，此时先序遍历会直接遍历一个父母后就遍历孩子，此时该孩子还被另一个父结点指向，入度为1，遍历错误</strong>。</p></li></ul></li></ul></li><li><p><strong>代码如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited;<span class="comment">//用来记录遍历过的结点</span></span><br><span class="line">    <span class="keyword">boolean</span> Circle = <span class="keyword">false</span>;<span class="comment">//如果有环就将它置为true</span></span><br><span class="line">    <span class="keyword">boolean</span>[] onPath;<span class="comment">//用来判断是否存在环</span></span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList;<span class="comment">//用来记录后序遍历的每个结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];<span class="comment">//用来返回最后的结果</span></span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(numCourses);</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">        <span class="comment">//visited数组此处不用来判断是否存在环，而是因为我们无法保证图联通，需要将所有节点依次作为</span></span><br><span class="line">        <span class="comment">// 开始结点遍历图，此时如果依次遍历abc，下一次以b开始又会遍历bc，这就出现了重复遍历</span></span><br><span class="line">        <span class="comment">//visited数组可以避免重复遍历的问题。</span></span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">        <span class="comment">//因此使用onPath记录 当前 走过的路径，每次遍历到新结点时判断onPath是否为true,如果是</span></span><br><span class="line">        <span class="comment">//就代表之前遍历过这个结点，因此存在环，然后将Circle置为true。</span></span><br><span class="line">        List&lt;Integer&gt;[] graph = buildGraph(numCourses, prerequisites);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            traverse(graph,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Circle)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            res[i] = arrayList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建图，使用链表法，每个结点作为开始结点存在在List数组中，后面依次连接着它指向的结点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt;[] buildGraph(<span class="keyword">int</span> numCourses,<span class="keyword">int</span>[][] prerequisites)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt;[] res = <span class="keyword">new</span> ArrayList[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] p : prerequisites)&#123;</span><br><span class="line">            res[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//由于学习p[0]之前需要学习p[1]，因此由p[1]指向p[0]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历图判断是否有环，并且记录后序遍历的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;Integer&gt;[] graph,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onPath[s])&#123;</span><br><span class="line">            Circle = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//不是return，而是用全局变量记录，因为可能只是一个分支有环，return只是让当前分支不再继续，</span></span><br><span class="line">            <span class="comment">//此时我们应该让其它分支也不用再继续遍历。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//要注意，我们的onPath数组需要在退出的时候清除标记，即只记录当前路径，因为如果和visited</span></span><br><span class="line">            <span class="comment">// 一样的话，就无法判断是有环而重复还是从子节点开始遍历而重复了，因为我们无法判断图是否连通，</span></span><br><span class="line">            <span class="comment">// 需要将所有结点遍历，如果遍历到了子节点那么也是ture，因此onPath只记录当前遍历的路径。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//注意：这里必须将判断环写在头而不是下面的visited写在头，因为我们只是让visited起到避免</span></span><br><span class="line">            <span class="comment">//重复遍历子节点的问题，但他仍然是可以在一次遍历中检测环的，这是它的本职工作，我们只是不用罢了。</span></span><br><span class="line">            <span class="comment">//如果将visited放在头部，那么碰到环还是可以被他检测出来，那么它无法分辨到底是重复遍历子节点导致</span></span><br><span class="line">            <span class="comment">//条件成立还是因为环导致条件成立。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visited[s] || Circle)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[s] = <span class="keyword">true</span>;</span><br><span class="line">        onPath[s] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer child : graph[s]) &#123;</span><br><span class="line">            traverse(graph,child);</span><br><span class="line">        &#125;</span><br><span class="line">        arrayList.add(s);<span class="comment">//将当前结点加入集合中</span></span><br><span class="line">        onPath[s] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220405215303452.png&quot; alt=&quot;image-20220405215303452&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;解读题意&lt;/strong&gt;：题目中的&lt;code&gt;numCourses&lt;/code&gt;表示需要修读的&lt;strong&gt;课程总数&lt;/strong&gt;，且&lt;strong&gt;课程编号是从&lt;code&gt;0-numCourses-1&lt;/code&gt;&lt;strong&gt;的，&lt;code&gt;prerequisites&lt;/code&gt;表示&lt;/strong&gt;每两门课之间的依赖关系&lt;/strong&gt;。我们需要给出&lt;strong&gt;各门课程学习的先后顺序&lt;/strong&gt;，保证合理完成全部课程。如果无法完成所有课程，就返回空数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;什么时候无法完成&lt;/strong&gt;？</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode493:翻转对</title>
    <link href="http://example.com/2022/03/30/LeetCode493%E7%BF%BB%E8%BD%AC%E5%AF%B9/"/>
    <id>http://example.com/2022/03/30/LeetCode493%E7%BF%BB%E8%BD%AC%E5%AF%B9/</id>
    <published>2022-03-30T15:23:34.000Z</published>
    <updated>2022-03-31T00:13:29.094Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220330224627888.png" alt="image-20220330224627888"></p><ul><li><p>我们要找出下标更小的数大于某一个下标更大的数的两倍，就构成一个翻转对。<strong>题目中并不要求我们返回构成翻转对的是哪两个数，只需要返回有几个翻转对，因此只需要遍历数组然后在遍历的时候进行统计即可</strong>。<span id="more"></span></p><ul><li>但是<strong>如果使用嵌套for循环遍历数组，时间复杂度太高</strong>，因此应该考虑其他能够<strong>复杂度更低但是又能够遍历一个完整数组的方式：二路归并排序</strong>。</li></ul></li><li><p>二路归并排序会先将左边的排好序，再将右边的排好序，然后利用<code>merge</code>函数将左右两边的子数组合并，注意：<strong>我们在合并的时候其实就已经对两个子数组遍历了</strong>。等到<strong>归并排序结束，我们就能够遍历整个数组</strong>。</p></li><li><p><strong>二路归并排序时间复杂度是<code>nlogn</code>，其中<code>logn</code>代表<code>merge</code>函数对左右子数组合并的次数，n代表每次合并操作的复杂度。因此我们可以理解为<code>merge</code>函数的时间复杂度为<code>O(n)</code>，我们会调用<code>logn</code>次<code>merge</code>函数</strong>。</p><ul><li>意思就是：<strong>merge函数里面遍历两个子数组将它们合并的复杂度是<code>O(n)</code>，此时如果我们在merge函数中进行我们自己需要的遍历，保证我们新增的遍历操作时间复杂度不超过<code>O(n)</code>，这样加上原本的合并操作，时间复杂度最多也是<code>O(2n)</code>，忽略常数后时间复杂度不变</strong>。</li></ul></li><li><p>因此可以得出结论：<strong>我们可以利用归并排序中<code>merge</code>函数仅调用<code>logn</code>次就能遍历整个数组的特点，在merge函数组增加一个时间复杂度为<code>O(n)</code>的遍历操作，这样就能够避免嵌套for循环的<code>n²</code>时间复杂度</strong>。</p></li><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] temp;<span class="comment">//临时数组，用来在merge函数中辅助合并两个子数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//统计翻转对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//为临时数组初始化，长度和给定数组一样，我们不用每次merge的时候都根据当前需要</span></span><br><span class="line">        <span class="comment">//合并的两个子数组长度初始化temp，只需要在temp中对应区域覆盖上新的数据，</span></span><br><span class="line">        <span class="comment">//然后仅操作这段区域即可</span></span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//这里不能(right+left)/2，因为可能为导致溢出</span></span><br><span class="line">        sort(nums, left, mid);</span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在temp数组中指定区域覆盖上新数据</span></span><br><span class="line">        System.arraycopy(nums, left, temp, left, right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//下面是关键：从end开始找翻转对，end是右子数组开始位置</span></span><br><span class="line">        <span class="keyword">int</span> end = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历左子数组，和end所在右子数组比较是否构成翻转对，此时我们应该利用归并排序特性：</span></span><br><span class="line">        <span class="comment">//左子数组和右子数组都是已经排好序的，因此在左子数组中靠左的位置如果和end构成了翻转对，</span></span><br><span class="line">        <span class="comment">//那么左子数组中这个位置之后的肯定都和end构成翻转对。因此我们不需要将左子数组的每个</span></span><br><span class="line">        <span class="comment">//元素都在右子数组中从头开始比较，只需要从右子数组中上一轮比较退出的索引开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= mid; i++) &#123;</span><br><span class="line">            <span class="comment">//由于两倍过后可能数字溢出，需要转成Long</span></span><br><span class="line">            <span class="comment">//end从右子数组第一个元素开始，如果这个元素和左子数组的第一个元素构成翻转对，</span></span><br><span class="line">            <span class="comment">//那么翻转对数量为1，相当于此时(end+1)-(mid+1),这个式子代表当前end位置有多少</span></span><br><span class="line">            <span class="comment">//翻转对，如果构成翻转对就让end右移，退出的时候end刚好是上一轮加一的位置，因此退出</span></span><br><span class="line">            <span class="comment">//后翻转对数量为end-(mid+1)</span></span><br><span class="line">            <span class="keyword">while</span> (end &lt; right + <span class="number">1</span> &amp;&amp; (<span class="keyword">long</span>) nums[i] &gt; (<span class="keyword">long</span>) nums[end] * <span class="number">2</span>)&#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += end-mid-<span class="number">1</span>;<span class="comment">//依次累加统计翻转对数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计过后对左右数组进行合并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left, m = left, n = mid + <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = temp[n++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == right + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = temp[m++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[m] &lt; temp[n]) &#123;</span><br><span class="line">                nums[i] = temp[m++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i] = temp[n++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220330224627888.png&quot; alt=&quot;image-20220330224627888&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们要找出下标更小的数大于某一个下标更大的数的两倍，就构成一个翻转对。&lt;strong&gt;题目中并不要求我们返回构成翻转对的是哪两个数，只需要返回有几个翻转对，因此只需要遍历数组然后在遍历的时候进行统计即可&lt;/strong&gt;。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode239:滑动窗口最大值</title>
    <link href="http://example.com/2022/03/27/LeetCode239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://example.com/2022/03/27/LeetCode239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-03-27T11:59:34.000Z</published>
    <updated>2022-03-28T11:43:18.348Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如题：</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220326215415410.png" alt="image-20220326215415410"></li></ul></li><li><p>思路：使用<strong>单调队列</strong>，即<strong>先构建初始窗口，大小为K</strong>，将前面K个元素依次加入队列中，加入的时候需要保证<strong>队头元素是最大</strong>的，由于队列先进先出，这样可以保证<code>poll()</code>弹出的元素是最大的。<span id="more"></span></p><ul><li>这样保证队列中队头元素最大：<strong>每次加入的时候</strong>和当前<strong>队尾</strong>元素比较(因此应该使用双端队列，可以操作队头和队尾)，<strong>如果队列非空就拿队尾和当前元素比较，如果当前元素更大，就删除这个队尾元素，因为它不可能是最大值了</strong>。<strong>然后直到找到大于等于当前元素的新队尾，将当前元素插入到这个元素之后</strong>。<strong>具体细节在代码中注释标明</strong>！！</li></ul></li><li><p>解法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// res数组记录每一轮窗口最大值，大小为K的窗口总共有num.lenth-k+1轮，</span></span><br><span class="line">        <span class="comment">// 即数组长度为num.lenth-k+1</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        LinkedList&lt;Integer&gt; monotonicQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;<span class="comment">//将前面k个元素形成窗口，之后就只需拿新加入的元素和窗口内的比较</span></span><br><span class="line">            <span class="keyword">while</span> (!monotonicQueue.isEmpty() &amp;&amp; monotonicQueue.getLast() &lt; nums[i])&#123;</span><br><span class="line">                <span class="comment">/*如果队列非空就拿队列最后一个和当前元素比较，如果当前元素更大，就删除这个队尾元素，因为它不可能是最大值了。</span></span><br><span class="line"><span class="comment">                 但是注意：如果相同则不应该删除，因为每一轮 窗口右移 后都应该删除上一最左边的元素，</span></span><br><span class="line"><span class="comment">                 如果上一轮最左边的不是最大值，那么它就不会在队列里(上述规则说明了，在它后面的元素如果比他大会将它压出队列)，</span></span><br><span class="line"><span class="comment">                 这种情况就不用删除。如果它是最大值，那么它就会在队头位置，所以我们窗口右移删除的时候只需要判断：</span></span><br><span class="line"><span class="comment">                 窗口最左边的元素 和 队列中的队头元素是否相等，如果相等则说明窗口最左边元素在队列中，</span></span><br><span class="line"><span class="comment">                 且是最大值，应该删除，否则该元素不在队列中，不用删除。</span></span><br><span class="line"><span class="comment">                 此时如果新加入的元素和它相等，那么如果你在刚刚比较的时候将&lt;=新元素的都删除的话，</span></span><br><span class="line"><span class="comment">                 那么这个队头元素就在此时被删除，而之后我们将窗口右移的时候判断最左边元素与队头元素是否相等，</span></span><br><span class="line"><span class="comment">                 此时结果便是true，我们会将队头元素删除，但是这个队头元素实则是新加入的，造成误删！！！！*/</span></span><br><span class="line">                monotonicQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            monotonicQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第k+1个位置即索引为k的位置和前面k个元素形成的窗口依次比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res[i-k] = monotonicQueue.peek();<span class="comment">//每一轮比较前将上一轮最大的元素记录</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i-k] == monotonicQueue.peek())&#123;</span><br><span class="line">                <span class="comment">/*删除上一轮最左边的元素，因为窗口右移了</span></span><br><span class="line"><span class="comment">                 关键：这里只和队首元素比较，即最大元素，因为上一轮最左边的元素如果不是最大值，</span></span><br><span class="line"><span class="comment">                 则代表后面几位有比它更大的，而比它更大的元素在入队前会检查队尾元素是否比自己小，</span></span><br><span class="line"><span class="comment">                 如果比自己小则将这个元素删除，因为我们要返回的是最大值。</span></span><br><span class="line"><span class="comment">                 因此如果上一轮最左边的元素不是上一轮窗口的最大值，则肯定已经被移出了队列*/</span></span><br><span class="line">                monotonicQueue.remove();<span class="comment">//如果它是最大值则移出队列</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!monotonicQueue.isEmpty() &amp;&amp; monotonicQueue.getLast() &lt; nums[i])&#123;</span><br><span class="line">                monotonicQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            monotonicQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res[nums.length - k] = monotonicQueue.peek();</span><br><span class="line">        <span class="comment">//之前循环到nums.length-1后就结束了，res中的最后一个元素位置是nums.length-k，而不是</span></span><br><span class="line">        <span class="comment">// nums.lenth - 1 - k，因此应该补上</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220326215415410.png&quot; alt=&quot;image-20220326215415410&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;思路：使用&lt;strong&gt;单调队列&lt;/strong&gt;，即&lt;strong&gt;先构建初始窗口，大小为K&lt;/strong&gt;，将前面K个元素依次加入队列中，加入的时候需要保证&lt;strong&gt;队头元素是最大&lt;/strong&gt;的，由于队列先进先出，这样可以保证&lt;code&gt;poll()&lt;/code&gt;弹出的元素是最大的。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode503：下一个更大元素</title>
    <link href="http://example.com/2022/03/22/LeetCode503%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2022/03/22/LeetCode503%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/</id>
    <published>2022-03-22T10:51:49.000Z</published>
    <updated>2022-03-28T11:43:07.057Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>题目如下</strong>：</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220322165023100.png" alt="image-20220322165023100"></li></ul></li><li><p>分析：该题可以用<strong>单调栈</strong>来完成，<strong>单调栈就是一种通过特殊操作使栈中元素有序的栈</strong>。<span id="more"></span></p></li><li><p><strong>单调栈可以这样实现：从给定的数组从后往前推，每次检查当前元素和栈顶元素的大小(栈空不检查)，如果当前元素比栈顶元素大，就让栈顶元素出栈，最后碰到栈顶元素比当前元素大，就让当前元素入栈，这样可以保证栈里的顺序是从小到大的</strong>。</p></li><li><p>使用单调栈我们解决此题：<strong>我们从数组最后一个开始比较，此时栈空，将此元素的答案标记为-1，压入栈中。然后将栈顶元素(此时就是最后一个元素)和倒数第二个元素比较，如果倒数第二个元素更大，就将栈顶元素出栈，出栈后此时栈已空，将倒数第二个压入栈中</strong>。</p><ul><li><strong>因为我们要找的是某一个元素后面比它大的第一个元素，那么我们肯定会先和倒数第二个比较完了才和最后一个比较，如果倒数第二个满足要求，即比当前元素更大，那么最后一个元素则不会进行比较；而如果倒数第二个不满足要求，即比当前元素更小，那么比倒数第二个元素更小的最后一个元素肯定也不满足要求，也没有比较的必要，因此如果倒数第二个比最后一个大，则将最后一个元素出栈，此后不需要进行比较</strong>。</li><li>以此类推。</li></ul></li><li><p>此题还有一个特别：如果后面没有找到更大的，就会从头开始找。此时<strong>我们可以将数组扩大成原来的两倍，元素不变，从这个新的数组从尾部<code>(2*n-1)</code>开始比较</strong>。</p><ul><li>例如<code>&#123;1,2,4,3,1&#125;</code>-&gt;<code>&#123;1,2,4,3,1,1,2,4,3,1&#125;</code>。这样从未到头进行刚刚的操作，最终就相当于循环比较。</li><li>我们可以使用<strong>循环数组</strong>的方法<strong>抽象成原来数组扩容</strong>了：从<code>(2*n-1)%n</code>一直往前比较。</li></ul></li><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElements(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里使用LinkedList当做栈来使用，LinkedList可以用来模拟栈，也可以用来模拟队</span></span><br><span class="line">        <span class="comment">//列。LinkedList中有两个添加元素的方法，add()和push()，add在尾部添加元素，</span></span><br><span class="line">        <span class="comment">//push在头部添加元素，pop从头部弹出元素，配合使用模拟栈和队列。</span></span><br><span class="line">        <span class="comment">//也可以直接使用Stack当做栈，但是操作起来速度慢一些</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * (n) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % n] &gt;= stack.peek()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i % n] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            <span class="comment">//如果栈空相当于此时元素比之后的都大，返回-1</span></span><br><span class="line">            stack.push(nums[i % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;题目如下&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220322165023100.png&quot; alt=&quot;image-20220322165023100&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分析：该题可以用&lt;strong&gt;单调栈&lt;/strong&gt;来完成，&lt;strong&gt;单调栈就是一种通过特殊操作使栈中元素有序的栈&lt;/strong&gt;。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode23:合并多个有序链表</title>
    <link href="http://example.com/2022/03/20/LeetCode23%E5%A4%9A%E8%A1%A8%E5%90%88%E5%B9%B6/"/>
    <id>http://example.com/2022/03/20/LeetCode23%E5%A4%9A%E8%A1%A8%E5%90%88%E5%B9%B6/</id>
    <published>2022-03-20T09:26:03.000Z</published>
    <updated>2022-08-01T20:19:34.460Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>使用优先权队列<code>PriorityQueue</code>，将所有链表的头结点加入，每次<code>poll</code>弹出最小的，然后再加入这个节点的下一个，以此类推，能将所有链表有序合并</strong>。</p><span id="more"></span></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lists.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;ListNode&gt; listNodes = <span class="keyword">new</span> PriorityQueue&lt;&gt;(</span><br><span class="line">            lists.length , (o1,o2) -&gt; o1.val - o2.val</span><br><span class="line">        );<span class="comment">/*传入链表程度和比较器，o1.val - o2.val 小于0表示o1更小，属于升序排列，这是</span></span><br><span class="line"><span class="comment">          lambda表达式，效果和使用匿名类一样*/</span></span><br><span class="line">        <span class="keyword">for</span> (ListNode listNode : lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listNodes.add(listNode);</span><br><span class="line">                <span class="comment">/*只加入头结点而不是全部加入，poll其中一个的时候就加入这个头结点的next，这样</span></span><br><span class="line"><span class="comment">                  这个优先权队列始终只有K各节点，可以保证调整队列的复杂度是logk,n个结点全部</span></span><br><span class="line"><span class="comment">                  加入和弹出总的时间复杂度你nlogk，如果一次性全部加入，每次调整优先级的复杂度</span></span><br><span class="line"><span class="comment">                  是logn，总的时间复杂度是nlogn</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode virtualHeadNode = res;</span><br><span class="line">        <span class="keyword">while</span> (!listNodes.isEmpty())&#123;</span><br><span class="line">            virtualHeadNode.next = listNodes.poll();</span><br><span class="line">            virtualHeadNode = virtualHeadNode.next;</span><br><span class="line">            <span class="keyword">if</span>(virtualHeadNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listNodes.add(virtualHeadNode.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        virtualHeadNode.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*只加头结点进入优先权队列可以不要这句，但是如果全部加入，可能会有多个相同的值，他们之间的相对</span></span><br><span class="line"><span class="comment">          位置不一定和原来一样，可能最后一个原来是第一个，这样它的next就是下一个而不是null，这里就会</span></span><br><span class="line"><span class="comment">          形成环。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：<strong>合并多个有序链表</strong>：<strong>使用优先权队列</strong>。队列里只存放头结点，取出一个头结点再加入下一个，避免有序结点相对顺序变化后最后形成环的问题，且时间复杂度<code>nlogk</code>，k为头结点数，即链表数；如果全部加入则<code>nlogn</code>，且需要将最后加入的结点的<code>next=null</code>，避免出现环。</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用优先权队列&lt;code&gt;PriorityQueue&lt;/code&gt;，将所有链表的头结点加入，每次&lt;code&gt;poll&lt;/code&gt;弹出最小的，然后再加入这个节点的下一个，以此类推，能将所有链表有序合并&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>关于正则表达式`*`为什么会在行尾匹配出一个空串</title>
    <link href="http://example.com/2022/03/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%9F%E5%8F%B7%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <id>http://example.com/2022/03/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%9F%E5%8F%B7%E9%99%90%E5%AE%9A%E7%AC%A6/</id>
    <published>2022-03-18T12:23:31.000Z</published>
    <updated>2022-03-20T09:30:30.711Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>*</code>代表<strong>匹配0个或者多个</strong>，例如<code>5*</code>表示匹配0个或者多个5，在<strong>匹配的时候系统会每个字符依次匹配</strong>，即调用<code>.find()</code>过后返回到<code>groups</code>数组中的位置是<strong>从第一个字符开始找</strong>5，<strong>如果第一个字符不是5就相当于找到了0个5，此时<code>groups</code>数组中索引的第一二个是(0,0)<strong>，</strong>意思是从0到0的位置有0个5，这个时候用字符串找子串的方式<code>return</code>这个范围的子串给我们，即此时我们得到了一个<code>&quot;&quot;</code>空串，此时第一次匹配结束，之后以此类推</strong>。<span id="more"></span></p><ul><li>**用<code>5\*</code>匹配字符串<code>&quot;a555fds651&quot;</code>**：<ul><li>**第一次<code>find()</code>找到0个5开始于0结束于0，返回<code>&quot;&quot;</code>**；</li><li>**第二次<code>find()</code>找到3个5开始于1结束于4，返回<code>555</code>**；</li><li>**最后匹配来到了1，同样返回<code>&quot;&quot;</code>，但是还没有结束，还会在最后返回一个<code>&quot;&quot;</code>**。</li></ul></li></ul></li><li><p><strong>在使用正则表达式<code>.find()</code>匹配的时候</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public boolean find() &#123;</span><br><span class="line">    int nextSearchIndex = last;//将下一个搜索位置移到last，last表示上次搜索位置的结束位置，因为搜索子串是左闭右开区间，因此这个最右的字符头一次没有匹配到，这次从这开始</span><br><span class="line">    if (nextSearchIndex == first)//如果下一次搜索的开始位置等于上一个子串开始位置first，则往后移一位，只有last=first即搜到空子串才回这样</span><br><span class="line">        nextSearchIndex++;</span><br><span class="line"></span><br><span class="line">    //下面的from和to代表父串的开始和结束位置，即(0,length)</span><br><span class="line">    // If next search starts before region, start it at region</span><br><span class="line">    if (nextSearchIndex &lt; from)//下一个搜索位置小于0则移到0</span><br><span class="line">        nextSearchIndex = from;</span><br><span class="line"></span><br><span class="line">    // If next search starts beyond region then it fails</span><br><span class="line">    if (nextSearchIndex &gt; to) &#123;</span><br><span class="line">        //！！！！这句就是出现问题的关键！！！！！！！！这里的to表示父串长度，这里判断大于搜索位置大于父串长度才会结束搜索，但是我们知道字符串索引是从0开始的，因此不需要大于这个长度，只要等于这个长度其实就搜不到了。</span><br><span class="line">        //因此我们nextSerchIndex=to即搜索索引是父串长度的位置的时候仍然会继续以to位置为开始索引开始搜索</span><br><span class="line">        for (int i = 0; i &lt; groups.length; i++)</span><br><span class="line">            groups[i] = -1;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return search(nextSearchIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>以to(父串length，由于索引从0开始，实际没这个位置的字符)位置为开始索引开始搜索的时候*自然搜不到我们要的，此时则代表从to到to找到了0个子串，然后根据子串搜索源码可以知道，即使子串开始索引等于length长度，仍然不会报索引越界的错误，因为开始索引只要不小于0就行。如果开始和结束位置都是length，子串长度为0，返回<code>&quot;&quot;</code>空串</strong>。</p><ul><li><p><strong>java中<code>substring()</code>源码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex) &#123;//代表子串开始位置和结束位置</span><br><span class="line">    if (beginIndex &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    if (endIndex &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    int subLen = endIndex - beginIndex;</span><br><span class="line">    if (subLen &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this</span><br><span class="line">        : new String(value, beginIndex, subLen);</span><br><span class="line">&#125;//this代表要找的父字符串</span><br></pre></td></tr></table></figure><ul><li><strong>可以看到<code>sbustring()</code>会先判断输入的子串索引是否合法，即是否在0到父串长度之间，然后计算要得到的自传长度<code>int subLen = endIndex - beginIndex</code>,如果这个长度不小于0，就进行最后的返回值，即如果<code>(beginIndex == 0) &amp;&amp; (endIndex == value.length)</code>成立，即要找的子串就是父串本身，则返回父串，否则<code>new String(value, beginIndex, subLen)</code>，代表new一个新串，从父串的<code>beginIndex</code>位置开始加入<code>sunLen</code>个字符</strong>。</li><li><strong>这也能看出为什么返回子串是左闭右开区间，因为返回子串的时候是从开始位置放入搜索区间长度个字符，例如1-3只返回从1开始2个字符，因此取的是1和2,3总是取不到的</strong>。</li></ul></li></ul></li></ul></li><li><p><strong>因此*在匹配字符串的时候最后总是会匹配到一个<code>&quot;&quot;</code>空串</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;代表&lt;strong&gt;匹配0个或者多个&lt;/strong&gt;，例如&lt;code&gt;5*&lt;/code&gt;表示匹配0个或者多个5，在&lt;strong&gt;匹配的时候系统会每个字符依次匹配&lt;/strong&gt;，即调用&lt;code&gt;.find()&lt;/code&gt;过后返回到&lt;code&gt;groups&lt;/code&gt;数组中的位置是&lt;strong&gt;从第一个字符开始找&lt;/strong&gt;5，&lt;strong&gt;如果第一个字符不是5就相当于找到了0个5，此时&lt;code&gt;groups&lt;/code&gt;数组中索引的第一二个是(0,0)&lt;strong&gt;，&lt;/strong&gt;意思是从0到0的位置有0个5，这个时候用字符串找子串的方式&lt;code&gt;return&lt;/code&gt;这个范围的子串给我们，即此时我们得到了一个&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;空串，此时第一次匹配结束，之后以此类推&lt;/strong&gt;。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单个字符的字符串长度可能为2</title>
    <link href="http://example.com/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/"/>
    <id>http://example.com/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/</id>
    <published>2022-03-16T08:10:09.000Z</published>
    <updated>2022-03-20T09:30:00.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么单个字符的字符串长度为2？"><a href="#为什么单个字符的字符串长度为2？" class="headerlink" title="为什么单个字符的字符串长度为2？"></a>为什么单个字符的字符串长度为2？</h1><ul><li><p><strong>我们知道字符串的<code>.length()</code>方法会返回字符串的长度，但以下有的字符串只有一个字符，<code>.length()</code>返回的长度却是2，例如</strong>:<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;𝄞&quot;;</span><br><span class="line">System.out.println(str.length());</span><br></pre></td></tr></table></figure><p><strong>输出结果如下</strong>：<img src="https://img-blog.csdnimg.cn/ac2837f14073475d9f617cf33892acf7.png" alt="img"></p></li><li><p><strong>这是因为<code>length</code>方法返回的是采用utf-16编码表示的给定字符串所需要的代码单元数量（<a href="https://blog.csdn.net/w55935/article/details/123500133?spm=1001.2014.3001.5502">代码单元不懂的可以看这里</a>），大多数常用字符仅用一个代码单元就可以表示，但有些却需要一对代码单元表示</strong>。</p></li><li><p><strong>想要知道字符串的实际长度，即<code>Unicode</code>代码点的数量（一个字符对应一个代码点，代码点用16进制编写，并且在前面加上U+，例如<code>U+0041</code>就是字母A的代码点），可以采用如下方法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;𝄞&quot;;</span><br><span class="line">int count = str.codePointCount(0, str.length());</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><p><strong>此时输出</strong>：<img src="https://img-blog.csdnimg.cn/3c7f254a7f4749d2bb2cfec9de2cf0af.png" alt="img"></p></li><li><p><strong>额外需要知道：字符串的<code>.charAt(n)</code>方法返回的是处于位置n的代码单元，而不是字符，所以如果对于这样两个代码单元的字符调用<code>.char()</code>得不到我们想要的字符</strong>：</p></li><li><pre><code>String str = &quot;𝄞&quot;;char c = str.charAt(0);System.out.println(c);</code></pre><p><strong>此时输出</strong>：<img src="https://img-blog.csdnimg.cn/ab999f3ad6484f4fb2481914fc2aee96.png" alt="img"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么单个字符的字符串长度为2？&quot;&gt;&lt;a href=&quot;#为什么单个字符的字符串长度为2？&quot; class=&quot;headerlink&quot; title=&quot;为什么单个字符的字符串长度为2？&quot;&gt;&lt;/a&gt;为什么单个字符的字符串长度为2？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;我们知道字符串的&lt;code&gt;.length()&lt;/code&gt;方法会返回字符串的长度，但以下有的字符串只有一个字符，&lt;code&gt;.length()&lt;/code&gt;返回的长度却是2，例如&lt;/strong&gt;:</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
