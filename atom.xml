<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酒书茶社</title>
  
  <subtitle>人是生而自由的，却无往不在枷锁之中。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-18T10:31:49.793Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YuFish-W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sring如何改变</title>
    <link href="http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/"/>
    <id>http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/</id>
    <published>2022-04-18T01:38:03.000Z</published>
    <updated>2022-04-18T10:31:49.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么说String类型不可变？"><a href="#为什么说String类型不可变？" class="headerlink" title="为什么说String类型不可变？"></a><strong>为什么说<code>String</code>类型不可变</strong>？</h1><ul><li><p><code>String</code>的源码里其实使用一个<code>char</code>数组来存储字符串的，**<code>String</code>之所以说不可变，就是因为这个char数组它是<code>private</code>类型，而且<code>String</code>没有对外暴露和提供修改这个<code>char</code>数组的方法，因此我们无法更改这个<code>char</code>数组的值，所以<code>String</code>是不可变的**。<span id="more"></span></p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418084542067.png" alt="image-20220418084542067"></p></li><li><p><strong>注意</strong>：这里<code>char</code>数组被<code>final</code>修饰<strong>不代表不可变</strong>，因为数组是引用类型，final修饰引用类型的时候代表引用不可更改，即我们<strong>只是不能将这个<code>value</code>属性指向新的引用</strong>，但是<strong>它原本指向的这个<code>char</code>数组中的字符我们是可以更改的</strong>。</p></li><li><p>因此，<strong>如果我们可以通过更改<code>value</code>指向的<code>char</code>数组本身，就可以改变字符串</strong>。正常情况下我们是无法更改的，这也是我们说字符串不可变的原因，但是我们通过极端方法也是可以更改的，例如<strong>使用反射可以得到这个私有的value属性，然后通过爆破我们就可以访问这个私有属性了</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String  s = &quot;aabbc&quot;;</span><br><span class="line">Class&lt;? extends String&gt; aClass = s.getClass();</span><br><span class="line">Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性</span><br><span class="line">value.setAccessible(true);//将它设置成可以访问</span><br><span class="line">char[] chars =  (char[]) value.get(s);</span><br><span class="line">System.out.println(s);//在修改之前输出s</span><br><span class="line">chars[0] = &#x27;k&#x27;;         //修改s</span><br><span class="line">System.out.println(s);//输出修改之后的s</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418091040434.png" alt="image-20220418091040434"></p><ul><li><strong>可以看出这个字符串确实被改变了</strong>。</li></ul></li></ul><h1 id="证明我们是真的修改了字符串"><a href="#证明我们是真的修改了字符串" class="headerlink" title="证明我们是真的修改了字符串"></a>证明我们是真的修改了字符串</h1><h2 id="字符串的hashCode-方法"><a href="#字符串的hashCode-方法" class="headerlink" title="字符串的hashCode()方法"></a>字符串的<code>hashCode()</code>方法</h2><ul><li><p><strong>这里我们不能用<code>hashCode()</code>返回的哈希值来判断是否是同一个字符串</strong>，因为<code>hashCode</code>码值不等于地址，字符串的<code>hashCode</code>码是通过对每个字符进行一定的规则的累加得到的，然而<code>String</code>类中有一个int类型的属性叫<code>hash</code>，<strong>当这个<code>hash</code>=0的时候就会去计算这个String的<code>hashCode</code>码值</strong>，但是计算完后就会将计算结果赋值给这个<code>hash</code>属性；<strong>如果<code>hash</code>不等于0就返回这个属性值作为当前字符串的<code>hashCode</code><strong>。因此我们第一次计算调用<code>hashCode()</code>的时候由于<code>int</code>类型的属性默认为0，所以会逐个字符计算<code>hash</code>值，</strong>第二次调用<code>hashCode()</code>的时候返回的<code>hash</code>值其实是第一次计算出来缓存好的</strong>，因此肯定是相同的，所以此时调用<code>hashCode()</code>方法返回的值无法用来判断是否为同一个字符串。</p><ul><li><p><strong>源码如下</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private int hash; // Default to 0</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    int h = hash;//得到当前属性hash的值</span><br><span class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) &#123;//如果它为0就计算当前字符串的hashCode</span><br><span class="line">        char val[] = value;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = 31 * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;//计算完了后赋值给hash属性</span><br><span class="line">    &#125;</span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>我们可以这样判断修改过后的字符串到底是<strong>原地修改</strong>得到的还是<strong>重新赋值</strong>得到的：<strong>将这个字符串的引用赋值给另一个字符串变量tempC，我们修改这个字符串前后都输出这个tempC，如果我们是原地修改，那么这个tempC输出的值前后两次肯定一样；如果是重新赋值，那么tempC的值前后两次肯定不同</strong>。</p><ul><li><pre><code>String  s = &quot;aabbc&quot;;Class&lt;? extends String&gt; aClass = s.getClass();Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性value.setAccessible(true);//将它设置成可以访问char[] chars =  (char[]) value.get(s);String tempC = s;System.out.println(tempC );//在修改之前输出tempC chars[0] = &#39;k&#39;;         //修改sSystem.out.println(tempC );//输出修改之后的tempC <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **结果如下**：![image-20220418092752119](https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092752119.png)</span><br><span class="line"></span><br><span class="line">- **如果是重新赋值的情况**，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>String  s = &quot;aabbc&quot;;String tempC = s;System.out.println(tempC);s = &quot;sss&quot;;System.out.println(tempC);</code></pre><ul><li><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092930118.png" alt="image-20220418092930118"></li></ul></li></ul></li><li><p><strong>因此可知字符串确实是可以通过反射修改的</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么说String类型不可变？&quot;&gt;&lt;a href=&quot;#为什么说String类型不可变？&quot; class=&quot;headerlink&quot; title=&quot;为什么说String类型不可变？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么说&lt;code&gt;String&lt;/code&gt;类型不可变&lt;/strong&gt;？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;的源码里其实使用一个&lt;code&gt;char&lt;/code&gt;数组来存储字符串的，**&lt;code&gt;String&lt;/code&gt;之所以说不可变，就是因为这个char数组它是&lt;code&gt;private&lt;/code&gt;类型，而且&lt;code&gt;String&lt;/code&gt;没有对外暴露和提供修改这个&lt;code&gt;char&lt;/code&gt;数组的方法，因此我们无法更改这个&lt;code&gt;char&lt;/code&gt;数组的值，所以&lt;code&gt;String&lt;/code&gt;是不可变的**。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode752:打开转盘锁</title>
    <link href="http://example.com/2022/04/12/LeetCode752%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/"/>
    <id>http://example.com/2022/04/12/LeetCode752%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</id>
    <published>2022-04-12T15:44:46.000Z</published>
    <updated>2022-04-12T15:49:51.047Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220412230720405.png" alt="image-20220412230720405"></p><ul><li><p><strong>分析题目</strong>：</p><ul><li><p>题目用长度为4的字符串表示密码，我们<strong>转动密码的时候每一位上只能上或下转动一次</strong>，我们<strong>可以理解转动一位密码就相当于更改这个密码字符串其中一个字符的值</strong>，因此我们可以<strong>编写两个方法，分别代表将密码字符串中的某一位向上移动一位和向下移动一位</strong>：<span id="more"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将密码字符串s的第t位向上拨动一位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveUp</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();<span class="comment">//将当前密码字符串转成char数组，便于更改每一位的值，最后将这个char数组转成字符串</span></span><br><span class="line">    <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;9&#x27;</span>)&#123;<span class="comment">//当值为9时向上拨动应该为0</span></span><br><span class="line">        chars[t]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        chars[t] += <span class="number">1</span>;<span class="comment">//其它情况下就是当前字符值+1</span></span><br><span class="line">        <span class="comment">//注意这里是加int类型的1而不是char类型的1，因为char类型底层是对应ASCII的，ASCII码是用int类型的值对应查找char类型的字符，</span></span><br><span class="line">        <span class="comment">//而&#x27;1&#x27;,&#x27;2&#x27;这些字符在码表中是连续的，我们将&#x27;1&#x27;的ASCII码值+1可以得到&#x27;2&#x27;，</span></span><br><span class="line">        <span class="comment">//但是如果加的是字符类型的&#x27;1&#x27;那么它的ASCII码值并不是1，此时得出的字符并不是&#x27;2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveDown</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        chars[t]=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        chars[t] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>思路</strong>：</p><ul><li><p>我们要从当前’0000’开始找到正确的密码，那么就需要<strong>穷举所有的可能来判断是否和目标target值相等</strong>。</p></li><li><p><strong>如何穷举</strong>？</p><ul><li><strong>当我们在转动密码的时候我们可以转动四位中的任何一位，而每次转动有两个方向，因此我们每次转动后有8中可能出现的结果。我们可以理解成从当前状态做出一个操作后变到下一个状态，将这两个状态用线连接起来表示他们是相邻的两个状态，因此第一个状态后会有8根线连着代表接下来有8个可能状态。然后我们再从这8个状态中依次进行相同的操作，此时我们可以发现：这很像无向图的遍历</strong>。<ul><li><strong>因此我们可以将穷举所有可能抽象理解为遍历一个无向图</strong>！！！</li></ul></li></ul></li><li><p><strong>图的遍历有两种方式</strong>：</p><ol><li>DFS遍历</li><li>BFS层次遍历</li></ol><ul><li><strong>这里我们应该使用BFS遍历的方法</strong>，因为我们需要计算从’0000’<strong>至少</strong>转动<strong>多少下</strong>能够找到正确密码，而<strong>BFS层次遍历的时候每一层就相当于转动了一次，最终找到正确密码的时候我们只需计算它当前在遍历的第几层，这就是找到它的最短路径</strong>！</li></ul></li><li><p><strong>题目中额外有一个<code>deadends</code>数组，我们转动密码的时候要注意不能转动成这个状态，否则密码会被锁定，因此我们可以用一个<code>HashSet</code>来保存这个数组的值，当我们遍历到一个新状态的时候就判断这个状态是否在这个<code>HashSet</code>集合中，如果是就终止这个状态再往下遍历；如果不是就在这个状态下继续遍历</strong>。</p></li></ul></li><li><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//BFS层次遍历需要用到的队列</span></span><br><span class="line">        HashSet&lt;String&gt; deadendSet = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deadends));<span class="comment">//保存会导致锁定的密码值</span></span><br><span class="line">        HashSet&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//保存哪些状态我们遍历过，即哪些密码值我们有转到过，如果遍历过就不加入队列中</span></span><br><span class="line">        String start = <span class="string">&quot;0000&quot;</span>;</span><br><span class="line">        q.offer(start);<span class="comment">//往队列中加入初始值</span></span><br><span class="line">        visited.add(start);<span class="comment">//将初始值设置为遍历过的状态</span></span><br><span class="line">        <span class="keyword">int</span> stepCount=<span class="number">0</span>;<span class="comment">//用来记录找到正确密码的最少步数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty())&#123;<span class="comment">//队列非空时一直遍历</span></span><br><span class="line">            <span class="keyword">int</span> size = q.size();<span class="comment">//记录当前层有多少个结点，遍历完这些结点后遍历下一层</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                String s = q.poll();<span class="comment">//队头元素出队</span></span><br><span class="line">                <span class="keyword">if</span> (deadendSet.contains(s))<span class="keyword">continue</span>;<span class="comment">//如果当前状态会导致锁定，就跳过当前此次循环，即停止从该层向下遍历</span></span><br><span class="line">                <span class="keyword">if</span> (target.equals(s))<span class="keyword">return</span> stepCount;<span class="comment">//如果找到了目标，就返回当前记录的步数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//这个密码四个位置每个位置都可以转动，一次遍历</span></span><br><span class="line">                    String up = moveUp(s, i);<span class="comment">//先向上转动</span></span><br><span class="line">                    <span class="keyword">if</span> (!visited.contains(up))&#123;<span class="comment">//如果向上转动后的值我们未曾遍历过，就加入队列，否则不加入</span></span><br><span class="line">                        q.offer(up);</span><br><span class="line">                        visited.add(up);</span><br><span class="line">                    &#125;</span><br><span class="line">                    String down = moveDown(s,i);<span class="comment">//再向下转动</span></span><br><span class="line">                    <span class="keyword">if</span> (!visited.contains(down) )&#123;<span class="comment">//如果向下转动后的值我们未曾遍历过，就加入队列，否则不加入</span></span><br><span class="line">                        q.offer(down);</span><br><span class="line">                        visited.add(down);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stepCount++;<span class="comment">//遍历完当前层，层次+1，代表当前层次</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">moveUp</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            chars[t]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            chars[t] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">moveDown</span><span class="params">(String s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (chars[t]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            chars[t]=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            chars[t] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220412230720405.png&quot; alt=&quot;image-20220412230720405&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分析题目&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目用长度为4的字符串表示密码，我们&lt;strong&gt;转动密码的时候每一位上只能上或下转动一次&lt;/strong&gt;，我们&lt;strong&gt;可以理解转动一位密码就相当于更改这个密码字符串其中一个字符的值&lt;/strong&gt;，因此我们可以&lt;strong&gt;编写两个方法，分别代表将密码字符串中的某一位向上移动一位和向下移动一位&lt;/strong&gt;：</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode210:课程表</title>
    <link href="http://example.com/2022/04/05/LeetCode210%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://example.com/2022/04/05/LeetCode210%E8%AF%BE%E7%A8%8B%E8%A1%A8/</id>
    <published>2022-04-05T14:25:33.000Z</published>
    <updated>2022-04-05T14:27:05.232Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220405215303452.png" alt="image-20220405215303452"></p><ul><li><p><strong>解读题意</strong>：题目中的<code>numCourses</code>表示需要修读的<strong>课程总数</strong>，且<strong>课程编号是从<code>0-numCourses-1</code><strong>的，<code>prerequisites</code>表示</strong>每两门课之间的依赖关系</strong>。我们需要给出<strong>各门课程学习的先后顺序</strong>，保证合理完成全部课程。如果无法完成所有课程，就返回空数组。</p></li><li><p><strong>什么时候无法完成</strong>？<span id="more"></span></p><ul><li>当课程之间存在<strong>循环依赖的时候就无法完成</strong>，例如完成<code>[1,2],[2,1]</code>这样，因此<strong>我们可以将这些依赖关系抽象成一个有向图，需要做的就是检测图中有没有环</strong>。</li></ul></li><li><p><strong>如果可以完成，如何记录下来先后顺序</strong>？</p><ul><li><p>将所有课程依赖关系看成图，那么<strong>完成课程的顺序就是这个有向图的拓扑排序顺序</strong>，而拓扑排序就是一次遍历每个入度为0的结点，入度为0即不被任何结点指向。</p></li><li><p>有向图的拓扑排序可以利用<code>DFS</code>深度优先搜索或者<code>BFS</code>广度优先搜索进行，这里我们是用<code>DFS</code>：</p><ul><li><p><strong>对于<code>DFS</code>来说，图的拓扑排序可以理解为后序遍历的结果然后反转</strong>。因为<strong>后序遍历先遍历叶子节点，叶子节点其实就是出度为0的结点，否则就不是叶子，也就是说一次遍历出度为翻0的所有借点，反转后就是根据入度为0的顺序遍历了</strong>。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void traverse(List&lt;Integer&gt;[] graph,int s)&#123;</span><br><span class="line">    for (Integer child : graph[s]) &#123;</span><br><span class="line">        traverse(graph,child);</span><br><span class="line">    &#125;</span><br><span class="line">    arrayList.add(s);//在遍历代码后的位置将当前结点加入集合中，这里就是后序遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：不能是先序遍历，因为有可能一个父母指向同一个孩子，此时先序遍历会直接遍历一个父母后就遍历孩子，此时该孩子还被另一个父结点指向，入度为1，遍历错误</strong>。</p></li></ul></li></ul></li><li><p><strong>代码如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span>[] visited;<span class="comment">//用来记录遍历过的结点</span></span><br><span class="line">    <span class="keyword">boolean</span> Circle = <span class="keyword">false</span>;<span class="comment">//如果有环就将它置为true</span></span><br><span class="line">    <span class="keyword">boolean</span>[] onPath;<span class="comment">//用来判断是否存在环</span></span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList;<span class="comment">//用来记录后序遍历的每个结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];<span class="comment">//用来返回最后的结果</span></span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(numCourses);</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">        <span class="comment">//visited数组此处不用来判断是否存在环，而是因为我们无法保证图联通，需要将所有节点依次作为</span></span><br><span class="line">        <span class="comment">// 开始结点遍历图，此时如果依次遍历abc，下一次以b开始又会遍历bc，这就出现了重复遍历</span></span><br><span class="line">        <span class="comment">//visited数组可以避免重复遍历的问题。</span></span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="keyword">boolean</span>[numCourses];</span><br><span class="line">        <span class="comment">//因此使用onPath记录 当前 走过的路径，每次遍历到新结点时判断onPath是否为true,如果是</span></span><br><span class="line">        <span class="comment">//就代表之前遍历过这个结点，因此存在环，然后将Circle置为true。</span></span><br><span class="line">        List&lt;Integer&gt;[] graph = buildGraph(numCourses, prerequisites);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            traverse(graph,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Circle)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            res[i] = arrayList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建图，使用链表法，每个结点作为开始结点存在在List数组中，后面依次连接着它指向的结点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt;[] buildGraph(<span class="keyword">int</span> numCourses,<span class="keyword">int</span>[][] prerequisites)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt;[] res = <span class="keyword">new</span> ArrayList[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] p : prerequisites)&#123;</span><br><span class="line">            res[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//由于学习p[0]之前需要学习p[1]，因此由p[1]指向p[0]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历图判断是否有环，并且记录后序遍历的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;Integer&gt;[] graph,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onPath[s])&#123;</span><br><span class="line">            Circle = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//不是return，而是用全局变量记录，因为可能只是一个分支有环，return只是让当前分支不再继续，</span></span><br><span class="line">            <span class="comment">//此时我们应该让其它分支也不用再继续遍历。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//要注意，我们的onPath数组需要在退出的时候清除标记，即只记录当前路径，因为如果和visited</span></span><br><span class="line">            <span class="comment">// 一样的话，就无法判断是有环而重复还是从子节点开始遍历而重复了，因为我们无法判断图是否连通，</span></span><br><span class="line">            <span class="comment">// 需要将所有结点遍历，如果遍历到了子节点那么也是ture，因此onPath只记录当前遍历的路径。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//注意：这里必须将判断环写在头而不是下面的visited写在头，因为我们只是让visited起到避免</span></span><br><span class="line">            <span class="comment">//重复遍历子节点的问题，但他仍然是可以在一次遍历中检测环的，这是它的本职工作，我们只是不用罢了。</span></span><br><span class="line">            <span class="comment">//如果将visited放在头部，那么碰到环还是可以被他检测出来，那么它无法分辨到底是重复遍历子节点导致</span></span><br><span class="line">            <span class="comment">//条件成立还是因为环导致条件成立。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visited[s] || Circle)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[s] = <span class="keyword">true</span>;</span><br><span class="line">        onPath[s] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer child : graph[s]) &#123;</span><br><span class="line">            traverse(graph,child);</span><br><span class="line">        &#125;</span><br><span class="line">        arrayList.add(s);<span class="comment">//将当前结点加入集合中</span></span><br><span class="line">        onPath[s] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220405215303452.png&quot; alt=&quot;image-20220405215303452&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;解读题意&lt;/strong&gt;：题目中的&lt;code&gt;numCourses&lt;/code&gt;表示需要修读的&lt;strong&gt;课程总数&lt;/strong&gt;，且&lt;strong&gt;课程编号是从&lt;code&gt;0-numCourses-1&lt;/code&gt;&lt;strong&gt;的，&lt;code&gt;prerequisites&lt;/code&gt;表示&lt;/strong&gt;每两门课之间的依赖关系&lt;/strong&gt;。我们需要给出&lt;strong&gt;各门课程学习的先后顺序&lt;/strong&gt;，保证合理完成全部课程。如果无法完成所有课程，就返回空数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;什么时候无法完成&lt;/strong&gt;？</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode493:翻转对</title>
    <link href="http://example.com/2022/03/30/LeetCode493%E7%BF%BB%E8%BD%AC%E5%AF%B9/"/>
    <id>http://example.com/2022/03/30/LeetCode493%E7%BF%BB%E8%BD%AC%E5%AF%B9/</id>
    <published>2022-03-30T15:23:34.000Z</published>
    <updated>2022-03-31T00:13:29.094Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220330224627888.png" alt="image-20220330224627888"></p><ul><li><p>我们要找出下标更小的数大于某一个下标更大的数的两倍，就构成一个翻转对。<strong>题目中并不要求我们返回构成翻转对的是哪两个数，只需要返回有几个翻转对，因此只需要遍历数组然后在遍历的时候进行统计即可</strong>。<span id="more"></span></p><ul><li>但是<strong>如果使用嵌套for循环遍历数组，时间复杂度太高</strong>，因此应该考虑其他能够<strong>复杂度更低但是又能够遍历一个完整数组的方式：二路归并排序</strong>。</li></ul></li><li><p>二路归并排序会先将左边的排好序，再将右边的排好序，然后利用<code>merge</code>函数将左右两边的子数组合并，注意：<strong>我们在合并的时候其实就已经对两个子数组遍历了</strong>。等到<strong>归并排序结束，我们就能够遍历整个数组</strong>。</p></li><li><p><strong>二路归并排序时间复杂度是<code>nlogn</code>，其中<code>logn</code>代表<code>merge</code>函数对左右子数组合并的次数，n代表每次合并操作的复杂度。因此我们可以理解为<code>merge</code>函数的时间复杂度为<code>O(n)</code>，我们会调用<code>logn</code>次<code>merge</code>函数</strong>。</p><ul><li>意思就是：<strong>merge函数里面遍历两个子数组将它们合并的复杂度是<code>O(n)</code>，此时如果我们在merge函数中进行我们自己需要的遍历，保证我们新增的遍历操作时间复杂度不超过<code>O(n)</code>，这样加上原本的合并操作，时间复杂度最多也是<code>O(2n)</code>，忽略常数后时间复杂度不变</strong>。</li></ul></li><li><p>因此可以得出结论：<strong>我们可以利用归并排序中<code>merge</code>函数仅调用<code>logn</code>次就能遍历整个数组的特点，在merge函数组增加一个时间复杂度为<code>O(n)</code>的遍历操作，这样就能够避免嵌套for循环的<code>n²</code>时间复杂度</strong>。</p></li><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] temp;<span class="comment">//临时数组，用来在merge函数中辅助合并两个子数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//统计翻转对数量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//为临时数组初始化，长度和给定数组一样，我们不用每次merge的时候都根据当前需要</span></span><br><span class="line">        <span class="comment">//合并的两个子数组长度初始化temp，只需要在temp中对应区域覆盖上新的数据，</span></span><br><span class="line">        <span class="comment">//然后仅操作这段区域即可</span></span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//这里不能(right+left)/2，因为可能为导致溢出</span></span><br><span class="line">        sort(nums, left, mid);</span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(nums, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在temp数组中指定区域覆盖上新数据</span></span><br><span class="line">        System.arraycopy(nums, left, temp, left, right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//下面是关键：从end开始找翻转对，end是右子数组开始位置</span></span><br><span class="line">        <span class="keyword">int</span> end = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历左子数组，和end所在右子数组比较是否构成翻转对，此时我们应该利用归并排序特性：</span></span><br><span class="line">        <span class="comment">//左子数组和右子数组都是已经排好序的，因此在左子数组中靠左的位置如果和end构成了翻转对，</span></span><br><span class="line">        <span class="comment">//那么左子数组中这个位置之后的肯定都和end构成翻转对。因此我们不需要将左子数组的每个</span></span><br><span class="line">        <span class="comment">//元素都在右子数组中从头开始比较，只需要从右子数组中上一轮比较退出的索引开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= mid; i++) &#123;</span><br><span class="line">            <span class="comment">//由于两倍过后可能数字溢出，需要转成Long</span></span><br><span class="line">            <span class="comment">//end从右子数组第一个元素开始，如果这个元素和左子数组的第一个元素构成翻转对，</span></span><br><span class="line">            <span class="comment">//那么翻转对数量为1，相当于此时(end+1)-(mid+1),这个式子代表当前end位置有多少</span></span><br><span class="line">            <span class="comment">//翻转对，如果构成翻转对就让end右移，退出的时候end刚好是上一轮加一的位置，因此退出</span></span><br><span class="line">            <span class="comment">//后翻转对数量为end-(mid+1)</span></span><br><span class="line">            <span class="keyword">while</span> (end &lt; right + <span class="number">1</span> &amp;&amp; (<span class="keyword">long</span>) nums[i] &gt; (<span class="keyword">long</span>) nums[end] * <span class="number">2</span>)&#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += end-mid-<span class="number">1</span>;<span class="comment">//依次累加统计翻转对数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计过后对左右数组进行合并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left, m = left, n = mid + <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = temp[n++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == right + <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = temp[m++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[m] &lt; temp[n]) &#123;</span><br><span class="line">                nums[i] = temp[m++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i] = temp[n++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220330224627888.png&quot; alt=&quot;image-20220330224627888&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们要找出下标更小的数大于某一个下标更大的数的两倍，就构成一个翻转对。&lt;strong&gt;题目中并不要求我们返回构成翻转对的是哪两个数，只需要返回有几个翻转对，因此只需要遍历数组然后在遍历的时候进行统计即可&lt;/strong&gt;。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode239:滑动窗口最大值</title>
    <link href="http://example.com/2022/03/27/LeetCode239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://example.com/2022/03/27/LeetCode239%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-03-27T11:59:34.000Z</published>
    <updated>2022-03-28T11:43:18.348Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如题：</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220326215415410.png" alt="image-20220326215415410"></li></ul></li><li><p>思路：使用<strong>单调队列</strong>，即<strong>先构建初始窗口，大小为K</strong>，将前面K个元素依次加入队列中，加入的时候需要保证<strong>队头元素是最大</strong>的，由于队列先进先出，这样可以保证<code>poll()</code>弹出的元素是最大的。<span id="more"></span></p><ul><li>这样保证队列中队头元素最大：<strong>每次加入的时候</strong>和当前<strong>队尾</strong>元素比较(因此应该使用双端队列，可以操作队头和队尾)，<strong>如果队列非空就拿队尾和当前元素比较，如果当前元素更大，就删除这个队尾元素，因为它不可能是最大值了</strong>。<strong>然后直到找到大于等于当前元素的新队尾，将当前元素插入到这个元素之后</strong>。<strong>具体细节在代码中注释标明</strong>！！</li></ul></li><li><p>解法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// res数组记录每一轮窗口最大值，大小为K的窗口总共有num.lenth-k+1轮，</span></span><br><span class="line">        <span class="comment">// 即数组长度为num.lenth-k+1</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        LinkedList&lt;Integer&gt; monotonicQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;<span class="comment">//将前面k个元素形成窗口，之后就只需拿新加入的元素和窗口内的比较</span></span><br><span class="line">            <span class="keyword">while</span> (!monotonicQueue.isEmpty() &amp;&amp; monotonicQueue.getLast() &lt; nums[i])&#123;</span><br><span class="line">                <span class="comment">/*如果队列非空就拿队列最后一个和当前元素比较，如果当前元素更大，就删除这个队尾元素，因为它不可能是最大值了。</span></span><br><span class="line"><span class="comment">                 但是注意：如果相同则不应该删除，因为每一轮 窗口右移 后都应该删除上一最左边的元素，</span></span><br><span class="line"><span class="comment">                 如果上一轮最左边的不是最大值，那么它就不会在队列里(上述规则说明了，在它后面的元素如果比他大会将它压出队列)，</span></span><br><span class="line"><span class="comment">                 这种情况就不用删除。如果它是最大值，那么它就会在队头位置，所以我们窗口右移删除的时候只需要判断：</span></span><br><span class="line"><span class="comment">                 窗口最左边的元素 和 队列中的队头元素是否相等，如果相等则说明窗口最左边元素在队列中，</span></span><br><span class="line"><span class="comment">                 且是最大值，应该删除，否则该元素不在队列中，不用删除。</span></span><br><span class="line"><span class="comment">                 此时如果新加入的元素和它相等，那么如果你在刚刚比较的时候将&lt;=新元素的都删除的话，</span></span><br><span class="line"><span class="comment">                 那么这个队头元素就在此时被删除，而之后我们将窗口右移的时候判断最左边元素与队头元素是否相等，</span></span><br><span class="line"><span class="comment">                 此时结果便是true，我们会将队头元素删除，但是这个队头元素实则是新加入的，造成误删！！！！*/</span></span><br><span class="line">                monotonicQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            monotonicQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第k+1个位置即索引为k的位置和前面k个元素形成的窗口依次比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res[i-k] = monotonicQueue.peek();<span class="comment">//每一轮比较前将上一轮最大的元素记录</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i-k] == monotonicQueue.peek())&#123;</span><br><span class="line">                <span class="comment">/*删除上一轮最左边的元素，因为窗口右移了</span></span><br><span class="line"><span class="comment">                 关键：这里只和队首元素比较，即最大元素，因为上一轮最左边的元素如果不是最大值，</span></span><br><span class="line"><span class="comment">                 则代表后面几位有比它更大的，而比它更大的元素在入队前会检查队尾元素是否比自己小，</span></span><br><span class="line"><span class="comment">                 如果比自己小则将这个元素删除，因为我们要返回的是最大值。</span></span><br><span class="line"><span class="comment">                 因此如果上一轮最左边的元素不是上一轮窗口的最大值，则肯定已经被移出了队列*/</span></span><br><span class="line">                monotonicQueue.remove();<span class="comment">//如果它是最大值则移出队列</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!monotonicQueue.isEmpty() &amp;&amp; monotonicQueue.getLast() &lt; nums[i])&#123;</span><br><span class="line">                monotonicQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            monotonicQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res[nums.length - k] = monotonicQueue.peek();</span><br><span class="line">        <span class="comment">//之前循环到nums.length-1后就结束了，res中的最后一个元素位置是nums.length-k，而不是</span></span><br><span class="line">        <span class="comment">// nums.lenth - 1 - k，因此应该补上</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220326215415410.png&quot; alt=&quot;image-20220326215415410&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;思路：使用&lt;strong&gt;单调队列&lt;/strong&gt;，即&lt;strong&gt;先构建初始窗口，大小为K&lt;/strong&gt;，将前面K个元素依次加入队列中，加入的时候需要保证&lt;strong&gt;队头元素是最大&lt;/strong&gt;的，由于队列先进先出，这样可以保证&lt;code&gt;poll()&lt;/code&gt;弹出的元素是最大的。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode503：下一个更大元素</title>
    <link href="http://example.com/2022/03/22/LeetCode503%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2022/03/22/LeetCode503%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/</id>
    <published>2022-03-22T10:51:49.000Z</published>
    <updated>2022-03-28T11:43:07.057Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>题目如下</strong>：</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220322165023100.png" alt="image-20220322165023100"></li></ul></li><li><p>分析：该题可以用<strong>单调栈</strong>来完成，<strong>单调栈就是一种通过特殊操作使栈中元素有序的栈</strong>。<span id="more"></span></p></li><li><p><strong>单调栈可以这样实现：从给定的数组从后往前推，每次检查当前元素和栈顶元素的大小(栈空不检查)，如果当前元素比栈顶元素大，就让栈顶元素出栈，最后碰到栈顶元素比当前元素大，就让当前元素入栈，这样可以保证栈里的顺序是从小到大的</strong>。</p></li><li><p>使用单调栈我们解决此题：<strong>我们从数组最后一个开始比较，此时栈空，将此元素的答案标记为-1，压入栈中。然后将栈顶元素(此时就是最后一个元素)和倒数第二个元素比较，如果倒数第二个元素更大，就将栈顶元素出栈，出栈后此时栈已空，将倒数第二个压入栈中</strong>。</p><ul><li><strong>因为我们要找的是某一个元素后面比它大的第一个元素，那么我们肯定会先和倒数第二个比较完了才和最后一个比较，如果倒数第二个满足要求，即比当前元素更大，那么最后一个元素则不会进行比较；而如果倒数第二个不满足要求，即比当前元素更小，那么比倒数第二个元素更小的最后一个元素肯定也不满足要求，也没有比较的必要，因此如果倒数第二个比最后一个大，则将最后一个元素出栈，此后不需要进行比较</strong>。</li><li>以此类推。</li></ul></li><li><p>此题还有一个特别：如果后面没有找到更大的，就会从头开始找。此时<strong>我们可以将数组扩大成原来的两倍，元素不变，从这个新的数组从尾部<code>(2*n-1)</code>开始比较</strong>。</p><ul><li>例如<code>&#123;1,2,4,3,1&#125;</code>-&gt;<code>&#123;1,2,4,3,1,1,2,4,3,1&#125;</code>。这样从未到头进行刚刚的操作，最终就相当于循环比较。</li><li>我们可以使用<strong>循环数组</strong>的方法<strong>抽象成原来数组扩容</strong>了：从<code>(2*n-1)%n</code>一直往前比较。</li></ul></li><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElements(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里使用LinkedList当做栈来使用，LinkedList可以用来模拟栈，也可以用来模拟队</span></span><br><span class="line">        <span class="comment">//列。LinkedList中有两个添加元素的方法，add()和push()，add在尾部添加元素，</span></span><br><span class="line">        <span class="comment">//push在头部添加元素，pop从头部弹出元素，配合使用模拟栈和队列。</span></span><br><span class="line">        <span class="comment">//也可以直接使用Stack当做栈，但是操作起来速度慢一些</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * (n) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % n] &gt;= stack.peek()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i % n] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            <span class="comment">//如果栈空相当于此时元素比之后的都大，返回-1</span></span><br><span class="line">            stack.push(nums[i % n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;题目如下&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220322165023100.png&quot; alt=&quot;image-20220322165023100&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分析：该题可以用&lt;strong&gt;单调栈&lt;/strong&gt;来完成，&lt;strong&gt;单调栈就是一种通过特殊操作使栈中元素有序的栈&lt;/strong&gt;。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode23:合并多个有序链表</title>
    <link href="http://example.com/2022/03/20/LeetCode23%E5%A4%9A%E8%A1%A8%E5%90%88%E5%B9%B6/"/>
    <id>http://example.com/2022/03/20/LeetCode23%E5%A4%9A%E8%A1%A8%E5%90%88%E5%B9%B6/</id>
    <published>2022-03-20T09:26:03.000Z</published>
    <updated>2022-03-20T09:28:22.994Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>使用优先权队列<code>PriorityQueue</code>，将所有链表的头结点加入，每次<code>poll</code>弹出最小的，然后再加入这个节点的下一个，以此类推，能将所有链表有序合并</strong>。<span id="more"></span></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode mergeKLists(ListNode[] lists) &#123;</span><br><span class="line">        if(lists.length == 0)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;ListNode&gt; listNodes = new PriorityQueue&lt;&gt;(</span><br><span class="line">            lists.length , (o1,o2) -&gt; o1.val - o2.val</span><br><span class="line">        );/*传入链表程度和比较器，o1.val - o2.val 小于0表示o1更小，属于升序排列，这是</span><br><span class="line">          lambda表达式，效果和使用匿名类一样*/</span><br><span class="line">        for (ListNode listNode : lists) &#123;</span><br><span class="line">            if (listNode != null) &#123;</span><br><span class="line">                listNodes.add(listNode);</span><br><span class="line">                /*只加入头结点而不是全部加入，poll其中一个的时候就加入这个头结点的next，这样</span><br><span class="line">                  这个优先权队列始终只有K各节点，可以保证调整队列的复杂度是logk,n个结点全部</span><br><span class="line">                  加入和弹出总的时间复杂度你nlogk，如果一次性全部加入，每次调整优先级的复杂度</span><br><span class="line">                  是logn，总的时间复杂度是nlogn</span><br><span class="line">                */</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = new ListNode(-1);</span><br><span class="line">        ListNode virtualHeadNode = res;</span><br><span class="line">        while (!listNodes.isEmpty())&#123;</span><br><span class="line">            virtualHeadNode.next = listNodes.poll();</span><br><span class="line">            virtualHeadNode = virtualHeadNode.next;</span><br><span class="line">            if(virtualHeadNode.next != null) &#123;</span><br><span class="line">                listNodes.add(virtualHeadNode.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        virtualHeadNode.next = null;</span><br><span class="line">        /*只加头结点进入优先权队列可以不要这句，但是如果全部加入，可能会有多个相同的值，他们之间的相对</span><br><span class="line">          位置不一定和原来一样，可能最后一个原来是第一个，这样它的next就是下一个而不是null，这里就会</span><br><span class="line">          形成环。</span><br><span class="line">        */</span><br><span class="line">        return res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：<strong>合并多个有序链表</strong>：<strong>使用优先权队列</strong>。队列里只存放头结点，取出一个头结点再加入下一个，避免有序结点相对顺序变化后最后形成环的问题，且时间复杂度<code>nlogk</code>，k为头结点数，即链表数；如果全部加入则<code>nlogn</code>，且需要将最后加入的结点的<code>next=null</code>，避免出现环。</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用优先权队列&lt;code&gt;PriorityQueue&lt;/code&gt;，将所有链表的头结点加入，每次&lt;code&gt;poll&lt;/code&gt;弹出最小的，然后再加入这个节点的下一个，以此类推，能将所有链表有序合并&lt;/strong&gt;。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>关于正则表达式`*`为什么会在行尾匹配出一个空串</title>
    <link href="http://example.com/2022/03/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%9F%E5%8F%B7%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <id>http://example.com/2022/03/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%9F%E5%8F%B7%E9%99%90%E5%AE%9A%E7%AC%A6/</id>
    <published>2022-03-18T12:23:31.000Z</published>
    <updated>2022-03-20T09:30:30.711Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>*</code>代表<strong>匹配0个或者多个</strong>，例如<code>5*</code>表示匹配0个或者多个5，在<strong>匹配的时候系统会每个字符依次匹配</strong>，即调用<code>.find()</code>过后返回到<code>groups</code>数组中的位置是<strong>从第一个字符开始找</strong>5，<strong>如果第一个字符不是5就相当于找到了0个5，此时<code>groups</code>数组中索引的第一二个是(0,0)<strong>，</strong>意思是从0到0的位置有0个5，这个时候用字符串找子串的方式<code>return</code>这个范围的子串给我们，即此时我们得到了一个<code>&quot;&quot;</code>空串，此时第一次匹配结束，之后以此类推</strong>。<span id="more"></span></p><ul><li>**用<code>5\*</code>匹配字符串<code>&quot;a555fds651&quot;</code>**：<ul><li>**第一次<code>find()</code>找到0个5开始于0结束于0，返回<code>&quot;&quot;</code>**；</li><li>**第二次<code>find()</code>找到3个5开始于1结束于4，返回<code>555</code>**；</li><li>**最后匹配来到了1，同样返回<code>&quot;&quot;</code>，但是还没有结束，还会在最后返回一个<code>&quot;&quot;</code>**。</li></ul></li></ul></li><li><p><strong>在使用正则表达式<code>.find()</code>匹配的时候</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public boolean find() &#123;</span><br><span class="line">    int nextSearchIndex = last;//将下一个搜索位置移到last，last表示上次搜索位置的结束位置，因为搜索子串是左闭右开区间，因此这个最右的字符头一次没有匹配到，这次从这开始</span><br><span class="line">    if (nextSearchIndex == first)//如果下一次搜索的开始位置等于上一个子串开始位置first，则往后移一位，只有last=first即搜到空子串才回这样</span><br><span class="line">        nextSearchIndex++;</span><br><span class="line"></span><br><span class="line">    //下面的from和to代表父串的开始和结束位置，即(0,length)</span><br><span class="line">    // If next search starts before region, start it at region</span><br><span class="line">    if (nextSearchIndex &lt; from)//下一个搜索位置小于0则移到0</span><br><span class="line">        nextSearchIndex = from;</span><br><span class="line"></span><br><span class="line">    // If next search starts beyond region then it fails</span><br><span class="line">    if (nextSearchIndex &gt; to) &#123;</span><br><span class="line">        //！！！！这句就是出现问题的关键！！！！！！！！这里的to表示父串长度，这里判断大于搜索位置大于父串长度才会结束搜索，但是我们知道字符串索引是从0开始的，因此不需要大于这个长度，只要等于这个长度其实就搜不到了。</span><br><span class="line">        //因此我们nextSerchIndex=to即搜索索引是父串长度的位置的时候仍然会继续以to位置为开始索引开始搜索</span><br><span class="line">        for (int i = 0; i &lt; groups.length; i++)</span><br><span class="line">            groups[i] = -1;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return search(nextSearchIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>以to(父串length，由于索引从0开始，实际没这个位置的字符)位置为开始索引开始搜索的时候*自然搜不到我们要的，此时则代表从to到to找到了0个子串，然后根据子串搜索源码可以知道，即使子串开始索引等于length长度，仍然不会报索引越界的错误，因为开始索引只要不小于0就行。如果开始和结束位置都是length，子串长度为0，返回<code>&quot;&quot;</code>空串</strong>。</p><ul><li><p><strong>java中<code>substring()</code>源码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex) &#123;//代表子串开始位置和结束位置</span><br><span class="line">    if (beginIndex &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    if (endIndex &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    int subLen = endIndex - beginIndex;</span><br><span class="line">    if (subLen &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this</span><br><span class="line">        : new String(value, beginIndex, subLen);</span><br><span class="line">&#125;//this代表要找的父字符串</span><br></pre></td></tr></table></figure><ul><li><strong>可以看到<code>sbustring()</code>会先判断输入的子串索引是否合法，即是否在0到父串长度之间，然后计算要得到的自传长度<code>int subLen = endIndex - beginIndex</code>,如果这个长度不小于0，就进行最后的返回值，即如果<code>(beginIndex == 0) &amp;&amp; (endIndex == value.length)</code>成立，即要找的子串就是父串本身，则返回父串，否则<code>new String(value, beginIndex, subLen)</code>，代表new一个新串，从父串的<code>beginIndex</code>位置开始加入<code>sunLen</code>个字符</strong>。</li><li><strong>这也能看出为什么返回子串是左闭右开区间，因为返回子串的时候是从开始位置放入搜索区间长度个字符，例如1-3只返回从1开始2个字符，因此取的是1和2,3总是取不到的</strong>。</li></ul></li></ul></li></ul></li><li><p><strong>因此*在匹配字符串的时候最后总是会匹配到一个<code>&quot;&quot;</code>空串</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;代表&lt;strong&gt;匹配0个或者多个&lt;/strong&gt;，例如&lt;code&gt;5*&lt;/code&gt;表示匹配0个或者多个5，在&lt;strong&gt;匹配的时候系统会每个字符依次匹配&lt;/strong&gt;，即调用&lt;code&gt;.find()&lt;/code&gt;过后返回到&lt;code&gt;groups&lt;/code&gt;数组中的位置是&lt;strong&gt;从第一个字符开始找&lt;/strong&gt;5，&lt;strong&gt;如果第一个字符不是5就相当于找到了0个5，此时&lt;code&gt;groups&lt;/code&gt;数组中索引的第一二个是(0,0)&lt;strong&gt;，&lt;/strong&gt;意思是从0到0的位置有0个5，这个时候用字符串找子串的方式&lt;code&gt;return&lt;/code&gt;这个范围的子串给我们，即此时我们得到了一个&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;空串，此时第一次匹配结束，之后以此类推&lt;/strong&gt;。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单个字符的字符串长度可能为2</title>
    <link href="http://example.com/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/"/>
    <id>http://example.com/2022/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/</id>
    <published>2022-03-16T08:10:09.000Z</published>
    <updated>2022-03-20T09:30:00.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么单个字符的字符串长度为2？"><a href="#为什么单个字符的字符串长度为2？" class="headerlink" title="为什么单个字符的字符串长度为2？"></a>为什么单个字符的字符串长度为2？</h1><ul><li><p><strong>我们知道字符串的<code>.length()</code>方法会返回字符串的长度，但以下有的字符串只有一个字符，<code>.length()</code>返回的长度却是2，例如</strong>:<span id="more"></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;𝄞&quot;;</span><br><span class="line">System.out.println(str.length());</span><br></pre></td></tr></table></figure><p><strong>输出结果如下</strong>：<img src="https://img-blog.csdnimg.cn/ac2837f14073475d9f617cf33892acf7.png" alt="img"></p></li><li><p><strong>这是因为<code>length</code>方法返回的是采用utf-16编码表示的给定字符串所需要的代码单元数量（<a href="https://blog.csdn.net/w55935/article/details/123500133?spm=1001.2014.3001.5502">代码单元不懂的可以看这里</a>），大多数常用字符仅用一个代码单元就可以表示，但有些却需要一对代码单元表示</strong>。</p></li><li><p><strong>想要知道字符串的实际长度，即<code>Unicode</code>代码点的数量（一个字符对应一个代码点，代码点用16进制编写，并且在前面加上U+，例如<code>U+0041</code>就是字母A的代码点），可以采用如下方法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;𝄞&quot;;</span><br><span class="line">int count = str.codePointCount(0, str.length());</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><p><strong>此时输出</strong>：<img src="https://img-blog.csdnimg.cn/3c7f254a7f4749d2bb2cfec9de2cf0af.png" alt="img"></p></li><li><p><strong>额外需要知道：字符串的<code>.charAt(n)</code>方法返回的是处于位置n的代码单元，而不是字符，所以如果对于这样两个代码单元的字符调用<code>.char()</code>得不到我们想要的字符</strong>：</p></li><li><pre><code>String str = &quot;𝄞&quot;;char c = str.charAt(0);System.out.println(c);</code></pre><p><strong>此时输出</strong>：<img src="https://img-blog.csdnimg.cn/ab999f3ad6484f4fb2481914fc2aee96.png" alt="img"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么单个字符的字符串长度为2？&quot;&gt;&lt;a href=&quot;#为什么单个字符的字符串长度为2？&quot; class=&quot;headerlink&quot; title=&quot;为什么单个字符的字符串长度为2？&quot;&gt;&lt;/a&gt;为什么单个字符的字符串长度为2？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;我们知道字符串的&lt;code&gt;.length()&lt;/code&gt;方法会返回字符串的长度，但以下有的字符串只有一个字符，&lt;code&gt;.length()&lt;/code&gt;返回的长度却是2，例如&lt;/strong&gt;:</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java中char为什么无法表示全部字符</title>
    <link href="http://example.com/2022/03/15/char%E6%97%A0%E6%B3%95%E8%A1%A8%E7%A4%BA%E5%85%A8%E9%83%A8%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2022/03/15/char%E6%97%A0%E6%B3%95%E8%A1%A8%E7%A4%BA%E5%85%A8%E9%83%A8%E5%AD%97%E7%AC%A6/</id>
    <published>2022-03-15T05:15:00.000Z</published>
    <updated>2022-03-20T09:30:46.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么java中有的字符char无法表示"><a href="#为什么java中有的字符char无法表示" class="headerlink" title="为什么java中有的字符char无法表示"></a>为什么java中有的字符char无法表示</h1><ul><li><p><strong>首先要知道Unicode字符集和UTF-8、UTF-16等的区别：Unicode属于一种规则，它规定了什么字符该由哪种数字表示，而UTF-8、UTF-16是实现这种规则的，它们分别用不同的法式在计算机中存储这个数字</strong>。<span id="more"></span></p></li><li><p><strong>而java语言内部使用的就是UTF-16编码，这种编码方式以代码单元为单位对字符进行存储，UTF-16中一个代码单元占16位，也就是两个字节，由于两个字节并不能表示所有字符，它用1-2个代码单元表示字符</strong>。</p><ul><li><strong>首先要知道Unicode不止2^16个字符</strong>。</li><li><strong>一个代码单元两字节最多表示65536个字符，在这个范围之内的字符一个代码单元就能表示，即两字节表示</strong>；</li><li><strong>而超过这个范围之外的字符则需要两个代码单元存储，也就是四个字节</strong>。</li></ul></li><li><p><strong>由于一个<code>char</code>只有两个字节，那么在字符需要四字节才能表示的时候<code>char</code>类型就无法表示了</strong>。</p></li></ul><h2 id="关于Unicode"><a href="#关于Unicode" class="headerlink" title="关于Unicode"></a>关于Unicode</h2><ul><li><p><strong>Unicode有17个平面，每个平面最多能表示两个字节65536个字符。</strong> </p></li><li><p><strong>Unicode字符集的范围：<code>0x0000~0x10FFFF</code><strong>：</strong>16进制表示，前两位代表平面（0~0x10,刚好17个平面），后四位代表平面内表达的字符数（4个16进制数，最多655366个字符）。</strong></p></li><li><p><strong>在只需要用到第0个平面字符的时候范围是<code>0x0000~0xFFFF</code>，不需要表示平面号，一个字节就能存储，我们平时大多数都是这样</strong>。</p></li><li><p><strong>在字符超出第0个平面表示范围的时候，需要存储平面号，一个字节有8位，17个平面的17用二进制是0-10000，只需要五位，因此一个字节就能表示平面号，如果超出第0个平面表示范围，只需要总共三个字节就可以表示所有Unicode字符，但是utf-16两字节一单元，所以需要四个字节表示</strong>。</p></li><li><p>而java在<strong>最初</strong>采用Unicode字符集的时候<strong>Unicode字符还没有超过65536个</strong>，后来加入大量中文等文字才超过，此时一个<code>char</code>的16位就不能表示所有字符了。</p></li><li><p>例如：<code>𝄞</code>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么java中有的字符char无法表示&quot;&gt;&lt;a href=&quot;#为什么java中有的字符char无法表示&quot; class=&quot;headerlink&quot; title=&quot;为什么java中有的字符char无法表示&quot;&gt;&lt;/a&gt;为什么java中有的字符char无法表示&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;首先要知道Unicode字符集和UTF-8、UTF-16等的区别：Unicode属于一种规则，它规定了什么字符该由哪种数字表示，而UTF-8、UTF-16是实现这种规则的，它们分别用不同的法式在计算机中存储这个数字&lt;/strong&gt;。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库中的自增长问题</title>
    <link href="http://example.com/2022/03/14/MySQL%E8%87%AA%E5%A2%9E%E9%95%BF/"/>
    <id>http://example.com/2022/03/14/MySQL%E8%87%AA%E5%A2%9E%E9%95%BF/</id>
    <published>2022-03-14T09:08:17.000Z</published>
    <updated>2022-03-20T09:31:57.028Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>自动增长的时候如果有其他列是也是唯一的(主键、唯一键都行)，但是添加元素的时候重复添加导致失败，也会导致+1，下一次成功添加的时候就比之前+2了，这样每失败一次都会+1</strong>。<span id="more"></span></p><ul><li><p><strong>例如</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t15(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    num INT UNIQUE);</span><br><span class="line">INSERT INTO t15 VALUES(NULL,1);</span><br><span class="line">INSERT INTO t15 VALUES(NULL,2);</span><br><span class="line">INSERT INTO t15 VALUES(NULL,3);</span><br><span class="line">SELECT * FROM t15;</span><br><span class="line">-- 这里查看表表里有(1,1),(2,2),(3,3)</span><br><span class="line">-- 再次插入(null,3)</span><br><span class="line">INSERT INTO t15 VALUES(NULL,3);</span><br><span class="line">-- 由于num参数是unique，因此插入失败，此时插入(null,4)</span><br><span class="line">INSERT INTO t15 VALUES(NULL,4);</span><br><span class="line">SELECT * FROM t15;</span><br><span class="line">-- 查看表，发现此时插入的不是(4,4)而是(5,4)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>自增长底层是找到当前字段中最大的然后+1，如果指定插入了一个比现在增长到的值更大的数，下次自增长从这里开始</strong>。</p><ul><li><p><strong>但是这个自增长的值只会变大不会变小，即如果现在最大的是4，你插入的时候指定7，那么下一次自增长从7开始，但是如果这个时候你把234全部删除了，只剩下1，自增长还是从4开始</strong>。</p><ul><li><p><strong>下列语句删除1，2之后自动插入，查看表可以发现插入的仍然是3</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t14(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT);</span><br><span class="line">INSERT INTO t14 VALUES(NULL);</span><br><span class="line">INSERT INTO t14 VALUES(NULL);</span><br><span class="line">DELETE FROM t14 WHERE id = 1;</span><br><span class="line">DELETE FROM t14 WHERE id = 2;</span><br><span class="line">INSERT INTO t14 VALUES(NULL);</span><br><span class="line">SELECT * FROM t14;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>如果是<code>update</code>修改了已经插入的值，不会有影响</strong>。</p></li><li><p><strong>但是之前说了，如果是因为重复导致的添加失败，仍会+1，但是不会插入，下次插入就加了2，如果使用<code>update</code>修改一个值例如2改成5，当自增到4的时候再次调用，就会失败，因为5重复了，下一次再调用就会插入6</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t13(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT);</span><br><span class="line">INSERT INTO t13 VALUES(NULL);</span><br><span class="line">INSERT INTO t13 VALUES(NULL);</span><br><span class="line">INSERT INTO t13 VALUES(NULL);</span><br><span class="line">UPDATE t13 SET id = 5 WHERE id = 2;</span><br><span class="line">INSERT INTO t13 VALUES(NULL);</span><br></pre></td></tr></table></figure><ul><li><p><strong>此时查看发现列表</strong>：<img src="https://img-blog.csdnimg.cn/4139c6655f494bd793afcbf3a9c872b2.png" alt="img"></p><p><strong>此时自增长到了4，如果再次插入，则会因为5重复而失败</strong>。</p></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;自动增长的时候如果有其他列是也是唯一的(主键、唯一键都行)，但是添加元素的时候重复添加导致失败，也会导致+1，下一次成功添加的时候就比之前+2了，这样每失败一次都会+1&lt;/strong&gt;。</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>在IDEA中使用apache-dbutils查询返回对象时封装属性的问题</title>
    <link href="http://example.com/2022/03/13/apache-dbutils%E5%B0%81%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/03/13/apache-dbutils%E5%B0%81%E8%A3%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-13T13:15:25.000Z</published>
    <updated>2022-03-20T09:32:14.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="此处是操作MySQL数据库"><a href="#此处是操作MySQL数据库" class="headerlink" title="此处是操作MySQL数据库"></a>此处是操作MySQL数据库</h2><ul><li><p><strong>在使用<code>apache-dbutils</code>的时候，查询过程中如果创建的javabean对象里的属性比查询到的字段多，则此时创建的对象属性值是<code>null</code>，引用类型的属性默认<code>null</code> 。</strong></p><ul><li><strong>创建测试表和测试类</strong>：<span id="more"></span></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建一个测试表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test0(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test0 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test0 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test0 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个多一个属性 pwd 的javabean类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test0</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test0&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>测试方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    Connection connection= <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//这里是使用的一个自己创建的管理数据库连接关闭的工具类</span></span><br><span class="line">        </span><br><span class="line">        List&lt;test0&gt; query = qr.query(connection, <span class="string">&quot;select * from test0&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;test0&gt;(test0.class));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (test0 t : query)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(throwables);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCUtilsByDruid.closeConnection(<span class="keyword">null</span>,<span class="keyword">null</span>,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：<img src="https://img-blog.csdnimg.cn/62ac59dfab8041979d1ca6fc37b56492.png"></p><p><strong>可以看到如果创建的<code>javabean</code>对象中比表中的字段多，并不会报错，此时值为<code>null</code>(因为在类中属性都有默认值，引用类型对应的是<code>null</code>)</strong></p></li></ul></li><li><p><strong>如果创建的javabean类里面的属性名和需要查询的表里的字段名不相同，则无法赋值成功，会是Null。因为底层是通过我们给出的Class对象通过反射找到和表中字段对应的属性，利用<code>setXX()</code>方法给它赋值，找不到这个对应的属性则无法复制，而属性是有默认值的，引用类型默认是Null</strong>。</p><ul><li><p>例如在创建表的时候将<code>name</code>换成<code>name0</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test0(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME0 <span class="type">VARCHAR</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><strong>此时运行结果为</strong>：<img src="https://img-blog.csdnimg.cn/021c09be1a86429bb7428b6474f966a7.png"></p></li></ul></li><li><p><strong>如果在多表查询的时候有表中有相同名字的字段，此时应该在查询的时候使用<code>AS</code>给属性别名</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;此处是操作MySQL数据库&quot;&gt;&lt;a href=&quot;#此处是操作MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;此处是操作MySQL数据库&quot;&gt;&lt;/a&gt;此处是操作MySQL数据库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;在使用&lt;code&gt;apache-dbutils&lt;/code&gt;的时候，查询过程中如果创建的javabean对象里的属性比查询到的字段多，则此时创建的对象属性值是&lt;code&gt;null&lt;/code&gt;，引用类型的属性默认&lt;code&gt;null&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建测试表和测试类&lt;/strong&gt;：</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
