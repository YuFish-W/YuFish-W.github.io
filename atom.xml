<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酒书茶社</title>
  
  <subtitle>人是生而自由的，却无往不在枷锁之中。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-31T01:35:01.225Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YuFish-W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal必须知道的</title>
    <link href="http://example.com/2023/03/28/TreadLocal/"/>
    <id>http://example.com/2023/03/28/TreadLocal/</id>
    <published>2023-03-28T04:34:01.000Z</published>
    <updated>2023-03-31T01:35:01.225Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>ThreadLocal</code>是用自己作为<code>key</code>，不是线程作为<code>key</code>，线程类有一个类型为<code>ThreadLocalMap</code>的属性，每个线程包含了独有的<code>ThreadLocalMap</code>然后用<code>ThreadLocal</code>为<code>key</code>去获取<code>value</code>，线程之间能隔离获取就是因为<code>ThreadLocalMap</code>是隔离的，每个线程有独立的<code>ThreadLocalMap</code><span id="more"></span> </p><ul><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303280931768.png" alt="image-20230328093151675"></p></li><li><p><code>ThreadLocal</code>有一个内部类<code>ThreadLocalMap</code>,<code>ThreadLocalMap</code>有一个内部类<code>Entry</code>，这<code>Entry</code>相当于键值对，里面的键值对是<code>&lt;ThreadLocal k,Object v&gt;</code></p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303280927376.png" alt="image-20230328092710288"></p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303280927188.png" alt="image-20230328092721104"></p></li><li><p><code>ThreadLocalMap</code>里面有一个**<code>Entry</code>数组<strong>，<code>threadlocal.set(value)</code>的时候会</strong>用当前的<code>ThreadLocal</code>对象作为key<strong>计算哈希值，</strong>和数组长度取余得到一个数组下标i，然后构建Entry对象存入i位置**</p><ul><li>```java<br>tab[i] = new Entry(key, value);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    + **先不考虑哈希碰撞，下面说**</span><br><span class="line"></span><br><span class="line">+ 每次用`threadlcoal.get()`的时候先获取当前线程的这个`ThreadLocalMap`，然后**用当前的`ThreadLocal`对象作为key计算在Entry数组中取出Entry对象e**，然后`e.value`获取值 </span><br><span class="line"></span><br><span class="line">  + 由于`Entry`这个键值对中的`key`是弱引用，垃圾回收会回收`key`，但是`Entry`对象还在，`value`值也在，`key`没了，**&lt;font color=&#x27;blue&#x27;&gt;也就是说此时即使`key`被垃圾回收了但是`Entry`和`value`还在&lt;/font&gt;**，**此时如果能得到这个`Entry`对象，就仍然可以得到它的`value`**  </span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    public class Test &#123;</span><br><span class="line">        public static void main(String[] args) throws Exception &#123;</span><br><span class="line">            Thread thread = Thread.currentThread();</span><br><span class="line">            //得到线程私有的属性threadLocals，它是ThreadLocal.ThreadLocalMap对象</span><br><span class="line">            Field field = thread.getClass().getDeclaredField(&quot;threadLocals&quot;);</span><br><span class="line">            field.setAccessible(true);//由于不是public属性，爆破</span><br><span class="line">            //这里不能用ThreadLocal.ThreadLocalMap指向，因为ThreadLocalMap不是public得不到</span><br><span class="line">            Object o1 = field.get(thread);</span><br><span class="line">            //得到ThreadLocalMap的table属性，他是一个Entry数组，</span><br><span class="line">            Field table = o1.getClass().getDeclaredField(&quot;table&quot;);</span><br><span class="line">            table.setAccessible(true);</span><br><span class="line">            //得到Entry数组，数组是支持向上转型的</span><br><span class="line">            Object[] o2 = (Object[])table.get(o1);</span><br><span class="line">    </span><br><span class="line">            ThreadLocal&lt;MyObject&gt; local = new ThreadLocal&lt;&gt;();</span><br><span class="line">            local.set(new MyObject());</span><br><span class="line">            //得到ThreadLocal计算的哈希值字段，用于计算数组下标</span><br><span class="line">            Field field1 = local.getClass().getDeclaredField(&quot;threadLocalHashCode&quot;);</span><br><span class="line">            field1.setAccessible(true);</span><br><span class="line">            int hashcode = (int)field1.get(local);</span><br><span class="line">    </span><br><span class="line">            System.out.println(local.get());//输出</span><br><span class="line">    </span><br><span class="line">            //触发垃圾回收</span><br><span class="line">            local = null;</span><br><span class="line">            System.gc();</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">    </span><br><span class="line">            //根据哈希值计算数组下标，得到Entry，然后获取它的value属性</span><br><span class="line">            Object o = o2[hashcode &amp; (o2.length - 1)];</span><br><span class="line">            Field field2 = o.getClass().getDeclaredField(&quot;value&quot;);</span><br><span class="line">            field2.setAccessible(true);</span><br><span class="line">            Object value = field2.get(o);</span><br><span class="line">    </span><br><span class="line">            System.out.println(value);//最后输出</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class MyObject &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;得到该对象&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303281041458.png" alt="image-20230328104101366"></p><ul><li><strong>由此可见即使<code>Entry</code>中的threadlocal用了弱引用，被回收了也还是能得到value</strong> </li></ul></li><li><p><strong><font color='blue'>注意，虽然<code>ThreadLocal</code>对象是弱引用，但是上面触发垃圾回收仍然需要先将<code>local=null</code>，否则无法回收。因为此时<code>Entry</code>中的<code>ThreadLocal</code>虽然是弱引用，但是外面这个传入的<code>ThreadLocal</code>对象是强引用，而且这两个对象是同一个对象，此时不会回收</font></strong>  </p><ul><li><blockquote><p>ps:垃圾回收器判断是否回收一个对象，用的是可达性分析法，从GC ROOT对象出发遍历所有被涉及的对象，没被遍历到的视为不可达，就当垃圾进行回收，如果一个对象仅仅有一个弱引用可达，也会被回收</p><ul><li>此时我们的<code>ThreadLocal</code>对象再栈中有强引用指向，因此即使<code>Entry</code>中是弱引用也不会回收<ul><li>证明：将<code>local=null</code>注掉，断点分析查看Entry数组中的引用是否还在<ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303281050739.png" alt="image-20230328105037664"></li><li><strong>可以看到entry中<code>referent</code>字段仍有<code>threadlocal</code>的引用，不会回收</strong> <ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303281053061.png" alt="image-20230328105312990"></li></ul></li><li><strong>取消注释，发现已经被回收，<code>referent=null</code></strong>  <ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic2/202303281053248.png" alt="image-20230328105347167"></li></ul></li></ul></li></ul></li></ul></blockquote></li></ul></li></ul></li><li><p><strong>那么问题来了，既然有没有<code>ThreadLocal</code>对象都能获取<code>value</code>，那为什么还要存储它，只存<code>value</code>不就行了？</strong></p><ul><li><p><strong>原因是在调用<code>ThreadLocal</code>对象的<code>set()</code>方法的时候，可能发生哈希碰撞</strong> </p><ul><li><p><strong>此时我们需要判断：这个哈希碰撞是同一个<code>ThreadLocal</code>对象产生的还是不同的<code>ThreadLocal</code>对象得到了同样的哈希值</strong></p><ol><li><strong>如果使用一个<code>ThreadLocal</code>对象，就覆盖原先的<code>value</code></strong></li><li><strong>如果是不同的，就用开放定址法解决冲突</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//nextIndex就是返回下一个下标，如果此时是最后一个就返回0，开放定址法</span></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];e != <span class="keyword">null</span>;e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"><span class="comment">//使用一个对象就覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//entry不为空k为空，表示之前的entry弱引用被回收，另外处理</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到空位置</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">    <span class="keyword">int</span> sz = ++size;</span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;是用自己作为&lt;code&gt;key&lt;/code&gt;，不是线程作为&lt;code&gt;key&lt;/code&gt;，线程类有一个类型为&lt;code&gt;ThreadLocalMap&lt;/code&gt;的属性，每个线程包含了独有的&lt;code&gt;ThreadLocalMap&lt;/code&gt;然后用&lt;code&gt;ThreadLocal&lt;/code&gt;为&lt;code&gt;key&lt;/code&gt;去获取&lt;code&gt;value&lt;/code&gt;，线程之间能隔离获取就是因为&lt;code&gt;ThreadLocalMap&lt;/code&gt;是隔离的，每个线程有独立的&lt;code&gt;ThreadLocalMap&lt;/code&gt;</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么取模尽量对质数取</title>
    <link href="http://example.com/2023/03/24/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%96%E6%A8%A1%E5%B0%BD%E9%87%8F%E5%AF%B9%E8%B4%A8%E6%95%B0%E5%8F%96/"/>
    <id>http://example.com/2023/03/24/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%96%E6%A8%A1%E5%B0%BD%E9%87%8F%E5%AF%B9%E8%B4%A8%E6%95%B0%E5%8F%96/</id>
    <published>2023-03-24T04:23:03.000Z</published>
    <updated>2023-03-29T03:49:57.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先说结论：因为对质数取模之后的结果发生碰撞概率更小。</p><ul><li>很多时候为了解决数字超过存储上限问题，我们可以对该数取模然后存储，这就导致不同的数字可能取模后结果一致，也就是发生了碰撞，这时我们就需要对比原数字。<span id="more"></span></li></ul></blockquote><ul><li>首先，在求余数的时候，例如:<code>a%b</code>，我们希望取余后的数有可能是<code>0-(b-1)</code>之间任意的一个数，这样才能最大化取余之后的映射空间，减少碰撞<ul><li><strong><font color='blue'>而如果<code>a</code>,<code>b</code>有公约数<code>c</code>，那么取余后的结果只会是c的倍数：0,c,2c,3c等等，而取不到<code>1-(c-1)</code>，<code>(c+1)-(2c-1)</code>中间的数，大大减少了映射空间</font></strong> </li><li>例如：<code>25%10=5</code>,<code>25%15=10</code>,<code>25%20=5</code>等等</li></ul></li><li>那么这是为何？<ul><li>**我们可以这样理解，我们将a和b都看做是水平x轴上的一个点，<code>a%b</code>就表示我们从b点开始往后跳，每次跳的步长固定是b，一直跳到下一跳后的位置超过a停止，此时<font color='red'>余数就是a减去当前位置</font>**，例如<code>25%15</code>，15每次跳的步长就是15，此时它下一条是30超过了25，因此余数就是当前25-15=10</li><li>而<code>25%15</code>的时候，我们可以将每一跳的步长15看成是：<strong>步长为5每次必须跳3下</strong>，而5同时也是25的因子，因此<strong>25可以看成步长为5跳了5下</strong>，<ul><li><strong>此时5是他们的公共跳跃因子</strong>，也就是说<strong>25一定在5的某一跳上</strong>，而<strong>15每次跳完也只可能是在5的某一跳上</strong> </li><li><strong>那么此时当15的下一跳超过25的时候，他们中间的距离只可能是5的倍数，此时也就大大减少了映射空间</strong> </li></ul></li></ul></li><li>而如果在<code>a%b</code>的时候<strong>b是个质数</strong>，那么a和b之间就<strong>没有公共跳跃因子</strong>，也就不会说他们的位置一定在一个因子的某一跳上，<strong>从而导致<code>a%b</code>结果只可能是该因子的倍数</strong> </li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;先说结论：因为对质数取模之后的结果发生碰撞概率更小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很多时候为了解决数字超过存储上限问题，我们可以对该数取模然后存储，这就导致不同的数字可能取模后结果一致，也就是发生了碰撞，这时我们就需要对比原数字。</summary>
    
    
    
    <category term="tips" scheme="http://example.com/categories/tips/"/>
    
    
  </entry>
  
  <entry>
    <title>分析juc中AQS阻塞唤醒机制</title>
    <link href="http://example.com/2022/11/23/%E5%88%86%E6%9E%90juc%E4%B8%ADAQS%E9%98%BB%E5%A1%9E%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/11/23/%E5%88%86%E6%9E%90juc%E4%B8%ADAQS%E9%98%BB%E5%A1%9E%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6/</id>
    <published>2022-11-23T08:10:01.000Z</published>
    <updated>2023-03-02T04:53:07.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>这里以<code>ReentrantLock</code>为切入点分析<code>AQS</code>实现多个线程上锁以及如何阻塞等待的分析</strong></p><p><code>ReentrantLock</code>中实现公平锁和非公平锁是用两个类实现的：<code>FairSync</code>和<code>NonfairSync</code> </p><p><code>AQS</code>指的是<code>AbstractQueuedSynchronizer</code>，**<code>ReentrantLock</code>里面的抽象静态内部类<code>Sync</code>继承自<code>AQS</code>，而<code>ReentrantLock</code>实现公平锁和非公平锁的两个类则是继承自<code>Sync</code>：**</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103171418397.png" alt="image-20221103171418397"></li></ul></blockquote><h2 id="1-AQS同步队列结构"><a href="#1-AQS同步队列结构" class="headerlink" title="1.AQS同步队列结构"></a>1.AQS同步队列结构</h2><span id="more"></span><ul><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103175056016.png" alt="image-20221103175056016"></p><ul><li><p>这里面的<code>Node</code>是<code>AQS</code>的一个内部类，<strong>每个<code>Node</code>表示一个在同步队列中等待抢锁的线程</strong>，他们一起形成了一个双端队列，每个<code>Node</code>都有<code>prev</code>何<code>next</code>属性指向前后<code>Node</code>：</p><ul><li><p><strong><font color='red'>注意：该队列第一个是虚拟结点，从第二个结点开始才是代表不同的线程</font></strong> </p><ul><li><p><strong>队列为空的时候是这么设置的：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">    tail = head;<span class="comment">//头尾指针都指向虚拟头结点</span></span><br></pre></td></tr></table></figure><ul><li><strong>new一个空结点当头结点，头尾指针都指向虚拟头结点</strong></li><li>头尾指针相同的情况就是此时这样只有一个虚拟头结点，或者队列未初始化，都是null </li></ul></li></ul></li><li><p><strong>即抢锁未成功的线程需要进入该队列阻塞等待</strong> </p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103175333066.png" alt="image-20221103175333066"></p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103175403435.png" alt="image-20221103175403435"></p></li></ul></li></ul></li></ul><h2 id="2-ReentrantLock上锁方法lock"><a href="#2-ReentrantLock上锁方法lock" class="headerlink" title="2.ReentrantLock上锁方法lock()"></a>2.<code>ReentrantLock</code>上锁方法<code>lock()</code></h2><ol><li><p>公平锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接尝试获得，这个1表示让锁状态计数器+1，这个状态是0表示锁没人占用，&gt;0表示有人使用，一般一个线程用lock()方法获得锁让该计数器从0变成1，unlock()一次就-1，变成0就表示锁没人占用。但是ReentrantLock是可重入锁，一个线程如果在释放锁前再次进入，就会让该计数器从1加到2，这样他就需要用unlock()释放两次锁</span></span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非公平锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//非公平锁直接尝试抢夺锁，compareAndSetState(0, 1)表示如果锁的状态计数器是0，则将它变成1，即该锁进入被占用状态</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">//如果修改锁状态成功，将当前线程设置成锁的拥有者</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//如果抢夺失败，和公平锁一样进入acquire()</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>acquire()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arg就是上面传入的1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>该方法是<code>AQS</code>类中的方法，<code>final</code>修饰让子类无法覆盖，它包含三个关键方法：</strong><ul><li><strong><code>tryAcquire()</code>,<code>acquireQueued()</code>,<code>addWaiter()</code></strong> </li><li><strong>其中<code>tryAcquire()</code>需要子类进行重写，另外两个不需要，这里使用的是设计模式中的模板设计模式</strong></li></ul></li><li><strong>其中<code>acquireQueued()</code>方法返回的结果是当前线程是否被中断，中断表示一个状态表示，如果是，这里进入到<code>selfInterrupt()</code>里面再次将当前线程中断，因为里面返回是否中断的时候用的是静态的<code>Thread.intrrupt()</code>，这个方法除了返回中断标识，还会清空中断状态。</strong><ul><li><strong>我认为用这样是为了让线程在<code>acquireQueued()</code>里继续运行完，因此将中断标识位清空，将结果返回，最后在这里自己主动中断。</strong></li></ul></li></ul><h3 id="2-1-tryAcquire-方法"><a href="#2-1-tryAcquire-方法" class="headerlink" title="2.1 tryAcquire()方法"></a>2.1 <code>tryAcquire()</code>方法</h3><ul><li><p>该方法需要子类重写，因此公平锁和非公平锁实现不一样，但是只有一个地方不同：</p><ul><li><p>公平锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非公平锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">//得到当前锁的状态</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">//如果c==0表示锁没人占用</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果当前锁状态是0，就替换成acquires，抢到该锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            <span class="comment">//然后将该锁的拥有线程设置成自己，然后返回true</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果c!=0表示当前锁被占用，检查是否是自己占用的，是的话就让锁的状态计数器+1，表示重入一次</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//都不行就返回false，占用锁失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可以看到两个方法的唯一区别是这条判断逻辑公平锁多了<code>!hasQueuedPredecessors()</code></p></li></ul><h4 id="hasQueuedPredecessors"><a href="#hasQueuedPredecessors" class="headerlink" title="hasQueuedPredecessors()"></a>hasQueuedPredecessors()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">    setExclusiveOwnerThread(current);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>hasQueuedPredecessors()</code>方法：</p><ul><li>该方法表示<strong>当前结点前面还有没有结点</strong>，因为<strong>公平锁</strong>需要公平争夺，如果同步队列（第一节图）中当前结点前面还有其他节点，则需要让他先争夺锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">    <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">    <span class="comment">// thread is first in queue.</span></span><br><span class="line">    Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">    Node h = head;</span><br><span class="line">    Node s;</span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>t</code>指的是同步队列的尾结点，<code>h</code>指的是头结点</li><li><code>h!=t</code>：如果两者相同，则直接返回<code>false</code>，外层获取它的结果的时候有取反<code>!hasQueuedPredecessors()</code>，因此最后是<code>ture</code>，表示可以争夺锁<ul><li><strong>因为头尾指针相同的话表示：</strong><ol><li><strong>队列还未初始化，此时<code>h==t==null</code>，此时队列中没有其他节点，可以争夺锁</strong> </li><li><strong>队列已经初始化，但是只有一个虚拟头结点(第一节)，此时<code>h==t</code>，可以争夺锁</strong> </li></ol></li></ul></li><li><code>(s = h.next) == null || s.thread != Thread.currentThread()</code>，如果<code>h.next==null</code>表示当前前队列只有除了虚拟头结点没有其他结点，此时<code>h==t</code>，不会走到这里，因此走到这里判断的时候<code>h.next</code>一定不为空</li><li>然后<code>s.thread != Thread.currentThread()</code>判断当前线程是否是第一个线程<code>h.next</code>(h是虚拟头结点，真正的线程结点是第二个h.next)，如果相等，返回<code>false</code>，经过外层取反是<code>true</code>，表示可以争夺锁</li></ul></li></ul><h3 id="2-2-addWaiter-方法"><a href="#2-2-addWaiter-方法" class="headerlink" title="2.2 addWaiter()方法"></a>2.2 <code>addWaiter()</code>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//形成当前线程的结点</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    <span class="comment">//得到同步队列尾结点</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">//如果尾结点是不为空，表示队列已经初始化</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//node的prev属性指向尾结点</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">//将尾结点设置成当前结点</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            <span class="comment">//将pred指向的之前的尾结点的next属性指向当前结点</span></span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;<span class="comment">//返回，因此一般不会进入下面的enq(node)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一般是上面pred==null的时候进入，表示队列未初始化</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>enq(node)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;<span class="comment">//死循环</span></span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="comment">//尾结点为空，表示需要初始化</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="comment">//将空的Node设置成头结点head</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;<span class="comment">//将head赋给tail</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//第一轮循环初始化队列，第二轮进来这里</span></span><br><span class="line">            node.prev = t;<span class="comment">//记录此时尾结点是哪一个</span></span><br><span class="line">            <span class="comment">//将当前node设置成新的尾结点</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                <span class="comment">//将之前的尾结点的next指向node</span></span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;<span class="comment">//退出死循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可以看到<code>enq()</code>是用来初始化队列的，它是死循环，第一轮循环初始化队列，设置虚拟头结点，第二轮循环就是把当前结点入队，这部分代码其实和进入<code>enq()</code>之前判断已经初始化后执行的是一样的</p><ul><li>```java<br>//如果队列已经初始化，则不会进入enq<br>if (pred != null) {<pre><code>node.prev = pred;if (compareAndSetTail(pred, node)) &#123;    pred.next = node;    return node;&#125;</code></pre>}<br>//===========================<br>//enq中初始化队列后<br>else {<pre><code>node.prev = t;if (compareAndSetTail(t, node)) &#123;    t.next = node;    return t;&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.3 `acquireQueued()`方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    boolean failed = true;//表示是否取消排队</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean interrupted = false;//是否被中断</span><br><span class="line">        for (;;) &#123;//死循环，除非取消排队或者抢到了锁，不会退出？</span><br><span class="line">            </span><br><span class="line">            final Node p = node.predecessor();//得到当前结点的前驱结点</span><br><span class="line">            //如果p是头结点，就又用tryAcquire尝试抢锁，因为此时当前结点是第一个线程，无论公平还是非公平自己都能抢夺</span><br><span class="line">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                //抢锁成功，需要将结点出队，这里采用的方法是将当前结点当做下一轮的虚拟头结点，让原本的头结点p置空被GC回收，代码在底下</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = null; // help GC</span><br><span class="line">                failed = false;//不取消排队</span><br><span class="line">                return interrupted;//未被中断false</span><br><span class="line">            &#125;</span><br><span class="line">            //shouldParkAfterFailedAcquire方法下面单独分析</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                //前面返回true表示当前线程进入等待资源释放状态，因此需要阻塞，该方法直接将线程阻塞，代码在底下</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (failed)//最后看是否想取消排队</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//===================================</span><br><span class="line">//setHead方法</span><br><span class="line">private void setHead(Node node) &#123;</span><br><span class="line">    head = node;</span><br><span class="line">    node.thread = null;</span><br><span class="line">    node.prev = null;</span><br><span class="line">&#125;</span><br><span class="line">//parkAndCheckInterrupt方法</span><br><span class="line">private final boolean parkAndCheckInterrupt() &#123;</span><br><span class="line">    LockSupport.park(this);//直接阻塞当前线程，用的是通行证阻塞</span><br><span class="line">    return Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><blockquote><ul><li><strong>可以看到死循环中只有一个出口就是<code>return</code>，也就是说没抢到锁就不会退出，但也不一定一直循环抢，后面会看当前线程的等待状态判断是否阻塞，阻塞后就等待其他抢到锁的线程退出的时候需要取消排队，<code>cancelAcquire(node)</code>就有唤醒机制，抢到后将排队意愿设置成取消，后面的方法会将当前线程对应的结点从同步队列中移除(就像链表移除结点，将前驱或后继连接)</strong> </li></ul></blockquote></li><li><p><strong><font color='blue'>注意：<code>parkAndCheckInterrupt()</code>方法结束阻塞后调用静态方法判断当前线程是否被中断，静态方法会清楚当前中断标志位，因此无论是否被终端，返回到上一层</font></strong> </p></li><li><p><strong><code>shouldParkAfterFailedAcquire()</code></strong> </p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103190538946.png" alt="image-20221103190538946"><ul><li>可以看到每次都是将自己的前驱结点设置成**<font color='red'>等待被占用资源释放</font>**状态，即<code>SIGNAL</code> </li></ul></li></ul></li></ul><h3 id="2-4-cancelAcquire-方法"><a href="#2-4-cancelAcquire-方法" class="headerlink" title="2.4 cancelAcquire()方法"></a>2.4 cancelAcquire()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Ignore if node doesn&#x27;t exist</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    node.thread = <span class="keyword">null</span>;<span class="comment">//将当前结点表示的线程置空</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Skip cancelled predecessors</span></span><br><span class="line">    Node pred = node.prev;<span class="comment">//得到当前结点前驱</span></span><br><span class="line">    <span class="comment">//如果前驱也取消了，就像自己的左结点指向前驱的前驱，一直到找到未取消的前驱</span></span><br><span class="line">    <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)<span class="comment">//如果前驱状态为&gt;0(只有处于取消状态的状态为是大于0的)，就跳过，找前驱的前驱</span></span><br><span class="line">        node.prev = pred = pred.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class="line">    <span class="comment">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class="line">    <span class="comment">// or signal, so no further action is necessary.</span></span><br><span class="line">    Node predNext = pred.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can use unconditional write instead of CAS here.</span></span><br><span class="line">    <span class="comment">// After this atomic step, other Nodes can skip past us.</span></span><br><span class="line">    <span class="comment">// Before, we are free of interference from other threads.</span></span><br><span class="line">    node.waitStatus = Node.CANCELLED;<span class="comment">//当前结点状态置为取消状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are the tail, remove ourselves.</span></span><br><span class="line">    <span class="comment">//如果当前节点是尾结点，就将前驱结点设置成新的尾结点，并且将pred的next置空</span></span><br><span class="line">    <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">        compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class="line">        <span class="comment">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class="line">        <span class="keyword">int</span> ws;</span><br><span class="line">        <span class="comment">//总之就是如果前驱结点不是头结点，并且里面线程不为空，就将前驱结点的next指向当前结点的next</span></span><br><span class="line">        <span class="keyword">if</span> (pred != head &amp;&amp;</span><br><span class="line">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class="line">             (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class="line">            pred.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node next = node.next;<span class="comment">//拿出当前结点的next</span></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                compareAndSetNext(pred, predNext, next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则唤醒当前结点的后继结点，代码在下面</span></span><br><span class="line">            unparkSuccessor(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.next = node; <span class="comment">// help GC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>unparkSuccessor()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">         * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">         * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">         * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">         * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">         * non-cancelled successor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node s = node.next;</span><br><span class="line">    <span class="comment">//如果后继结点是空或者后继结点取消了，就从后往前找到最左边的非空结点当后继</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-ReentrantLock解锁方法unlock"><a href="#3-ReentrantLock解锁方法unlock" class="headerlink" title="3.ReentrantLock解锁方法unlock()"></a>3.<code>ReentrantLock</code>解锁方法<code>unlock()</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;<span class="comment">//锁释放成功返回ture，代码在下面</span></span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//由于锁释放了，唤醒下一个结点让他从上面的阻塞醒来，争夺锁</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//没有成功释放锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;<span class="comment">//将锁状态计数器-1，如果没有重入的话c是1，此时-1等于0，表示锁释放了</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);<span class="comment">//将锁的占用现成置为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);<span class="comment">//将锁状态更新</span></span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里以&lt;code&gt;ReentrantLock&lt;/code&gt;为切入点分析&lt;code&gt;AQS&lt;/code&gt;实现多个线程上锁以及如何阻塞等待的分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;中实现公平锁和非公平锁是用两个类实现的：&lt;code&gt;FairSync&lt;/code&gt;和&lt;code&gt;NonfairSync&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt;指的是&lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt;，**&lt;code&gt;ReentrantLock&lt;/code&gt;里面的抽象静态内部类&lt;code&gt;Sync&lt;/code&gt;继承自&lt;code&gt;AQS&lt;/code&gt;，而&lt;code&gt;ReentrantLock&lt;/code&gt;实现公平锁和非公平锁的两个类则是继承自&lt;code&gt;Sync&lt;/code&gt;：**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221103171418397.png&quot; alt=&quot;image-20221103171418397&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-AQS同步队列结构&quot;&gt;&lt;a href=&quot;#1-AQS同步队列结构&quot; class=&quot;headerlink&quot; title=&quot;1.AQS同步队列结构&quot;&gt;&lt;/a&gt;1.AQS同步队列结构&lt;/h2&gt;</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java中ThreadLocal是如何记录并且返回值的</title>
    <link href="http://example.com/2022/10/30/java%E4%B8%AD%E7%9A%84ThreadLocal/"/>
    <id>http://example.com/2022/10/30/java%E4%B8%AD%E7%9A%84ThreadLocal/</id>
    <published>2022-10-30T12:22:01.000Z</published>
    <updated>2022-10-30T12:22:25.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-get-方法"><a href="#1-get-方法" class="headerlink" title="1.get()方法"></a>1.get()方法</h2><ul><li><p><strong><code>ThreadLocal</code>类里面有一个内部类<code>ThreadLocalMap</code>，这个类有还有一个自己的内部类<code>Entry</code>：</strong> </p><ul><li><strong>下面是源码，注释写了关键属性的代表的含义</strong> </li></ul><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadLocalMap的概念和HashMap差不多，有初始容量，有阈值，到达阈值会扩容，存放的都是用Entry记录的键值对</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这个Entry就像HashMap里的Entry，存放键值对，这里的键是ThreadLocal</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The initial capacity -- MUST be a power of two.   初始容量，必须是二的被倍数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The table, resized as necessary.   这个表根据需要调整大小</span></span><br><span class="line"><span class="comment">    * table.length MUST always be a power of two. Length 必须始终是2的幂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//ThreadLocalMap的容量，存放一个个Entry</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The number of entries in the table.    table里面的entry个数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The next size value at which to resize.  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//之后省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>每个线程里面都有一个<code>ThreadLocal.ThreadLocalMap</code>类型的属性记录一个属于自己的<code>ThreadLocalMap</code></strong> </p><ul><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20221030192447368.png" alt="image-20221030192447368"></p></li><li><p>通过上面源码分析知道，这个<code>ThreadLocalMap</code>存放的键值对的键是<code>ThreadLocal</code>类型，根据<code>ThreadLocal</code>返回对应的值</p></li></ul></li><li><p><strong>我们调用<code>ThreadLocal</code>的<code>get()</code>方法的时候会返回这个当前线程保存的值，实质上是：</strong> </p><ul><li><p><strong>先得的这个线程的<code>ThreadLocalMap</code>对象，这个对象有属性<code>private Entry[] table</code>，然后根据当前调用<code>get()</code>方法的<code>ThreadLocal</code>对象，用该<code>ThreadLocal</code>和<code>table</code>长度计算出一个数组索引，然后从<code>table</code>数组中得到这个位置的<code>Entry</code>对象，最后就是返回这个<code>Entry</code>对象的<code>value</code>作为结果</strong> </p></li><li><p><font color='blue'><strong>也就是说我们每个线程都有自己的<code>ThreadLocalMap</code>属性，这个<code>ThreadLocalMap</code>里面保存了很多个键值对，每个键值对和一个<code>ThreadLocal</code>对象一一映射，当我们在一个线程中用<code>ThreadLocal</code>对象调用<code>get()</code>方法的时候，就会返回这个线程中<code>ThreadLocalMap</code>属性记录的这个<code>ThreadLocal</code>对象映射的<code>Entry</code>对象的<code>value</code>。</strong> </font> </p></li><li><p><code>get</code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();<span class="comment">//先得到当前线程</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);<span class="comment">//根据当前线程得到该线程记录的ThreadLocalMap对象</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);<span class="comment">//根据当前ThreadLocal对象得到ThreadLocalMap对象中对应的Entry</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            T result = (T)e.value;<span class="comment">//返回Entry的值，也就是最后返回的值</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>这里有个<code>setInitialValue()</code>方法</strong>，这个方法是当<strong>我们没有设置值的时候调用了<code>get()</code>方法</strong>的话，就会<strong>将一个初始值</strong>设置成该线程调用<code>get()</code>方法时返回的值，然后返回该初始值</p><ul><li><p><code>setInitialValue()</code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T value = initialValue();<span class="comment">//获取初始值</span></span><br><span class="line">    Thread t = Thread.currentThread();<span class="comment">//得到当前线程对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);<span class="comment">//得到当前线程的ThreadLocalMap对象</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)<span class="comment">//如果非空就覆盖原先存在的值</span></span><br><span class="line">        <span class="comment">//这个this表示的是ThreadLocal对象，每个ThreadLocal对象都会与一个ThreadLocalMap中的对象Entry一一对应</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//否则就在当前ThreadLocal对象对应的Entry的位置处，创建一个Entry</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;  <span class="comment">//最后返回value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>这个初始值我们在创建<code>ThreadLocal</code>对象的时候就应该自己手动设置，有两种方法：</strong></p><ol><li><p>匿名内部类重写<code>ThreadLocal</code>返回初始值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;Integer&gt; test = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//初始值是0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>用<code>lamda</code>表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;Integer&gt; test = ThreadLocal.withInitial(() -&gt; <span class="number">0</span>);<span class="comment">//初始值是0</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul></li></ul><h2 id="2-Set-方法"><a href="#2-Set-方法" class="headerlink" title="2.Set()方法"></a>2.Set()方法</h2><ul><li><p>源码如下，和上面<code>setInitialValue()</code>方法中一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();<span class="comment">//得到当前线程对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);<span class="comment">//得到当前线程的ThreadLocalMap对象</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)<span class="comment">//如果非空就覆盖原先存在的值</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//否则就在当前ThreadLocal对象对应的Entry的位置处，创建一个Entry</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>最关键的还是要理解上面提到的这句：</strong> </p><ul><li><font color='blue'><strong>也就是说我们每个线程都有自己的<code>ThreadLocalMap</code>属性，这个<code>ThreadLocalMap</code>里面保存了很多个键值对，每个键值对和一个<code>ThreadLocal</code>对象一一映射，当我们在一个线程中用<code>ThreadLocal</code>对象调用<code>get()</code>方法的时候，就会返回这个线程中<code>ThreadLocalMap</code>属性记录的这个<code>ThreadLocal</code>对象映射的<code>Entry</code>对象的<code>value</code>。</strong> </font> </li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-get-方法&quot;&gt;&lt;a href=&quot;#1-get-方法&quot; class=&quot;headerlink&quot; title=&quot;1.get()方法&quot;&gt;&lt;/a&gt;1.get()方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;类里面有一个内部类&lt;code&gt;ThreadLocalMap&lt;/code&gt;，这个类有还有一个自己的内部类&lt;code&gt;Entry&lt;/code&gt;：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下面是源码，注释写了关键属性的代表的含义&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode855：考场就座</title>
    <link href="http://example.com/2022/10/11/LeetCode855%EF%BC%9A%E8%80%83%E5%9C%BA%E5%B0%B1%E5%BA%A7/"/>
    <id>http://example.com/2022/10/11/LeetCode855%EF%BC%9A%E8%80%83%E5%9C%BA%E5%B0%B1%E5%BA%A7/</id>
    <published>2022-10-11T04:23:03.000Z</published>
    <updated>2022-10-11T04:41:47.316Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>如题</strong>：</p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220926112215054.png" alt="image-20220926112215054"></li></ul><span id="more"></span></li><li><p><strong>思路分析：</strong></p><ul><li><p>我们每次挑选座位的时候，需要里最近的人距离最大，也就是说如果要坐在两个人之间，应该坐在中点的位置</p></li><li><p><strong><font color='red'>因此我们可以将两个座位抽象成一个线段，第一个人是线段开始位置start，第二个人是线段结束位置end，线段长度是end-start</font></strong> </p></li><li><p>此时我们就应该坐在线段的中点，**<font color='red'>离最近的人的距离</font>就是线段长度<code>length/2</code>，因此我们要找出里最近的人的距离最大的位置=<font color='red'>找出最大的那条线段</font>** </p></li><li><p>此时就应该考虑能够动态找出最值的数据结构，一般是<strong>堆和平衡二叉树</strong>，但是堆只能操作堆顶元素，平衡二叉树可以操作根结点也可以操作孩子结点。<strong>由于我们不但需要添加座位，还需要随机离开某座位的时候删除该座位，因此只能操作最值的堆不可用，应该用平衡二叉树</strong> </p></li><li><p>java中操作平衡二叉树的数据结构有<code>TreeSet</code>和<code>TreeMap</code>，这里使用<code>TreeSet</code> </p></li><li><p><strong>由于我们存放的是线段，这里可以用一个专门的内部类来表示，属性就包含线段开始位置start线段结束位置end，和线段长度end-start</strong> </p><ul><li><strong>注意：两个座位形成的线段之间不能有其他座位</strong> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Site</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可以使用数组表示，但是可读性没那么好</p></blockquote></li></ul></li></ul><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamRoom</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 因为需要用leave()删除座位，例如此时座位是[1,3,5]，我们要删除座位3，那么[1,3]和[3,5]应该合成[1,5]，</span></span><br><span class="line">    <span class="comment">// 此时需要根据座位号3找出[1,3]和[3,5]，然后在平衡二叉树中删除它，左边的线段以3为end，右边的线段以3为start</span></span><br><span class="line">    <span class="comment">// 因此我们用两个hashMap分别保存以3为start的线段和以3为end的线段</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Site&gt; startMap;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Site&gt; endMap;</span><br><span class="line">    <span class="comment">//平衡二叉树</span></span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;Site&gt; tree;</span><br><span class="line">    <span class="comment">//将构造器中的n作为属性，供其他方法使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExamRoom</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        N = n;</span><br><span class="line">        startMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        endMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//我们每次需要找一个新座位的时候，就是找出一条长度最大的线段，然后坐在该线段中间length/2的位置，因此我们比较器直接比较length/2的大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意：0和N两个最左和最右座位，因为最开始选的时候必须选0，此时还无法构成线段，因此考虑加入两个哨兵座位-1和N，他们构成初始线段[-1,N]，</span></span><br><span class="line">        <span class="comment">//而我们实际座位应该在[0,N-1]之间</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意：普通情况下我们比较器比较两个元素的length/2的大小，因为我们选了这条线段就必须坐中间length/2的位置，保证离两端最远，但是</span></span><br><span class="line">        <span class="comment">// 如果有一个元素的开始或结束位置是哨兵位置，那么我们选该线段就不用坐中间，我们坐哨兵位置边上，因为哨兵不是座位，因此此时比较的是length-1(除开哨兵）</span></span><br><span class="line">        tree = <span class="keyword">new</span> TreeSet&lt;&gt;((a, b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> lengthA = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> lengthB = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//如果a包含哨兵</span></span><br><span class="line">            <span class="keyword">if</span> (a.start == -<span class="number">1</span> || a.end == N) lengthA = a.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> lengthA = a.length / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//如果b包含哨兵</span></span><br><span class="line">            <span class="keyword">if</span> (b.start == -<span class="number">1</span> || b.end == N) lengthB = b.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> lengthB = b.length / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//如果长度一样就按起始位置start从小到大排序</span></span><br><span class="line">            <span class="keyword">if</span> (lengthA == lengthB)<span class="keyword">return</span> a.start - b.start;</span><br><span class="line">            <span class="comment">//否则按长度从大到小排序</span></span><br><span class="line">            <span class="keyword">return</span> lengthB - lengthA;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//初试线段，起始结束位置都是哨兵，线段长度是end-start</span></span><br><span class="line">        Site start = <span class="keyword">new</span> Site(-<span class="number">1</span>, N, N + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//初始化tree和两个map</span></span><br><span class="line">        tree.add(start);</span><br><span class="line">        startMap.put(start.start, start);</span><br><span class="line">        endMap.put(start.end, start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">seat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//选座位的时候挑出最大线段，坐中间，此时产生会两个新的线段[start,mid],[mid,end]，记录下来</span></span><br><span class="line">        Site site1 = <span class="keyword">null</span>;</span><br><span class="line">        Site site2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//挑出最大线段</span></span><br><span class="line">        Site site = tree.pollFirst();</span><br><span class="line">        <span class="comment">//上面提到过，如果线段包含哨兵，那么就不是坐中间，而是做哨兵边上</span></span><br><span class="line">        <span class="keyword">if</span> (site.start == -<span class="number">1</span>) &#123;<span class="comment">//start是哨兵</span></span><br><span class="line">            site1 = <span class="keyword">new</span> Site(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            site2 = <span class="keyword">new</span> Site(<span class="number">0</span>, site.end, site.end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//end是哨兵</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (site.end == N) &#123;</span><br><span class="line">            site1 = <span class="keyword">new</span> Site(site.start, N - <span class="number">1</span>, (N - <span class="number">1</span>) - site.start);</span><br><span class="line">            site2 = <span class="keyword">new</span> Site(N - <span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//都不是哨兵，坐中间</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            site1 = <span class="keyword">new</span> Site(site.start, site.start + site.length / <span class="number">2</span>, site.length / <span class="number">2</span>);</span><br><span class="line">            site2 = <span class="keyword">new</span> Site(site.start + site.length / <span class="number">2</span>, site.end, site.end - site.start - site.length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将以该线段从两个hashMap中移出</span></span><br><span class="line">        startMap.remove(site.start);</span><br><span class="line">        endMap.remove(site.end);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在平衡二叉树中加入新生成的两个线段</span></span><br><span class="line">        tree.add(site1);</span><br><span class="line">        tree.add(site2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在两个hashMap中加入新生成的两个线段</span></span><br><span class="line">        startMap.put(site1.start, site1);</span><br><span class="line">        endMap.put(site1.end, site1);</span><br><span class="line">        startMap.put(site2.start, site2);</span><br><span class="line">        endMap.put(site2.end, site2);</span><br><span class="line">        <span class="comment">//返回新挑选的座位号，site1.end=site2.start，返回哪一个都一样</span></span><br><span class="line">        <span class="keyword">return</span> site1.end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//离开座位的时候应该将该座位左右两端的线段合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leave</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先从两个hashMap中移出以该座位号为开始的线段和以该座位为结束的线段，然后得到这两个线段，在tree中也删除这两个线段</span></span><br><span class="line">        Site site0 = startMap.remove(p);</span><br><span class="line">        Site site1 = endMap.remove(p);</span><br><span class="line">        tree.remove(site0);</span><br><span class="line">        tree.remove(site1);</span><br><span class="line">        <span class="comment">//将两个线段合并，生成新线段，然后加入tree和两个hashMap中</span></span><br><span class="line">        Site site = <span class="keyword">new</span> Site(site1.start, site0.end, site0.end - site1.start);</span><br><span class="line">        tree.add(site);</span><br><span class="line">        startMap.put(site.start,site);</span><br><span class="line">        endMap.put(site.end,site);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Site</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.start = start;</span><br><span class="line">            <span class="keyword">this</span>.end = end;</span><br><span class="line">            <span class="keyword">this</span>.length = length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意事项：我们<code>TreeSet</code>中的比较器比较的是<code>length/2</code>，不能比较<code>length</code>。</strong></p><ul><li><strong>因为如果有线段<code>[0,4]</code>和<code>[5,10]</code>，那么比较长度的话<code>[5,10]</code>长度是5，<code>[0,4]</code>长度是4，我们会选择<code>[5,10]</code>，但是5是奇数，5/2=2，我们和最近的人距离是2。</strong></li><li><strong>而<code>[0,4]</code>的长度4是偶数，4/2=2，我们和最近的人的距离也是2。</strong></li><li><strong>根据题意，距离一样我们应该选靠前的座位，因此此时应该选<code>[0,4]</code>，选<code>[0,5]</code>就错了</strong> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220926112215054.png&quot; alt=&quot;image-20220926112215054&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>高幂运算之后取模技巧</title>
    <link href="http://example.com/2022/09/24/%E9%AB%98%E5%B9%82%E8%BF%90%E7%AE%97%E4%B9%8B%E5%90%8E%E5%8F%96%E6%A8%A1%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2022/09/24/%E9%AB%98%E5%B9%82%E8%BF%90%E7%AE%97%E4%B9%8B%E5%90%8E%E5%8F%96%E6%A8%A1%E6%8A%80%E5%B7%A7/</id>
    <published>2022-09-24T09:27:33.000Z</published>
    <updated>2022-09-24T09:55:25.805Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>对于两数相乘然后取模有以下公式：</strong><br>$$<br>(a * b) % k = (a % k)(b % k) % k<br>$$</p><span id="more"></span></li><li><p><strong>证明：</strong> </p><p><strong>假设</strong><br>$$<br>a = Ak +B；b = Ck + D<br>$$</p><p><strong>其中 <code>A,B,C,D</code> 是任意常数，那么：</strong><br>$$<br>a*b = ACk^2 + ADk + BCk +BD<br>\<br>(a * b) % k = (ACk^2 + ADk + BCk +BD)%k<br>\=0+0+0+BD % k<br>\=BD % k<br>$$</p><p>又因为：<br>$$<br>a % k = B；b % k = D<br>$$</p><p><strong>所以：</strong><br>$$<br>(a * b) % k = BD % k = (a % k)(b % k) % k<br>$$</p></li></ul><h2 id="高幂运算的情况"><a href="#高幂运算的情况" class="headerlink" title="高幂运算的情况"></a>高幂运算的情况</h2><blockquote><ul><li><strong>由于高幂运算很容易造成数字溢出，因此不能直接求幂</strong> </li></ul></blockquote><ul><li><p><strong>而高幂运算后取模，例如<code>a^c%k</code>，相当于c个a连乘然后对k取模：<code>(a*a*a....*a) % k</code></strong>  </p><ul><li><strong>这里b个a相乘很容易溢出，应该考虑如何缩小相乘的结果</strong> </li></ul></li><li><p>根据上面公式可知：<br>$$<br>(a<em>a</em>a…*a) % k=((a%k)(a%k)(a%k)…(a%k)) % k<br>$$</p><ul><li><p>设<code>b=(a%k)</code>，则相当于<br>$$<br>(a<em>a</em>a…<em>a) % k=(b</em>b<em>b</em>…b)%k<br>$$</p><ul><li>其中<code>b</code>是小于k的，这样就保证了<strong>每个因子都小于k</strong>，然后我们需要进一步缩小相乘结果</li></ul></li></ul></li><li><p><strong>c个b相乘对k取模，可以把前面两个因子相乘结果看做一个数，后面c-2个因子相乘的结果看做一个数：</strong><br>$$<br>(b<em>b</em>b*…b)%k  = ((b<em>b)%k * (b</em>b<em>b..<em>b)%k)%k<br>\= ((b</em>b)%k * (b%k)(b%k)(b%k)…(b%k))%k<br>\=((b</em>b)%k <em>b</em>b*…*b)%k<br>$$</p><ul><li>假设<code>B=b*b</code>，那么有<br>$$<br>((b<em>b)%k <em>b</em>b</em>…<em>b)%k=(B</em>b<em>b….<em>b)%k<br>\=((B</em>b)%k * (b</em>b…*b) )%k<br>$$</li></ul></li><li><p>以此类推，因此可以<strong>得出结论</strong>，**<font color='#0000FF'>在高幂运算之后取模，我们可以先将底数取一次模，然后求幂的过程中，两两相乘后再次取模</font>** </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算a的c次方对k取模的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> c ,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保证每个因子都小于base</span></span><br><span class="line">    a %= k;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">        <span class="comment">// 两两相乘</span></span><br><span class="line">        res *= a;</span><br><span class="line">        <span class="comment">// 对乘法结果求模</span></span><br><span class="line">        res %= k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li><strong>很多个不同数相乘后取模也可以这样做，只需要第一步for循环将每个数字先取一次模即可，防止两两相乘的时候</strong></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对于两数相乘然后取模有以下公式：&lt;/strong&gt;&lt;br&gt;$$&lt;br&gt;(a * b) % k = (a % k)(b % k) % k&lt;br&gt;$$&lt;/p&gt;</summary>
    
    
    
    <category term="算法技巧" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="小技巧" scheme="http://example.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode986:区间列表交集</title>
    <link href="http://example.com/2022/09/12/LeetCode986%EF%BC%9A%E5%8C%BA%E9%97%B4%E5%88%97%E8%A1%A8%E4%BA%A4%E9%9B%86/"/>
    <id>http://example.com/2022/09/12/LeetCode986%EF%BC%9A%E5%8C%BA%E9%97%B4%E5%88%97%E8%A1%A8%E4%BA%A4%E9%9B%86/</id>
    <published>2022-09-12T12:57:34.000Z</published>
    <updated>2022-09-12T13:28:31.852Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题</strong>：</p><p>​    <img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220912201939434.png" alt="image-20220912201939434"></p><ul><li><p>从示例1中可以发现，求两个闭区间的交集的时候，由于两个区间列表<strong>都是已经排序的</strong>，其实就是<strong>遍历<code>firstList</code>和<code>secondList</code>两个区间列表</strong>，然后从头开始依次对比两个区间列表的每一个子区间，<strong>找出这两个子区间的开始和结束端点的关系</strong>即可，总共有<strong>六种关系</strong>，下面结合代码解释：<span id="more"></span></p><ul><li><blockquote><ul><li><p>firstLeft，firstRight表示第一个区间列表当前所指向区间的左右端点</p></li><li><p>secondLeft，secondRight表示第二个区间列表当前所指向区间的左右端点</p></li></ul></blockquote></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] intervalIntersection(<span class="keyword">int</span>[][] firstList, <span class="keyword">int</span>[][] secondList) &#123;</span><br><span class="line">        <span class="comment">//用集合来保存临时结果，最后将它转成数组就行</span></span><br><span class="line">        LinkedList&lt;<span class="keyword">int</span>[]&gt; tempRes = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> n1 = firstList.length;</span><br><span class="line">        <span class="keyword">int</span> n2 = secondList.length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">            <span class="keyword">int</span> firstLeft = firstList[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> firstRight = firstList[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> secondLeft = secondList[j][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> secondRight = secondList[j][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//下面说的左右区间指的是第一个区间和第二个区间i和j当前指向的子区间</span></span><br><span class="line">            <span class="comment">//总共有六种情况，左右区间的右端点哪个更小，就让指针指向该区间数组的下一个区间</span></span><br><span class="line">            <span class="comment">//1：右区间全在左区间左边，无交集，此时右区间右移</span></span><br><span class="line">            <span class="keyword">if</span> (secondRight &lt; firstLeft) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//2：右区间的右端点在左区间中间，左端点还在左区间左边，有交集，右区间继续右移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (secondLeft &lt; firstLeft &amp;&amp; secondRight &lt;= firstRight) &#123;</span><br><span class="line">                tempRes.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstLeft, secondRight&#125;);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3：右区间被左区间覆盖，右区间继续右移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (secondLeft &gt;= firstLeft &amp;&amp; secondRight &lt;= firstRight) &#123;</span><br><span class="line">                tempRes.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;secondLeft, secondRight&#125;);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4：左区间被右区间覆盖，此时左区间右移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (secondLeft &lt; firstLeft &amp;&amp; secondRight &gt; firstRight)&#123;</span><br><span class="line">                tempRes.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstLeft,firstRight&#125;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5：右区间左端点在左区间中间，右端点在左区间右边，左区间继续右移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (secondLeft &lt;= firstRight &amp;&amp; secondRight &gt; firstRight) &#123;</span><br><span class="line">                tempRes.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;secondLeft, firstRight&#125;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//6：右区间整体在左区间右边，左区间右移</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (secondLeft &gt; firstRight) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tempRes.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​    &lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220912201939434.png&quot; alt=&quot;image-20220912201939434&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从示例1中可以发现，求两个闭区间的交集的时候，由于两个区间列表&lt;strong&gt;都是已经排序的&lt;/strong&gt;，其实就是&lt;strong&gt;遍历&lt;code&gt;firstList&lt;/code&gt;和&lt;code&gt;secondList&lt;/code&gt;两个区间列表&lt;/strong&gt;，然后从头开始依次对比两个区间列表的每一个子区间，&lt;strong&gt;找出这两个子区间的开始和结束端点的关系&lt;/strong&gt;即可，总共有&lt;strong&gt;六种关系&lt;/strong&gt;，下面结合代码解释：</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode887：鸡蛋掉落</title>
    <link href="http://example.com/2022/09/04/LeetCode887%EF%BC%9A%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD/"/>
    <id>http://example.com/2022/09/04/LeetCode887%EF%BC%9A%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD/</id>
    <published>2022-09-04T07:06:03.000Z</published>
    <updated>2022-09-04T07:06:11.354Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题：</strong> </p><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220904143924580.png" alt="image-20220904143924580"></li></ul><blockquote><p>题目要求：探测出鸡蛋在一栋n层高的楼中最高在第x层扔下不摔碎，最少需要探测几次，给k颗鸡蛋探测</p><blockquote><p>众所周知：一个鸡蛋要探测n层楼必须从第一层开始往上线性探测，<strong>最差的情况就要探测n次（第n层才碎）</strong>，因为只有一颗</p></blockquote></blockquote><span id="more"></span><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ul><li><p><strong>如果dp函数的定义是dp(k,N)表示k个鸡蛋从N层楼探测返回的最小探测次数，那么就必须每层楼遍历，找最小的探测次数那一层楼返回的次数</strong> </p><ul><li><p>从1楼扔到N楼，每楼都扔，找出N个结果中最小的</p><ul><li>而每楼扔完之后分为碎了和没碎两种情况：<strong>碎了就去<code>1到当前层-1层</code>再扔，同时鸡蛋-1；没碎就去<code>当前层+1到N层</code>之间扔，鸡蛋数不变</strong> </li><li>碎的情况下扔的次数和没碎的情况下扔的次数不一样时，我们要<strong>取更大的最差结果</strong>，因为要保证真的发生最差情况的时候能探测完</li><li><strong>每层楼都要试，然后取所有楼层中最小的</strong> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//K表示剩余鸡蛋多少，N表示总共有N层楼</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span>:</span></span><br><span class="line"><span class="function">    <span class="keyword">for</span> 1 &lt;</span>= i &lt;= N:</span><br><span class="line">        <span class="comment">// 最坏情况下的最少扔鸡蛋次数</span></span><br><span class="line">        res = min(res, </span><br><span class="line">                  max( </span><br><span class="line">                    dp(K - <span class="number">1</span>, i - <span class="number">1</span>), <span class="comment">// 碎</span></span><br><span class="line">                    dp(K, N - i)      <span class="comment">// 没碎，去i+1到N楼搜，总共是N-i楼</span></span><br><span class="line">                  ) + <span class="number">1</span> <span class="comment">// 在第 i 楼扔了一次</span></span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li><li><p>搜索楼层的时候由于<strong>有鸡蛋限制，不能直接用二分搜索探测</strong>，否则鸡蛋只剩1个的时候只能从1层开始层层探测到当前层</p></li><li><p>但如果没有鸡蛋限制，直接二分搜索是最快的，即探测mid，碎了去lo-mid-1探测，没碎去mid+1-high探测</p></li><li><p>如果加上鸡蛋限制，不能根据鸡蛋碎了还是没碎决定去哪一半区间探测，要根据<strong>鸡蛋碎的时候的探测次数和鸡蛋没碎的时候的探测次数比较</strong> </p><ul><li><p>看原来的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最坏情况下的最少扔鸡蛋次数</span></span><br><span class="line">res = min(res, </span><br><span class="line">          max( </span><br><span class="line">              dp(K - <span class="number">1</span>, i - <span class="number">1</span>), <span class="comment">// 碎</span></span><br><span class="line">              dp(K, N - i)      <span class="comment">// 没碎，去i+1到N楼搜，总共是N-i楼</span></span><br><span class="line">          ) + <span class="number">1</span> <span class="comment">// 在第 i 楼扔了一次</span></span><br><span class="line">         )</span><br></pre></td></tr></table></figure><ul><li><p>找每一层最坏情况中最少的扔鸡蛋次数，思考<strong>该层什么情况下是所有楼层中扔鸡蛋次数最少的那一层</strong>？</p></li><li><p>由于碎了和没碎的时候探测次数和楼层高度<strong>是成正比的</strong>，即<strong>探测的楼层更多，探测次数肯定更多</strong></p><ul><li><p>碎了的时候<strong>dp(K-1,i-1)<code>随着楼层i增加</code>要搜索的层数<code>变多</code></strong>  </p></li><li><p>没碎的时候<strong>dp(K,N-i)<code>随着楼层i增加</code>要搜索的层数<code>变少</code></strong>  </p></li><li><p>那么就是说这**<code>两种情况一个递增一个递减</code><strong>，每次我们在当前层探测的次数取两种情况更大的，那么</strong>一单调增一单调减的时候取两者最大，返回的结果最少的情况就是两者相等的时候**：</p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220904144025985.png" alt="image-20220904144025985" style="zoom:50%;" /><ul><li><strong>可以看到两个函数取最大值的话，红点处就是最小的结果</strong> </li><li>那么在探测楼层的时候就可以<strong>不用每层楼都探测</strong>然后<strong>找所有楼层中最小</strong>的<ul><li>我们直接取中间楼层扔鸡蛋，<strong>不同的是不是根据鸡蛋碎没碎而决定排除哪一半区域</strong>，而是根据<strong>根据当前楼层中<code>dp(K-1,i-1)</code>和<code>dp(K,N-i)</code>谁更大</strong>来决定排除一半区域，<strong>这是根据状态转移方程本身的单调性才有的二分，而不是思路上采用了二分搜索，我们思路仍然是要遍历所有楼层找最小的一层，只不过状态转移方程具有单调性。</strong> </li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p> 代码：</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//备忘录，memo[K][N]直接记录K颗鸡蛋探测N楼最少要探测多少次</span></span><br><span class="line">    <span class="keyword">int</span>[][] memo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//楼层从1开始，鸡蛋个数也从1开始，需要+1</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[K + <span class="number">1</span>][N + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] m : memo) &#123;</span><br><span class="line">            <span class="comment">//随便初始化备忘录，记录的探测次数是&gt;0的，因此直接随便填一个负数</span></span><br><span class="line">            Arrays.fill(m, -<span class="number">888</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp(K, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果不是初始化的值，就意味着当前状态的值已经记录下来了，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (memo[K][N] != -<span class="number">888</span>) <span class="keyword">return</span> memo[K][N];</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//原来是这样，现在进行优化</span></span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt;= N; i++) &#123;</span></span><br><span class="line"><span class="comment">//            res = Math.min(res, Math.max(dp(K - 1, i - 1), dp(K, N - i)) + 1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = N;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> down = dp(K - <span class="number">1</span>, mid - <span class="number">1</span>);<span class="comment">//鸡蛋碎了，往下探测要探测多少次</span></span><br><span class="line">            <span class="keyword">int</span> up = dp(K, N - mid);<span class="comment">//鸡蛋没碎，往上探测要探测多少次</span></span><br><span class="line">            <span class="keyword">if</span> (down &lt; up) &#123;<span class="comment">//如果往上探测要的次数更多，就表示此时在交点左侧，需要将左边界右移</span></span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">                res = Math.min(res, up + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (down &gt; up) &#123;<span class="comment">//如果往下探测次数更多，就表示此时在交点右侧，需要将右边界左移</span></span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">                res = Math.min(res, down + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果上下探测次数一样，表示此时就是探测次数最少的那一层，记录当前探测次数，退出循环</span></span><br><span class="line">                res = up + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[K][N] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ul><li><strong>反向思考，</strong>考虑k颗鸡蛋探测m次能在一栋h高的楼中找出最高不会摔碎的楼层，<strong>操作m来让h逼近n</strong> <ul><li>例如(4,6)=h表示我们用4颗鸡蛋探测6次<strong>能在h高的楼中探测出鸡蛋最高不会摔碎的楼层</strong> <ul><li><strong><code>base case</code>:直到鸡蛋只剩一颗，此时能探测的层数等于探测次数；或者探测次数只剩一次，此时只能探测一层</strong> </li><li>我们需要一个<code>dp[][]</code>数组，<code>dp[4][6]</code>=h，从数组的<strong>第二行第二列</strong>开始从左往右计算每一行，因为第一行表示鸡蛋只有一颗，是base case，第一列表示探测次数只有一次，也是base case</li><li>如果碎了鸡蛋-1，探测次数-1，也就是求(3,5)能探测h1层</li><li>如果没碎鸡蛋不变，探测次数-1，也就是求(4,5)能探测h2层</li><li><strong>最终能探测h1+h2+1=h层</strong> </li><li><strong>也可以算出第一次探测的位置应该是<code>(3,5)+1</code>的位置</strong> </li></ul></li><li>可以想象成给一栋楼划分层数，（2,7）表示两个鸡蛋探测七次可以给一栋楼划分成几层，从第x层开始探测<ul><li>碎了时候是（1,6），此时是base case，直接返回能划分成6层，因为必须一层一层划分</li><li>没碎的时候是（2,6），继续上一步，直到碰到base case，最终得到21</li><li>最后的结果就是21+6+1=28层，<strong>也就是说2颗鸡蛋要在28层的楼中确定限界摔碎楼层要探测7次。如果28&gt;题目给的层数就返回7</strong> </li><li><strong><code>（1,6）+1</code>的位置就是第一次探测开始的位置</strong>，此时<code>(1,6)+1=6+1=7</code>，表示第一次从第7层开始探测，因此可以看出不能单纯用二分探测，否则第一次就从14开始了</li></ul></li></ul></li></ul><ul><li><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// m 最多是N次，比如从第一层开始层层往上</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[K + <span class="number">1</span>][N + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (dp[K][m] &lt; N) &#123;</span><br><span class="line">            m++;</span><br><span class="line">            <span class="comment">//这里包含了base case，鸡蛋数k是行，探测次数m是列，只能探测一次的时候表示第一列，此时能探测的层数都是1层</span></span><br><span class="line">            <span class="comment">//只有一颗鸡蛋的时候是第一行，此时探测层数=探测次数，dp[1][1]=1，dp数组从第一行第一列开始往右边递增</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= K; k++)</span><br><span class="line">                dp[k][m] = dp[k][m - <span class="number">1</span>] + dp[k - <span class="number">1</span>][m - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[K][m]);</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220904143924580.png&quot; alt=&quot;image-20220904143924580&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题目要求：探测出鸡蛋在一栋n层高的楼中最高在第x层扔下不摔碎，最少需要探测几次，给k颗鸡蛋探测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;众所周知：一个鸡蛋要探测n层楼必须从第一层开始往上线性探测，&lt;strong&gt;最差的情况就要探测n次（第n层才碎）&lt;/strong&gt;，因为只有一颗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>java注释中的代码也可能会被执行</title>
    <link href="http://example.com/2022/09/01/%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B9%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2022/09/01/%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B9%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%89%A7%E8%A1%8C/</id>
    <published>2022-09-01T10:21:00.000Z</published>
    <updated>2022-09-01T10:22:20.584Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>java中正常情况下注释中的代码都不会被执行，但是有一些特殊情况值得注意：<span id="more"></span></p></li><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// \u000a a=1;</span></span><br><span class="line"><span class="comment">// \u000a b=2;</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;---&quot;</span> + b);</span><br></pre></td></tr></table></figure><ul><li>这里输出的结果是<code>1---2</code></li></ul></li><li><p>上面注释中的内容前面有<code>\u000a</code>串字符，这是<code>unicode</code>字符</p><ul><li><code>\u000a</code>在<code>unicode</code>中是<strong>换行</strong>的意思</li></ul></li><li><p>java编写代码的时候可以<strong>在源代码中直接写<code>unicode</code>字符</strong>，他们会<strong>在任何词汇翻译之前执行</strong>，因此注释符号<code>//</code>之后的代码最开始就会别换行成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">b=<span class="number">2</span>;</span><br><span class="line">System.out.println(a + <span class="string">&quot;---&quot;</span> + b);</span><br></pre></td></tr></table></figure></li><li><p>同样的<strong>回车符</strong>也能起到这种效果：</p><ul><li><code>\u000d</code>在<code>unicode</code>中是回车的意思</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java中正常情况下注释中的代码都不会被执行，但是有一些特殊情况值得注意：</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode51:N皇后</title>
    <link href="http://example.com/2022/08/16/LeetCode51N%E7%9A%87%E5%90%8E/"/>
    <id>http://example.com/2022/08/16/LeetCode51N%E7%9A%87%E5%90%8E/</id>
    <published>2022-08-16T04:27:33.000Z</published>
    <updated>2022-08-16T04:29:20.393Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>如题：</strong> </p><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220816120830529.png" alt="image-20220816120830529"></p></li></ul><p><strong>思路：</strong></p><ul><li><p>该题是经典回溯法题目<span id="more"></span></p></li><li><p>我们从第一行开始逐行放置皇后，然后放置第二行的皇后，第二行皇后放置的时候需要和第一行皇后比较位置，如果是同一列或者在同一斜线上就不能放置</p></li><li><p><strong>我们可以使用一个select数组记录每一行皇后放在第几列，<u>数组的下标表示第几行，值表示第几列</u>，例如select[3]=1，表示第三行的皇后放置在第一列</strong> </p><ul><li><p><strong>检验是否同一列：</strong></p><ul><li>例如我们检验第4行皇后能否放在第4列，只需要遍历select数组0-3的值，看是否有select[i]=4，</li></ul></li><li><p><strong>检验是否同一斜线：</strong></p><ul><li>例如我们检验第4行皇后能否放在第4列，只需要遍历select数组0-3的值，<strong>检查每一行皇后所在列数和当前列数差值的绝对值是否等于每一行皇后的行数和当前行数差值的绝对值是否相等</strong>，如果相等则它们处于同一斜线</li></ul></li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用来返回最后所有放置的结果</span></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//用来统计单次放置的结果，统计完后加入到res</span></span><br><span class="line">    List&lt;String&gt; add;</span><br><span class="line">    <span class="comment">//长度为n，select[0]=1表示第0行的皇后放在1的位置</span></span><br><span class="line">    <span class="keyword">int</span>[] select;</span><br><span class="line">    <span class="comment">//用来配合select形成每行的结果，加入到add中</span></span><br><span class="line">    <span class="keyword">char</span>[] temp;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        add = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line">        select = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        backTrack(n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回溯法，从第row行开始，每行遍历0-n位置组个选择</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="comment">//当row==n的时候说明将0-n-1位置的皇后放置好了，select数组记录了每一行皇后放置的位置</span></span><br><span class="line">        <span class="keyword">if</span> (row==n)&#123;</span><br><span class="line">            <span class="comment">//将上次的结果清理</span></span><br><span class="line">            add.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                Arrays.fill(temp,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                temp[select[i]]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                add.add(<span class="keyword">new</span> String(temp));</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(add));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!canSet(select,row,i))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//回溯法一般做出选择之后需要撤销选择，但这里不需要撤销，</span></span><br><span class="line">            <span class="comment">// 因为我们下次选择的时候会覆盖这次选择结果，撤不撤销无所谓</span></span><br><span class="line">            select[row] = i;</span><br><span class="line">            backTrack(n,row+<span class="number">1</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canSet</span><span class="params">(<span class="keyword">int</span>[] n,<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n[i]==col||Math.abs(i-row)==Math.abs(n[i]-col))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如题：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220816120830529.png&quot; alt=&quot;image-20220816120830529&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;该题是经典回溯法题目</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>解决虚拟机linux磁盘容量扩容以及重启网络连接图标消失问题</title>
    <link href="http://example.com/2022/08/15/linux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    <id>http://example.com/2022/08/15/linux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</id>
    <published>2022-08-15T11:40:30.000Z</published>
    <updated>2022-08-15T14:48:44.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>亲测有效</strong> </p></blockquote><h2 id="这里操作的是centos系统"><a href="#这里操作的是centos系统" class="headerlink" title="这里操作的是centos系统"></a>这里操作的是<code>centos</code>系统</h2><ul><li><strong>首先在关机状态下扩展磁盘容量</strong> <ul><li><strong>点击扩展，设置好自定的容量然后开机</strong> <span id="more"></span><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220806220825854.png" alt="image-20220806220825854"></li></ul></li></ul></li><li><strong>开机后此时磁盘容量不会变化</strong>，此时输入<code>lsblk</code>查看当前磁盘和磁盘分区情况<ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220805130021957.png" alt="image-20220805130021957"></li><li>比如需要<strong>将新扩容的容量加入到<code>sda3</code>分区里面</strong> </li></ul></li><li><strong>首先<code>fdisk /dev/sda</code>进入要扩容的分区<code>sda</code></strong> </li><li><strong>然后输出<code>d</code>删除磁盘分区，然后输入此次我们要删除的分区编号<code>3</code></strong><ul><li><strong>这里不用担心原先的文件会消失，我们重启之前重新分配就好</strong> </li></ul></li><li><strong>然后输入<code>n</code>表示<u>创建新分区</u>，再输入<code>p</code>表示创建主分区，选择编号是3即创建<code>sda3</code>，然后之后的指定容量<u>直接按回车</u>表示<u>将剩余的全部分给这个新分区</u></strong>  </li><li><strong>然后出入<code>w</code>表示保存</strong> </li><li><strong><code>reboot</code>重启</strong> </li><li>此时<code>lsblk</code>查看到<code>sda3</code><strong>逻辑磁盘容量增加为指定容量</strong>，而且这个<strong>磁盘和原先一样都是挂载在同一个目录的</strong>，因为我们在<strong>配置文件中配置了磁盘分区和目录挂载的对应关系</strong>，因此我们删除这个分区然后在<strong>创建同编号的<code>sda3</code>分区</strong>这个<strong>挂载关系是一样的</strong> <ul><li>查看该配置文件<code>vim /etc/fstab</code>：<ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220806222654673.png" alt="image-20220806222654673"><ul><li>第一个指的是磁盘文件，我们可以直接写<code>/dev/sda3</code>与磁盘分区对应上，也可以找到磁盘文件里面的对应这个分区的<code>UUID</code>然后使用，我这里是系统生成的时候选用的<code>UUID</code></li><li>第二个就是我们挂载的目录</li></ul></li></ul></li></ul></li><li>此时<code>df -h</code>看到<strong>文件系统层发现磁盘大小没变</strong>，<strong>需要手动刷新</strong><ul><li><code>resize2fs /dev/sda3</code> </li><li>然后<code>reboot</code>重启</li></ul></li><li><strong>如果重启发现网络连接图标直接消失，使用这个命令：</strong> <ul><li><code>mv /var/lib/NetworkManager /var/lib/NetworkManager.bak</code></li><li><strong>然后重启</strong> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;亲测有效&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;这里操作的是centos系统&quot;&gt;&lt;a href=&quot;#这里操作的是centos系统&quot; class=&quot;headerlink&quot; title=&quot;这里操作的是centos系统&quot;&gt;&lt;/a&gt;这里操作的是&lt;code&gt;centos&lt;/code&gt;系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先在关机状态下扩展磁盘容量&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点击扩展，设置好自定的容量然后开机&lt;/strong&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Feign时Feign、Ribbon、Hystrix超时时间分析</title>
    <link href="http://example.com/2022/08/02/Feign%E3%80%81Ribbon%E3%80%81Hystrix%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/"/>
    <id>http://example.com/2022/08/02/Feign%E3%80%81Ribbon%E3%80%81Hystrix%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</id>
    <published>2022-08-01T20:18:01.000Z</published>
    <updated>2022-08-01T20:39:41.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ribbon和feign超时时间分析"><a href="#ribbon和feign超时时间分析" class="headerlink" title="ribbon和feign超时时间分析"></a><code>ribbon</code>和<code>feign</code>超时时间分析</h2><ul><li><code>ribbon</code>和<code>Feign</code>默认超时时间都是<code>1s</code> <ul><li>下面是<code>RibbonClientConfiguration </code>类，里面指明了<code>ribbon</code>的<strong>默认连接超时时间</strong>和<strong>默认读取超时时间</strong>都是1s <span id="more"></span><ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220802034730409.png" alt="image-20220802034730409"></li></ul></li></ul></li><li>配置方法</li></ul><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="comment"># 设置 feign 超时时间</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">        <span class="comment">#超时时间默认为1s</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">             <span class="comment">#不设置connectTimeout会导致readTimeout设置不生效</span></span><br><span class="line">             <span class="comment">#建立连接所用的时间，适用于网络状况正常的情况下，两端连接所需要的时间</span></span><br><span class="line">            <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">             <span class="comment">#指建立连接后从服务端读取到可用资源所用的时间</span></span><br><span class="line">            <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><ul><li>注意：<code>Feign</code> 和 <code>Ribbon</code> 的超时时间<strong>只会有一个生效</strong> </li><li>当我们没有显式配饰<code>feign</code>的超时时间的是时候，如果配置了<code>ribbon</code>的超时时间，则只有这个配置会生效，<code>feign</code>默认的1s超时无效</li><li>如果我们<code>feign</code>和<code>ribbon</code>的超时时间都配置了，会以<code>feign</code>配置的为准</li></ul></blockquote><h2 id="hystrix超时时间分析"><a href="#hystrix超时时间分析" class="headerlink" title="hystrix超时时间分析"></a><code>hystrix</code>超时时间分析</h2><ul><li><p><code>hystrix</code> 的默认超时时间是 1s，这个配置在 <code>HystrixCommandProperties</code> 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer default_executionTimeoutInMilliseconds = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></li><li><p>配置方法：</p></li></ul><blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 hystrix 超时时间</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#注意：这个hystrix要单独配置才会生效，不能接着上面的feign里面的hystrix配置，那样是无效的</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p><strong>注意：我们如果没有开启<code>feign</code>的<code>hystrix</code>功能的话那么<code>hystrix</code>的超时时间就不会生效，即有没有配置</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>如果配置了<code>hystrix</code>功能，那么它的<strong>超时时间默认就是开启的</strong>，且<strong>该时间是1秒</strong>，这个时间和<code>ribbon</code>的超时时间<strong>会同时起作用</strong>，不像上面的<code>feign</code>的超时时间和<code>ribbon</code>超时时间二选一，我们可以通过上面的配置<code>hystrix</code>的超时时间让它更长，或者显式禁用<code>hystrix</code>的超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">        <span class="comment">#这里表示禁用hystrix的超时时间限制</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果我们禁用了<code>hystrix</code>的超时时间配置，那么我们在方法上用<code>@HystrixCommand</code>里这样配置超时时间也会失效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &gt;<span class="meta">@HystrixCommand(fallbackMethod = &quot;xxxxx&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;1500&quot;)</span></span><br><span class="line"><span class="meta"> &gt;&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>也就是说这里的1.5s超时配置无效</li></ul></blockquote></li></ul></blockquote></blockquote><ul><li>开启<code>feign</code>的<code>hystrix</code>功能后我们可以通过注解在方法上面配置针对该方法的超时时间，<strong>这个时间限制是在上面配置文件之后的，即先判断时间是否超出配置文件中的（没配置就是默认1s），再判断是否超出当前注解里面规定的</strong> </li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><ul><li><strong>如果注解里面禁用了超时时间配置，那么这里也不会生效</strong></li></ul></blockquote><ul><li><p><strong>再次提醒：<code>hystrix</code>的超时时间配置和<code>ribbon</code>的超时时间配置是同时生效的</strong> </p><ul><li><p>例如如果我们远程调用另一服务，而另一服务需要运行<code>3s</code>，那么此时我们如果不想报错，就需要<strong>同时配置</strong><code>hystrix</code>和<code>ribbon</code>的超时时间超过<code>3s</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只有在feign中开启了hystrix功能后，hystrix的超时时间才回生效，如果我们压根不使用hystrix的功能就不用配置了</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ribbon和feign超时时间分析&quot;&gt;&lt;a href=&quot;#ribbon和feign超时时间分析&quot; class=&quot;headerlink&quot; title=&quot;ribbon和feign超时时间分析&quot;&gt;&lt;/a&gt;&lt;code&gt;ribbon&lt;/code&gt;和&lt;code&gt;feign&lt;/code&gt;超时时间分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ribbon&lt;/code&gt;和&lt;code&gt;Feign&lt;/code&gt;默认超时时间都是&lt;code&gt;1s&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;下面是&lt;code&gt;RibbonClientConfiguration &lt;/code&gt;类，里面指明了&lt;code&gt;ribbon&lt;/code&gt;的&lt;strong&gt;默认连接超时时间&lt;/strong&gt;和&lt;strong&gt;默认读取超时时间&lt;/strong&gt;都是1s</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="微服务调用" scheme="http://example.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode315：计算右侧小于当前元素的个数</title>
    <link href="http://example.com/2022/07/28/LeetCode315%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E6%95%B0/"/>
    <id>http://example.com/2022/07/28/LeetCode315%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E6%95%B0/</id>
    <published>2022-07-28T06:51:33.000Z</published>
    <updated>2022-07-28T07:01:19.583Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如题：</p><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220728133709381.png" alt="image-20220728133709381"></p></li></ul><p><strong>分析思路：</strong> </p><ul><li>思路一：挨个元素利用<code>for</code>循环计算出后面小于当前元素数，但是这样属于两层<code>for</code>循环，时间复杂度是O(N^2)，不可取 <span id="more"></span></li><li>思路二：由于我们要计算<strong>每个元素</strong>之后小于当前元素的元素个数，那么我们肯定要<strong>遍历每个元素</strong>，因此这里的<strong>O(N)的时间复杂度是至少需要的</strong>，剩下的问题是如何统计当前元素右侧更小的元素个数，那么就需要<strong>将遍历到的元素和其他元素进行比较</strong>，我们如果对每个元素都用<code>for</code>循环完成<strong>两两比较</strong>那么复杂度是O(N^2)，因此这样<strong>直接整体统计的方法不可取</strong>，我们可以<strong>先部分再整体</strong>：我们不用一次性计算出当前元素右侧更小的元素个数，可以先统计一部分，最后完成整体统计，因此需要思考有什么方法在遍历数组的时候可以<strong>先将一部分元素两两比较，最后完成整体比较的</strong>？二路归并排序。<ul><li>二路归并排序会先将左边的排好序，再将右边的排好序，然后利用<code>merge</code>函数将左右两边的子数组合并，注意：<strong>我们在<code>merge</code>合并的时候其实就已经对两个子数组中的元素两两比较了</strong>。等到<strong>归并排序结束，我们就能够两两比较整个数组</strong>。</li><li><strong>二路归并排序时间复杂度是<code>nlogn</code>，其中<code>logn</code>代表<code>merge</code>函数对左右子数组合并的次数，<code>n</code>代表每次合并操作的复杂度。因此我们可以理解为<code>merge</code>函数的时间复杂度为<code>O(n)</code>，我们会调用<code>logn</code>次<code>merge</code>函数</strong>。<ul><li>意思就是：<strong>merge函数里面遍历两个子数组将它们合并的复杂度是<code>O(n)</code>，此时如果我们在<code>merge</code>函数中 额外 进行我们自己需要的遍历，保证我们新增的遍历操作时间复杂度不超过<code>O(n)</code>，这样加上原本的合并操作，时间复杂度最多也是<code>O(2n)</code>，忽略常数后时间复杂度不变</strong>。</li></ul></li><li>因此可以得出结论：<strong>我们可以利用归并排序中<code>merge</code>函数仅调用<code>logn</code>次就能两两比较整个数组的特点，在merge函数组增加一个时间复杂度为<code>O(n)</code>的遍历操作，这样就能够避免嵌套for循环的<code>n²</code>时间复杂度</strong>。</li></ul></li><li>由于<strong>最后返回的时候我们要在每个元素原来的位置记录，而排序算法会打乱元素的原始位置，因此应该记录每个元素最开始的索引位置</strong>，这里有两种思路<ul><li>一：使用<code>HashMap</code>记录每个元素值到索引的映射，这种方法能简单快速得到每个元素的原始索引，但是<strong>只适用于数组中元素不重复的情况</strong> </li><li>二：我们额外使用一个记录类，这个类里面有<code>value</code>和<code>index</code>两个属性，记录每个元素和该元素原始位置</li><li><strong>本题应该用思路二，因为元素有重复，</strong> 需要注意的是，我们应该将原本对<code>int</code>数组排序改成对这个记录类数组排序，归并排序的时候操作是一样的，只不过需要额外调用一些<code>value</code>属性罢了。</li></ul></li></ul><p><strong>代码如下</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在归并排序的merge合并两个有序子数组的时候，如果左边大于右边，就让右指针右移，直到碰到左指针的值小于等于右指针的值，</span></span><br><span class="line"><span class="comment">// 此时从中间位置到右指针位置之间的所有元素就都是 小于 此时左指针的值，直接累加统计这些元素个数：right-mid-1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个记录类来记录数组中每个元素和原始索引</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Record</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于我们的Record类里面有值，因此可以将对int数组的排序改成对Record数组的排序</span></span><br><span class="line">    <span class="keyword">private</span> Record[] records;</span><br><span class="line">    <span class="comment">//归并排序的时候需要用到的临时数组</span></span><br><span class="line">    <span class="keyword">private</span> Record[] temp;</span><br><span class="line">    <span class="comment">//记录每个元素右侧更小元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一系列初始化</span></span><br><span class="line">        records = <span class="keyword">new</span> Record[nums.length];</span><br><span class="line">        temp = <span class="keyword">new</span> Record[nums.length];</span><br><span class="line">        count = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            records[i] = <span class="keyword">new</span> Record(i,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行归并排序</span></span><br><span class="line">        sort(records,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将count数组里记录的加到list集合中</span></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : count)&#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Record[] records,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里不能用(left+right)/2，可能会有益处的风险</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        sort(records,left,mid);</span><br><span class="line">        sort(records,mid+<span class="number">1</span>,right);</span><br><span class="line">        merge(records,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Record[] records,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="comment">//利用System.arraycopy方法将records数组中left到right位置的元素拷贝到temp数组中对应位置，</span></span><br><span class="line">        <span class="comment">//也可以用for循环一个个赋值，但是该方法效率更高</span></span><br><span class="line">        System.arraycopy(records,left,temp,left,right-left+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left,l=left,r=mid+<span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == mid+<span class="number">1</span>)&#123;</span><br><span class="line">                records[i] = temp[r++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (r == right+<span class="number">1</span>)&#123;<span class="comment">//这里r==right+1表示右指针到头了，表示此时右边子数组中所有元素比当前元素小</span></span><br><span class="line">                count[temp[l].index] += r - mid - <span class="number">1</span>;<span class="comment">//也可以直接写right-mid</span></span><br><span class="line">                records[i] = temp[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[l].val &lt;= temp[r].val)&#123;</span><br><span class="line">                <span class="comment">//这里条件一定是左边小于等于右边，因为如果只写左边小于右边，</span></span><br><span class="line">                <span class="comment">// 那么这就意味着当右边等于左边的时候指针也会右移，此时从中间到右边之中的值</span></span><br><span class="line">                <span class="comment">// 就不全是小于左边的了，换句话说我们计算右边元素比左边小的数量的时候是利用右指针每次移动都是因为右指针指向的数小于</span></span><br><span class="line">                <span class="comment">// 左指针指向的数，这样从mid+1到right-1这些元素就都是小于左指针的元素了，因此右指针和左指针相等的话右指针不应该右移，</span></span><br><span class="line">                <span class="comment">// 除非计算的是右边元素小于等于当前元素的数量</span></span><br><span class="line">                count[temp[l].index] += r - mid - <span class="number">1</span>;</span><br><span class="line">                records[i] = temp[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                records[i] = temp[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220728133709381.png&quot; alt=&quot;image-20220728133709381&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分析思路：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思路一：挨个元素利用&lt;code&gt;for&lt;/code&gt;循环计算出后面小于当前元素数，但是这样属于两层&lt;code&gt;for&lt;/code&gt;循环，时间复杂度是O(N^2)，不可取</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>java中两个线程i++100次结果</title>
    <link href="http://example.com/2022/07/13/java%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8Bi++100%E6%AC%A1%E7%BB%93%E6%9E%9C/"/>
    <id>http://example.com/2022/07/13/java%E4%B8%AD%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8Bi++100%E6%AC%A1%E7%BB%93%E6%9E%9C/</id>
    <published>2022-07-13T10:29:18.000Z</published>
    <updated>2022-07-13T10:33:35.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析java中两个线程分别i-一百次的结果"><a href="#解析java中两个线程分别i-一百次的结果" class="headerlink" title="解析java中两个线程分别i++一百次的结果"></a>解析<code>java</code>中两个线程分别i++一百次的结果</h1><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><ul><li>假设<strong>i从0开始</strong>，那么<strong>两个线程</strong>分别<strong>i++一百次</strong>后i的值有可能是：<code>2-200</code>。</li></ul><span id="more"></span><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul><li>首先我们要知道<code>java</code>中的<code>i++</code><strong>不是原子操作</strong>，因为这个操作分为三个步骤：<ol><li>将内存中i的值读到寄存器</li><li>在寄存器中自增</li><li>将自增后的值写回内存</li></ol></li></ul><h3 id="①i-200"><a href="#①i-200" class="headerlink" title="①i=200"></a>①i=200</h3><ul><li>这种情况<strong>比较理想</strong>，假如两个线程之间没有发生打断对方<code>i++</code>时候三个步骤中的任何一步，那么<code>i</code>的值就会顺理成章自增200次，最后得到200。</li></ul><h3 id="②i-2"><a href="#②i-2" class="headerlink" title="②i=2"></a>②i=2</h3><ul><li>这种情况<strong>比较极端</strong>：<ul><li><strong>线程一</strong>将<code>i=0</code>的值取出到寄存器中，寄存器中的值+1变成1，还未写回内存，<strong>被线程二打断</strong>，此时内存中<code>i=0</code>，进程一寄存器的值为1</li><li><strong>线程二</strong>完成99次自增操作，此时内存中<code>i=99</code>，<strong>被线程一打断</strong>，线程一将寄存器中的1写回内存，此时内存中的<code>i=99</code>被覆盖成<code>i=1</code>，然后<strong>线程一又被线程二打断</strong> </li><li>此时<strong>线程二</strong>只剩最后一次自增操作，它首先将此时内存中<code>i=1</code>的值读到寄存器中，寄存器中的值加一变成2，<strong>被线程一打断</strong> </li><li>此时内存中<code>i=1</code>，<strong>线程一</strong>完成剩下的全部自增操作，此时<code>i=100</code>，<strong>轮到线程二</strong> </li><li><strong>线程二</strong>将寄存器中的2写回内存，最后内存中<code>i=2</code> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;解析java中两个线程分别i-一百次的结果&quot;&gt;&lt;a href=&quot;#解析java中两个线程分别i-一百次的结果&quot; class=&quot;headerlink&quot; title=&quot;解析java中两个线程分别i++一百次的结果&quot;&gt;&lt;/a&gt;解析&lt;code&gt;java&lt;/code&gt;中两个线程分别i++一百次的结果&lt;/h1&gt;&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;假设&lt;strong&gt;i从0开始&lt;/strong&gt;，那么&lt;strong&gt;两个线程&lt;/strong&gt;分别&lt;strong&gt;i++一百次&lt;/strong&gt;后i的值有可能是：&lt;code&gt;2-200&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分析如何将map/model的数据放入request保存域</title>
    <link href="http://example.com/2022/05/16/%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%B0%86mapmodel%E7%9A%84%E6%95%B0%E6%8D%AE%E6%94%BE%E5%85%A5request%E4%BF%9D%E5%AD%98%E5%9F%9F/"/>
    <id>http://example.com/2022/05/16/%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%B0%86mapmodel%E7%9A%84%E6%95%B0%E6%8D%AE%E6%94%BE%E5%85%A5request%E4%BF%9D%E5%AD%98%E5%9F%9F/</id>
    <published>2022-05-16T12:16:46.000Z</published>
    <updated>2022-05-16T12:18:07.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析如何将map-model的数据放入request保存域"><a href="#分析如何将map-model的数据放入request保存域" class="headerlink" title="分析如何将map/model的数据放入request保存域"></a>分析如何将map/model的数据放入request保存域</h1><ul><li><strong>以下源码不需要全看，主要看写了中文注释的地方即可，一步一步进去就明白了</strong> <span id="more"></span></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*首先是进入到DispatcherServlet这个中央控制器中的doDispatcher()方法里的这一步（每个请求都会经由</span></span><br><span class="line"><span class="comment">DispatcherServlet处理，进入到doDispatcher()方法）*/</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="comment">//=========进入ha.handle</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================进入handleInternal</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ModelAndView mav;</span><br><span class="line">    checkRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">            <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">                mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">            mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">        <span class="comment">//进入的就是这里</span></span><br><span class="line">        mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">            applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            prepareResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================进入invokeHandlerMethod(request, response, handlerMethod);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">        invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里会创建mavContainer</span></span><br><span class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">        modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">        mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">        AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">        asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">        asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">        asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">        asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">        asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            Object result = asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Resume with async result [&quot;</span> + formatted + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进入的就是这里</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入invocableMethod.invokeAndHandle(webRequest, mavContainer);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                            Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//invokeFOrRequest，进入的就是这里</span></span><br><span class="line">    Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line">    Assert.state(<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>, <span class="string">&quot;No return value handlers&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">            returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================进入invokeForRequest(webRequest, mavContainer, providedArgs)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                               Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入这里面会返回args数组，这个args数组保存的就是我们需要的每个参数解析后的值/对象</span></span><br><span class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//!!!!执行我们的控制器方法，底层是一系列反射</span></span><br><span class="line">    <span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入getMethodArgumentValues(request, mavContainer, providedArgs)</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">                                           Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//args数组保存的就是每个参数的值</span></span><br><span class="line">    Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">    <span class="comment">//这个for循环一次对每个参数进行赋值，存放在args数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        MethodParameter parameter = parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//进入这里！！！</span></span><br><span class="line">            args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                String exMsg = ex.getMessage();</span><br><span class="line">                <span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">                    logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</span><br><span class="line"><span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unsupported parameter type [&quot;</span> +</span><br><span class="line">parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================分两步，先进入getArgumentResolver(parameter)找到当前参数对应的参数解析器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从缓存中直接获取这个参数对应的解析器，第一次的话肯定没有</span></span><br><span class="line">    HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从所有的argumentResolvers里面一个一个找，找到了就放入缓存里，这个缓存将参数作为键，解析器作为值下一调用直接获取</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">            <span class="comment">//判断此解析器是否支持当前参数，例如参数是否包含某注解，因此对应某解析器，对象参数也有对应的解析器</span></span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                result = resolver;</span><br><span class="line">                <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================第二步：再进入resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                              NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAndViewContainer is required for model exposure&quot;</span>);</span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！！！！！！！关键，这里可以看见我们返回的是mavContainer对象的defaultModel属性</span></span><br><span class="line">    <span class="comment">//无论参数是map还是model还是modelmap，他们的解析器虽然不同，但是resolveArgument()方法都是返回mavContainer.getModel()</span></span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    <span class="keyword">return</span> mavContainer.getModel();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================进入mavContainer.getModel()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelMap <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里可以看见，如果使用的是默认的模型的话，返回的就是mavContainer这个对象的defaultModel属性</span></span><br><span class="line">    <span class="keyword">if</span> (useDefaultModel()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defaultModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.redirectModel == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redirectModel = <span class="keyword">new</span> ModelMap();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redirectModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>由上可知，我们参数中<code>map/model</code>最终得到的都是<code>mavContainer</code>这个对象的<code>defaultModel</code>属性，这个属性的类型是<code>BindingAwareModelMap</code>，之前讲过这个<code>BindingAwareModelMap</code>实现了<code>map/model</code>这两个接口，因此返回这个类型我们的map或者model都可以接收。</strong></p><ul><li><p><strong>而且如果我们参数同时有<code>map</code>和<code>model</code>，返回的对象实际上是同一个，以为上面可以看到实际上就是调用<code>mavContainer.getModel()</code>返回的，而<code>mavContainer</code>这个对象的创建是在解析参数之前，一次请求映射只会创建一个，因此<code>mavContainer.getModel()</code>返回的是同一个对象。</strong></p></li><li><p><strong>此时我们使用<code>map</code>或者<code>model</code>添加键值对实际上都会动态绑定到<code>BindingAwareModelMap</code>这个类型调用它的添加方法，因此我们map/model添加的键值对都放在同一个对象里，而这个对象实际上就是<code>mavContainer</code>的<code>defualtModel</code>属性，因此我们添加过后这个属性就有了对应的数据。</strong></p></li><li><p><strong>例如这样添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="number">123</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;2&quot;</span>,<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p><strong>添加过后</strong><img src="https://img-blog.csdnimg.cn/img_convert/38858d63a639942b9eff45b8a0372ebc.png" alt="image-20220516194059723"></p><ul><li><strong>可以看到<code>defalutModel</code>这个属性有了对应的键值对数据</strong> </li></ul></li></ul></li><li><p><strong>然后执行完了控制器里面的方法后返回到<code>invocableMethod.invokeAndHandle(webRequest, mavContainer)</code>这一步</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//...省略很多</span></span><br><span class="line">        <span class="comment">//这里创建的mavContainer对象</span></span><br><span class="line">        ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">        <span class="comment">//...省略很多</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">            Object result = asyncManager.getConcurrentResult();</span><br><span class="line">            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">            asyncManager.clearConcurrentResult();</span><br><span class="line">            LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">                String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Resume with async result [&quot;</span> + formatted + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////刚刚就是从这里进入的，现在从返回继续执行</span></span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//现在进入这里</span></span><br><span class="line">        <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===================进入getModelAndView(mavContainer, modelFactory, webRequest)方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">getModelAndView</span><span class="params">(ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     ModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">    <span class="keyword">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到我们操作更新过的模型，如果不是重定向请求就是default这个</span></span><br><span class="line">    ModelMap model = mavContainer.getModel();</span><br><span class="line">    <span class="comment">//将这个mavContainer映射的视图名称和模型数据都作为参数new一个ModelAndView对象出来，这个就是我们最后得到的，这里返回它</span></span><br><span class="line">    <span class="comment">//！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class="line">    <span class="keyword">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class="line">        mav.setView((View) mavContainer.getView());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (model <span class="keyword">instanceof</span> RedirectAttributes) &#123;</span><br><span class="line">        Map&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class="line">        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">        <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后就是将这个创建出来的mav层层返回直到mv = ha.handle(processedRequest, response, mappedHandler.getHandler())这里</span></span><br></pre></td></tr></table></figure></li><li><p><strong>至此，我们已经将我们控制器方法里面的键值对添加到了doDispatcher方法里面的mav对象中，之后真正将这个mav对象中的模型数据放到request保存域中的方法是<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler())</code>之后的<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)</code>这个方法</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/26ea45e0c92de763b59bdaa858921abf.png" alt="image-20220516195845213"></p><p>进入<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//...省略一些不相关的</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Did the handler return a view to render?</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            <span class="comment">//render方法渲染视图，进入这里！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line">render(mv, request, response);</span><br><span class="line"><span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//========================进入render(mv, request, response);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//...省略一些不相关的</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, mv.getStatus());</span><br><span class="line">response.setStatus(mv.getStatus().value());</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//继续进入这个render方法！！！！！！</span></span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//======================进入view.render(mv.getModelInternal(), request, response);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(<span class="meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;View &quot;</span> + formatViewName() +</span><br><span class="line"><span class="string">&quot;, model &quot;</span> + (model != <span class="keyword">null</span> ? model : Collections.emptyMap()) +</span><br><span class="line">(<span class="keyword">this</span>.staticAttributes.isEmpty() ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;, static attributes &quot;</span> + <span class="keyword">this</span>.staticAttributes));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line">prepareResponse(request, response);</span><br><span class="line">    <span class="comment">//这里是重点，进入这个方法！！！！！！！！！！！！！！！！！</span></span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================进入renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">    <span class="comment">//这里就是暴露mdoel的数据作为RequestAttributes，进去！！！！！！！！！！！！！</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br><span class="line"><span class="comment">//后面的省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//====================进去exposeModelAsRequestAttributes(model, request);</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以看到就是遍历model的每一个键值对，将它用request对象的setAttribute()方法设置</span></span><br><span class="line">    model.forEach((name, value) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(name, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            request.removeAttribute(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>至此分析完毕。</strong> </p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分析如何将map-model的数据放入request保存域&quot;&gt;&lt;a href=&quot;#分析如何将map-model的数据放入request保存域&quot; class=&quot;headerlink&quot; title=&quot;分析如何将map/model的数据放入request保存域&quot;&gt;&lt;/a&gt;分析如何将map/model的数据放入request保存域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下源码不需要全看，主要看写了中文注释的地方即可，一步一步进去就明白了&lt;/strong&gt;</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="ssm" scheme="http://example.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode74:网络延迟问题</title>
    <link href="http://example.com/2022/05/14/LeetCode743%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F/"/>
    <id>http://example.com/2022/05/14/LeetCode743%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F/</id>
    <published>2022-05-14T11:31:25.000Z</published>
    <updated>2022-05-16T12:16:11.050Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如题：</strong> <img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220514183856067.png" alt="image-20220514183856067"></p><p><strong>分析思路：</strong> <span id="more"></span></p><ul><li><p>从实例的途中就可以看出这是一个有向带权图，每条边的权重表示从一个节点发送信号到另一个节点所需要的时间。</p></li><li><p><strong>题目要我们返回从某一个节点开始发送信号，需要多久才能使所有节点都收到这个信号，这里有两层含义</strong>：</p><ul><li><strong>第一层</strong>：如果当前节点到另一个节点有两条路径，这两条路径都能到达，我们应该选取花费时间更少的那条</li><li><strong>第二层</strong>：需要保证所有节点都能收到该信号，因此所需要的时间应为当前节点到其他节点的需要花费时间中需要时间最久的那个时间，这样才能保证在这个时间内所有节点都能收到该信号</li></ul></li><li><p>因此，<strong>第一个问题是</strong>如何得到当前节点到另一个节点的所有路径中花费时间最短的路径？</p><ul><li><strong>这个问题我们可以用<code>dijkstra</code>算法解决，这个算法就是解决最短路径问题的。</strong> </li><li><strong>注意<code>dijkstra</code>算法的使用条件：加权有向图，没有负权重</strong>，因此当前问题满足条件。</li></ul></li><li><p><strong>第二个问题</strong>是如何知道到哪个节点所需要的 最短路径时间 是最长的？</p><ul><li><strong>我们可以在<code>dijkstra</code>算法计算每一个节点的耗费时间的同时利用一个数组记录当前节点到每一个节点所需要的最短时间。</strong> </li></ul></li></ul><p><strong>代码：</strong> </p><ul><li><code>dijkstra</code>算法实质上是在<code>BFS</code>层次遍历图的过程中计算最短路径的，因此我们需要构建图，这里用邻接表法构建图。</li><li><code>dijkstra</code>需要一个数组记录开始结点到其他所有节点的最短路径长度，我们可以这样实现：<ul><li>初始化一个<code>distFromStart</code>，记录的值<strong>初始化为无穷大</strong>（因为我们要缩小这个值）。</li><li>在遍历图的过程中找到当前结点的所有邻居节点，然后计算<strong>从开始结点到当前结点的路径长度</strong>加上<strong>当前节点到邻居节点的权重</strong>，即<strong>当前路径到该达邻居节点的路径长度</strong>，判断这个长度和<code>distFromStart</code>数组记录的长度的大小，**<code>distFromStart</code>数组始终记录更小的那个值。** <ul><li><strong>上述条件中我们可以知道的是当前结点到邻居节点的权重，那么我们如何知道开始节点到当前节点的路径长度？</strong> <ul><li>我们可以<strong>用一个类来记录这个信息</strong>，这个类有属性<code>id</code>表示节点编号，属性<code>distFromStart</code>表示开始结点到当前结点的路径长度。在<code>BFS</code>过程中我们用这个类的对象来代表每一个节点，加入到队列中遍历。</li></ul></li></ul></li><li><strong>这样我们在遍历的时候弹出队列中的节点就可以得到开始结点到当前结点的路径长度了，在利用建立的邻接表可以根据这个节点的<code>id</code>找到它的每一个邻居，由此可以完成判断。</strong> </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表里每一个节点的类型是int[]，该数组长度为2，0索引存放目的节点，1索引存放到目的节点的权重。</span></span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt;[] graph;</span><br><span class="line">    <span class="comment">//实时记录每个结点到起始结点的最短距离,在每次寻找邻居节点的时候用来判断当前路径走这条路是否可行</span></span><br><span class="line">    <span class="keyword">int</span>[] distFromStart;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用邻接表法建图</span></span><br><span class="line">        built(times, n);</span><br><span class="line">        <span class="comment">//用dijkstra计算每个结点和起始结点的最短路径</span></span><br><span class="line">        dijkstra(graph, k);</span><br><span class="line">        <span class="comment">//找最大时间，代表所有结点收到信号的最短时间</span></span><br><span class="line">        <span class="keyword">int</span> maxTime = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从1开始，结点编号没有0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; distFromStart.length; i++) &#123;</span><br><span class="line">            <span class="comment">//如果长度还是101则表示路径长度没有更新，即表示这个节点无法到达，直接返回-1</span></span><br><span class="line">            <span class="keyword">if</span> (distFromStart[i] == <span class="number">101</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (distFromStart[i] &gt; maxTime) maxTime = distFromStart[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">built</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于节点的编号是从1开始的，所以初始化大小n+1</span></span><br><span class="line">        graph = <span class="keyword">new</span> ArrayList[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] time : times) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = time[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> to = time[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> weight = time[<span class="number">2</span>];</span><br><span class="line">            graph[start].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;to, weight&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录每个几点的基本信息，即编号和与起始结点的路径长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">int</span> distFromStart;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> distFromStart)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.distFromStart = distFromStart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(List&lt;<span class="keyword">int</span>[]&gt;[] graph, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//优先权队列对 从开始结点到当前结点的距离distFromStart 从小到大排序</span></span><br><span class="line">        PriorityQueue&lt;Node&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; a.distFromStart - b.distFromStart);</span><br><span class="line"></span><br><span class="line">        distFromStart = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="comment">//权重最大为100，初始化为一个大于它的数</span></span><br><span class="line">        Arrays.fill(distFromStart, <span class="number">101</span>);</span><br><span class="line">        distFromStart[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        priorityQueue.offer(<span class="keyword">new</span> Node(start, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">            Node Node = priorityQueue.poll();</span><br><span class="line">            <span class="keyword">int</span> curNodeID = Node.id;<span class="comment">//当前结点id</span></span><br><span class="line">            <span class="keyword">int</span> curDistFromStart = Node.distFromStart;<span class="comment">//当前路径下开始节点到当前结点的路径长度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (curDistFromStart &gt; distFromStart[curNodeID]) &#123;</span><br><span class="line">                <span class="comment">// 表示已经有一条更短的路径到达 curNode 节点了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] neighbor : graph[curNodeID]) &#123;</span><br><span class="line">                <span class="keyword">int</span> weight = neighbor[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> nextNodeID = neighbor[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (curDistFromStart + weight &lt; distFromStart[nextNodeID]) &#123;</span><br><span class="line">                    distFromStart[nextNodeID] = curDistFromStart + weight;</span><br><span class="line">                    priorityQueue.offer(<span class="keyword">new</span> Node(nextNodeID, curDistFromStart + weight));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面我们使用优先权队列保存每个而不是普通队列，这样效率更高。<strong>因为我们要找的是开始节点到当前节点的最短路径，在找这条最短路径的过程中我们如果能够保证每次都从更短的子路径开始找，则最终的找到的路径是最短路径的概率会更高。这是一种贪心策略。</strong>  </li><li>在<code>BFS</code>遍历图的时候我们不需要使用<code>visited</code>数组保证我们不走回头路，因为我们只有在找到更短路径的时候才回把节点加入队列中，如果走回头路的话这个路径肯定比数组中记录的更长。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;如题：&lt;/strong&gt; &lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220514183856067.png&quot; alt=&quot;image-20220514183856067&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析思路：&lt;/strong&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数组集合互相转换的时候应该注意的问题</title>
    <link href="http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/05/08/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%9B%86%E5%90%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-08T11:29:51.000Z</published>
    <updated>2022-07-28T08:30:36.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组转换成集合"><a href="#数组转换成集合" class="headerlink" title="数组转换成集合"></a>数组转换成集合</h1><ul><li><p><strong>可以使用<code>Arrays.asList()</code>方法。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li><p>输出结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191253736.png" alt="image-20220508191253736">，集合里存放的是单个的数字。 <span id="more"></span></p></li><li><p><strong><u>特别注意</u><strong>：这里</strong>数组不能使用<code>int[]</code>来定义</strong>，因为集合需要指定泛型，而泛型只能是引用类型，<code>Arrays.asList()</code>方法返回的集合的泛型会和数组类型一致，但是如果数组类型是基本数据类型而不是引用类型，则会将<strong>整个数组<code>int[]</code>当成泛型类型</strong>。此时集合里的元素就不再是单个的数字，而是整个整个的数组了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li>输出结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191454595.png" alt="image-20220508191454595">，集合里存放的是数组。</li></ul></li></ul></li><li><p><strong><code>Arrays.asList</code>方法返回一个<code>List</code>，是一个视图，它的底层仍然是数组，因此不能使用<code>add</code>,<code>remove</code>方法，因为这会改变数组大小，只能使用访问底层数组的<code>get</code>和修改数组元素的<code>set</code>方法。</strong> </p><ol><li><p>修改方法<code>set()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">System.out.println(list);</span><br><span class="line">list.set(<span class="number">0</span>,<span class="number">111</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><ul><li>结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191917993.png" alt="image-20220508191917993"> </li></ul></li><li><p><code>add()/remove()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(a);</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//list.remove(1);</span></span><br></pre></td></tr></table></figure><ul><li>结果：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508192044362.png" alt="image-20220508192044362"> </li></ul></li></ol><ul><li><strong>从源码分析：</strong> <ul><li><strong>这个方法返回的是一个<code>Arrays</code>的内部类<code>java.util.Arrays$ArrayList</code>。这个内部类继承了<code>AbstractList</code>，而<code>AbstractList</code>又继承了<code>List</code>。因此我们得用<code>List</code>来接收这个结果，不能用<code>ArrayList</code>！！！</strong> </li><li><strong>此时我们使用返回的<code>List</code>类型的集合并调用这个集合的方法，在运行的时候根据动态绑定机制会去运行类型<code>java.util.Arrays$ArrayList</code>中调用这个方法，而<code>java.util.Arrays$ArrayList</code>这个类是没有<code>add()</code>和<code>remove()</code>这两个方法的，因此我们调用会失败。</strong> </li></ul></li><li>额外：集合的<code>subList()</code>方法返回的视图没有操作限制，可以将任何增删改操作应用于这个视图，同时它会影响到原集合例如删除这个子视图相当于删除了元集合中的这些元素。</li></ul></li></ul><h1 id="集合转换成数组"><a href="#集合转换成数组" class="headerlink" title="集合转换成数组"></a>集合转换成数组</h1><ul><li><p><strong>List集合的<code>toArray()</code>方法可以将集合转成对应类型的数组：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">arrayList.add(<span class="number">2</span>);</span><br><span class="line">arrayList.add(<span class="number">3</span>);</span><br><span class="line">arrayList.add(<span class="number">5</span>);</span><br><span class="line">Object[] objects1 = arrayList.toArray();<span class="comment">//直接返回会返回一个Object类型的数组</span></span><br><span class="line">Integer[] integers1 = arrayList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);<span class="comment">//添加这个参数即可，下面解释</span></span><br></pre></td></tr></table></figure><ul><li><strong>如果直接调用<code>toArray()</code>将返回一个对象数组，此时由于数组的类型是不能强制转换的，即即使当前<code>Obeject</code>数组中的元素都是<code>Integer</code>类型也无法将它转换成<code>Integer</code>类型的数组。</strong> </li><li><strong>想要获得指定类型的数组必须在方法里new一个这种类型的数组，此时就会返回一个同类型的数组。参数中数组的长度小于集合大小会自动扩大到集合大小，长度大于集合大小多余的位置填<code>null</code>。</strong> </li><li><strong>对返回的数组的操作不会影响到该集合：</strong> <ul><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508185549110.png" alt="image-20220508185549110"></li></ul></li></ul></li><li><p><strong>数组没有类型转换，即不能将int类型的数组转换成Object类型的数组。但是集合这样是可以的：</strong> </p><ul><li><pre><code class="java">List&lt;Integer&gt; f = new ArrayList&lt;&gt;();ArrayList&lt;Integer&gt; c = (ArrayList&lt;Integer&gt;)f;</code></pre></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数组转换成集合&quot;&gt;&lt;a href=&quot;#数组转换成集合&quot; class=&quot;headerlink&quot; title=&quot;数组转换成集合&quot;&gt;&lt;/a&gt;数组转换成集合&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可以使用&lt;code&gt;Arrays.asList()&lt;/code&gt;方法。&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Integer[] a = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输出结果：&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220508191253736.png&quot; alt=&quot;image-20220508191253736&quot;&gt;，集合里存放的是单个的数字。</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springMVC的拦截器分析</title>
    <link href="http://example.com/2022/05/04/springMVC%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/05/04/springMVC%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E5%88%86%E6%9E%90/</id>
    <published>2022-05-04T02:53:06.000Z</published>
    <updated>2022-05-04T03:03:24.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-拦截器的作用时机"><a href="#1-拦截器的作用时机" class="headerlink" title="1. 拦截器的作用时机"></a>1. 拦截器的作用时机</h1><ul><li>和过滤器一样，拦截器也可以拦截请求。</li><li>过滤器是在<code>DispatcherServlet</code>处理之前拦截，拦截器是在<code>DispatcherServlet</code>处理请求然后调用控制器方法(即我们自己写的处理请求的方法，用<code>@RequestMapping</code>标注)之前进行拦截。<span id="more"></span></li></ul><h1 id="2-拦截器的三个默认方法"><a href="#2-拦截器的三个默认方法" class="headerlink" title="2. 拦截器的三个默认方法"></a>2. 拦截器的三个默认方法</h1><ul><li>实现拦截器需要实现<code>HandlerInterceptor</code>这个接口，这个<strong>接口</strong>中有三个<strong>默认方法</strong>，<strong>这三个方法的执行顺序</strong>：<ul><li><strong>preHandle</strong>：<strong>控制器方法执行之前</strong>执行preHandle()，返回值是一个boolean，表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</li><li><strong>postHandle</strong>：控制器方法执行之后执行postHandle()</li><li><strong>afterComplation</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</li></ul></li><li>我们实现接口然后重写这三个方法，就会在对应的时机被自动执行。</li></ul><h1 id="3-分析拦截器方法执行时机"><a href="#3-分析拦截器方法执行时机" class="headerlink" title="3. 分析拦截器方法执行时机"></a>3. 分析拦截器方法执行时机</h1><h2 id="3-1-preHandle-和postHandle-执行时机"><a href="#3-1-preHandle-和postHandle-执行时机" class="headerlink" title="3.1 preHandle()和postHandle()执行时机"></a>3.1 <code>preHandle()</code>和<code>postHandle()</code>执行时机</h2><ul><li><p><strong>在处理请求的时候会调用<code>DispatcherServlet</code>，这里面有如下代码</strong>:</p></li><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/tmpB871.png" alt="tmpB871" style="zoom: 80%;" /><ul><li><p><code>mv=ha.handle()</code>这里就是调用<strong>处理请求</strong>的方法，返回值是一个<code>ModelAndView</code>类型的对象。</p></li><li><p><strong>上图这里可以看见在<code>mv=ha.handle()</code>之前和之后调用了<code>applayPreHandle()</code>和<code>applyPostHandle()</code>两个方法</strong>。这两个方法就是执行所有拦截器的<code>preHandle()</code>方法和<code>postHandle()</code>方法。<u>**因此可以看见在处理请求之前执行<code>preHandle()</code>，处理请求之后执行<code>postHandle()</code>**。</u></p></li><li><p><strong>上图的<code>mappedHandler</code>是一个处理执行链</strong>，类型为<code>HandlerExecutionChain</code> </p><ul><li>这个对象包含<strong>三个属性</strong>，如下图所示：<ul><li><strong>第一个</strong><code>handler</code>表示<strong>当前请求对应的控制器方法</strong>；</li><li><strong>第二个</strong>表示当前请求对应的<strong>所有拦截器集合</strong>，可以看见<strong>第一个是自带的拦截器</strong>，第二个是我们配置的；</li><li><strong>第三个</strong>表示的是<code>applyPreHandle()</code>这个方法执行完后<strong>最后一个<code>PreHandle()</code>方法返回<code>ture</code>的拦截器的索引</strong>。</li><li><img src="https://img-blog.csdnimg.cn/img_convert/10ee178ca64d7b85a0c7252eba4c5e4f.png" alt="image-20220503155412733"></li></ul></li></ul></li><li><p>既然<strong>有拦截就要有放行</strong>，拦截器的三个方法中要想要<strong>进行拦截肯定得在处理器方法执行之前</strong>，即<strong>只有PreHandle()方法会进行拦截然后判断是否放行</strong>。看下三个方法的源码，<strong>只有<code>PreHandle()</code>方法有返回值，返回true代表放行，false代表不放行</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cd000447b3e29a9a79ec53c9ae21f025.png" alt="image-20220503144628331"></p></li><li><p><strong>这里调用<code>applyPreHandler()</code>方法的源码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//这里循环遍历所有的interceptor,按顺序遍历，这个顺序就是我们在配置文件中配置的顺序，除了我们配置的还有一个自带的，</span></span><br><span class="line">    <span class="comment">//这个拦截器是第一个生效的，索引是0</span></span><br><span class="line">    <span class="comment">//for循环的第三个表示将每个返回true的拦截器的索引,赋值给interceptorIndex属性,然后再让索引自增，即interceptorIndex记录的就是</span></span><br><span class="line">    <span class="comment">//这个applyPreHandeler()方法执行完后最后一个放行的拦截器的索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.interceptorList.size(); <span class="keyword">this</span>.interceptorIndex = i++) &#123;</span><br><span class="line">        HandlerInterceptor interceptor = (HandlerInterceptor)<span class="keyword">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="comment">//这里会调用每一个interceptor的preHandle方法，然后如果返回false表示不放行</span></span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.triggerAfterCompletion(request, response, (Exception)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>preHandle()</code>返回false则进入if语句，里面同样会返回false，然后返回到上一层调用的地方：<img src="https://img-blog.csdnimg.cn/img_convert/36ce20c62f1d84e280e55b4f90f8e2f0.png" alt="image-20220503144932312"><ul><li><strong>这里是false则进入if语句，直接retrun，因此不会执行下面的控制器方法，这就意味着<code>preHandle()</code>返回false代表不放行</strong>。</li></ul></li></ul></li></ul></li></ul><h2 id="3-2-afterComplation方法执行时机"><a href="#3-2-afterComplation方法执行时机" class="headerlink" title="3.2 afterComplation方法执行时机"></a>3.2 <code>afterComplation</code>方法执行时机</h2><ul><li><p><strong>在<code>DispatcherServlet</code>中有如下代码</strong>：</p></li><li><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220503142150596.png" alt="image-20220503142150596" style="zoom:67%;" /></li><li><ul><li><strong>这里的<code>this.render()</code>方法就是渲染视图的</strong>，在这个方法下面调用了<code>treggerAfterCompletion()</code>方法，这个方法会调用<strong>不放行的那个拦截器之前的所有拦截器的<code>afterComplation</code>方法</strong>。<u><strong>因此在渲染视图之后调用<code>afterComplation</code></strong></u>。</li><li>但是如果<strong>前面的<code>PreHandle</code>方法如果不放行</strong>，则执行不到这里，但是<strong>前面的<code>applyPreHandler()</code>方法中会在不放行的时候自己调用<code>treggerAfterCompletion()</code>方法</strong>，因此<strong>放行和不放行执行<code>treggerAfterCompletion()</code>方法的地方不是同一个</strong>。</li></ul></li></ul><h1 id="4-多个拦截器时每个方法的执行顺序"><a href="#4-多个拦截器时每个方法的执行顺序" class="headerlink" title="4. 多个拦截器时每个方法的执行顺序"></a>4. 多个拦截器时每个方法的执行顺序</h1><ul><li>若每个拦截器的preHandle()都返回true<ul><li>此时多个拦截器的执行顺序和<strong>拦截器在SpringMVC的配置文件的配置顺序</strong>有关：</li><li><strong><code>preHandle()</code>会按照配置的顺序执行，而<code>postHandle()</code>和<code>afterComplation()</code>会按照配置的反序执行</strong></li></ul></li></ul><h2 id="4-1-分析顺序执行和反序执行"><a href="#4-1-分析顺序执行和反序执行" class="headerlink" title="4.1 分析顺序执行和反序执行"></a>4.1 分析顺序执行和反序执行</h2><p><strong>这里看源码</strong>：</p><h3 id="preHandle"><a href="#preHandle" class="headerlink" title="preHandle"></a>preHandle</h3><ul><li><p>这里调用所有拦截器的<code>preHandle()</code>方法：<img src="https://img-blog.csdnimg.cn/img_convert/6aace45ad24a261a9e49ee4d67d1ac0f.png" alt="image-20220503160647835"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p><ul><li>这里for循环遍历<strong>从索引0开始遍历</strong>interceptorList集合中的所有拦截器，这个集合<strong>拦截器的索引顺序就是我们在配置文件中配置的顺序</strong>，因此<code>preHandle()</code>是<strong>按照配置顺序执行</strong> </li></ul></li></ul><h3 id="postHandle"><a href="#postHandle" class="headerlink" title="postHandle"></a>postHandle</h3><ul><li><p><strong>这里会调用所有拦截器的<code>postHandle()</code>方法</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/681ed2a49cb710764c0c61c5c2cfacb2.png" alt="image-20220503160932167"></p><ul><li>这个方法的调用是在<code>applyPreHandler()</code>这个方法执行完后执行的，<strong>因此如果这个<code>applyPreHandler()</code>方法在遍历所有拦截器的<code>preHandle()</code>方法时碰到了返回false的，即不放行，则会直接return掉，不会执行这个<code>applyPostHandle()</code>方法</strong>。<strong>因此只要有一个拦截器不放行，则所有拦截器的<code>postHandle()</code>都不执行</strong>，如下图：</li><li><img src="https://img-blog.csdnimg.cn/img_convert/0863178cbe17cb75a0d3ac469b4eddbc.png" alt="image-20220503162156080"></li></ul></li><li><p>如果所有的<code>PreHandle()</code>方法都放行，则会执行这个<code>applyPostHandle()</code>方法，从这里<u><strong>可以看到它是从<code>interceptorList</code>集合的最后一个索引开始向前遍历的，因此是反序</strong></u> </p><ul><li><img src="https://img-blog.csdnimg.cn/img_convert/cf8a4f8e44552be402c9bfa36bc37a27.png" alt="image-20220503160954516"></li></ul></li></ul><h3 id="afterComplation"><a href="#afterComplation" class="headerlink" title="afterComplation"></a>afterComplation</h3><ul><li><p>下面代码会执行所有拦截器的<code>afterComplation()</code>方法，可以看出<u><strong>for循环遍历拦截器集合的时候也是从后往前遍历的</strong></u> </p><p><img src="https://img-blog.csdnimg.cn/img_convert/54837dc787070d49ab5b1e9b3dce7aa0.png" alt="image-20220503161448647"></p></li></ul><p>上述的**<code>triggerAfterCompletion()</code>方法有两个地方可能会执行**：</p><ul><li><ol><li><p><strong>如果有拦截器不放行</strong>：在执行所有<code>PreHandle()</code>方法的<code>applyPreHandler()</code>方法中，如果碰到某个拦截器的<code>PreHandle()</code>方法不放行，就会执行<code>triggerAfterCompletion()</code>方法。<strong>此时不会渲染视图，因为被拦截了</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p></li><li><p><strong>如果全部放行</strong>：则会在视图渲染之后执行，上面有分析。</p></li></ol></li><li><p><strong>有拦截器不放行时</strong>：</p><ul><li><p><strong>源码</strong>：for循环里面的if语句在判断时就会执行<code>preHandle()</code>，如果<strong>不放行则进入if语句，里面会调用<code>triggerAfterCompletion()</code>方法</strong> <img src="https://img-blog.csdnimg.cn/img_convert/f430bc42cf01abf8cd8ba8ed28301b11.png" alt="image-20220503160746584"></p></li><li><p><strong>此时<code>preHandle()</code>返回false的那个拦截器之前的拦截器的<code>afterComplation()</code>会执行，理由如下</strong>：</p><ul><li><p><strong>这里会调用最后一个放行的拦截器和它之前的所有拦截器的<code>afterComplation()</code>方法</strong>：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54837dc787070d49ab5b1e9b3dce7aa0.png" alt="image-20220503161448647"></p></li><li><p><strong><code>this.interceptorIndex</code>就是在<code>applyPreHandler()</code>方法中赋值的，它记录的是最后一个放行的拦截器在集合中的索引，而<code>preHandle()</code>方法在碰到返回false的<code>preHandle()</code>拦截器方法后就会执行这个<code>triggerAfterCompletion()</code>方法(即这个拦截器的<code>preHandle()</code>方法不放行)，此时<code>this.interceptorIndex</code>就记录的是最后一个放行的拦截器索引</strong>。</p></li><li><p><u><strong>因此返回false的拦截器之前的拦截器的<code>afterComplation()</code>都会执行</strong></u> </p></li></ul></li></ul></li><li><p><strong>若某个拦截器的preHandle()返回了false</strong> </p><ul><li>即如果某个拦截器的<code>preHandle()</code>返回了false，<strong>则<code>preHandle()</code>执行次数会比<code>afterComplation()</code>执行次数多一次，多的就是按个返回false的<code>preHandle()</code></strong> </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-拦截器的作用时机&quot;&gt;&lt;a href=&quot;#1-拦截器的作用时机&quot; class=&quot;headerlink&quot; title=&quot;1. 拦截器的作用时机&quot;&gt;&lt;/a&gt;1. 拦截器的作用时机&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;和过滤器一样，拦截器也可以拦截请求。&lt;/li&gt;
&lt;li&gt;过滤器是在&lt;code&gt;DispatcherServlet&lt;/code&gt;处理之前拦截，拦截器是在&lt;code&gt;DispatcherServlet&lt;/code&gt;处理请求然后调用控制器方法(即我们自己写的处理请求的方法，用&lt;code&gt;@RequestMapping&lt;/code&gt;标注)之前进行拦截。</summary>
    
    
    
    <category term="java扩展" scheme="http://example.com/categories/java%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="ssm" scheme="http://example.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>在java集合中调用remove方法后调用iterator.next()报错</title>
    <link href="http://example.com/2022/04/26/%E9%9B%86%E5%90%88%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8next%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/04/26/%E9%9B%86%E5%90%88%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8next%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2022-04-26T04:48:54.000Z</published>
    <updated>2022-07-30T06:24:09.590Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>例如使用<code>Arraylist</code>集合返回的一个iterator迭代器，我们<strong>这样使用会报错</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = arrayList.iterator();<span class="comment">//获得迭代器</span></span><br><span class="line">arrayList.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (iterator.hasNext()) System.out.println(iterator.next());</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p><strong>分析</strong>：</p><ul><li><p>我们来看**<code>iterator.next()</code>方法源码：** </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();<span class="comment">//调用这个方法检查，我们刚刚报错就是因为调用这个方法</span></span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>ArrayList</code></strong> 继承了 <strong><code>AbstractList</code>，</strong> 其中<code>AbstractList</code>中有个<code>modCount</code>代表了<strong>集合修改的次数</strong>。<strong>在<code>ArrayList</code>的<code>iterator</code>的<code>next()</code>方法中会判断<code>expectedModCount</code>与<code>modCount</code>是否相等，如果相等继续执行，不相等报错</strong>。</p></li><li><p>这个<code>expectedModCount</code>是迭代器这个类的一个属性，<strong>调用<code>ArrayList</code>自身的<code>add</code>和<code>remove</code>等改变集合大小的方法都会导致<code>modCount+1</code>，但是不会修改<code>expectedModCount</code>。</strong> </p></li><li><p>返回的<strong>迭代器是<code>ArrayList</code>的一个私有内部类(下文有这个内部类的源码）</strong>，在调用集合的iterator()方法返回迭代器的时候底层是new一个新的迭代器返回，它在<strong>创建的时候会将当前<code>modCount</code>的值赋给<code>expectedModCount</code>，因此创建的时候两者相等</strong>。</p></li><li><p><strong>因此我们在创建迭代器后，如果使用了<code>ArrayList</code>本身的add方法导致<code>modCount+1</code>后，此时<code>modCount</code>和<code>expectedModCount</code>不相等了，再调用迭代器的next()方法就会报错</strong>。</p><ul><li><p>注意：这里不止调用<code>add</code>会报错，调用<code>ArrayList</code>本身的<code>remove</code>也会报错，<strong>关键在于这些方法修改了<code>modCount</code>但是没有修改<code>expectedModCount</code>。</strong> </p></li><li><p><strong>如果我们是用迭代器的<code>remove</code>方法则不会报错，因为迭代器的remove方法在删除元素后会将新的<code>modCount</code>的值赋给<code>expectedModCount</code>：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;<span class="comment">//这个cursor表示的是下一个需要遍历的元素，lastRet表示上一次遍历到的元素</span></span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;<span class="comment">//这里会保持两者是一致的</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：我们在删除<code>lastRet</code>索引位置表示的上一个遍历的元素后，将<code>lastRet</code>的索引赋给<code>cursor</code>表示下一个需要遍历的索引位置</strong>。<ul><li><strong>这个时候可能会有疑惑：为什么这个位置元素被删除了下一次遍历还是这个位置</strong>？<ul><li><strong>这是因为我们<code>remove</code>删除上一个元素后，数组大小-1，即被删除元素后的元素都会往前移动，此时lastRet这个索引在新数组中指向的就是刚刚的下一个元素</strong>。</li></ul></li></ul></li><li><strong>删除之后将<code>lastRet</code>置为-1，而remove方法开始就会判断<code>lastRet</code>是否小于0，防止连续两次调用<code>remove</code>方法删除元素</strong>。</li></ul></li></ul></li><li><p>ArrayList中的iterator私有内部类是这样定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例如使用&lt;code&gt;Arraylist&lt;/code&gt;集合返回的一个iterator迭代器，我们&lt;strong&gt;这样使用会报错&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;Integer&amp;gt; arrayList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arrayList.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Iterator&amp;lt;Integer&amp;gt; iterator = arrayList.iterator();&lt;span class=&quot;comment&quot;&gt;//获得迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arrayList.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iterator.hasNext()) System.out.println(iterator.next());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Sring如何改变</title>
    <link href="http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/"/>
    <id>http://example.com/2022/04/18/Sring%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98/</id>
    <published>2022-04-18T01:38:03.000Z</published>
    <updated>2022-08-04T06:10:36.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么说String类型不可变？"><a href="#为什么说String类型不可变？" class="headerlink" title="为什么说String类型不可变？"></a><strong>为什么说<code>String</code>类型不可变</strong>？</h1><ul><li><p><code>String</code>的源码里其实使用一个<code>char</code>数组来存储字符串的，**<code>String</code>之所以说不可变，就是因为这个char数组它是<code>private</code>类型，而且<code>String</code>没有对外暴露和提供修改这个<code>char</code>数组的方法，因此我们无法更改这个<code>char</code>数组的值，所以<code>String</code>是不可变的**。</p></li><li><p><img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418084542067.png" alt="image-20220418084542067"><span id="more"></span></p></li><li><p><strong>注意</strong>：这里<code>char</code>数组被<code>final</code>修饰<strong>不代表不可变</strong>，因为数组是引用类型，final修饰引用类型的时候代表引用不可更改，即我们<strong>只是不能将这个<code>value</code>属性指向新的引用</strong>，但是<strong>它原本指向的这个<code>char</code>数组中的字符我们是可以更改的</strong>。</p></li><li><p>因此，<strong>如果我们可以通过更改<code>value</code>指向的<code>char</code>数组本身，就可以改变字符串</strong>。正常情况下我们是无法更改的，这也是我们说字符串不可变的原因，但是我们通过极端方法也是可以更改的，例如<strong>使用反射可以得到这个私有的value属性，然后通过爆破我们就可以访问这个私有属性了</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String  s = &quot;aabbc&quot;;</span><br><span class="line">Class&lt;? extends String&gt; aClass = s.getClass();</span><br><span class="line">Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性</span><br><span class="line">value.setAccessible(true);//将它设置成可以访问</span><br><span class="line">char[] chars =  (char[]) value.get(s);</span><br><span class="line">System.out.println(s);//在修改之前输出s</span><br><span class="line">chars[0] = &#x27;k&#x27;;         //修改s</span><br><span class="line">System.out.println(s);//输出修改之后的s</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418091040434.png" alt="image-20220418091040434"></p><ul><li><strong>可以看出这个字符串确实被改变了</strong>。</li></ul></li></ul><h1 id="证明我们是真的修改了字符串"><a href="#证明我们是真的修改了字符串" class="headerlink" title="证明我们是真的修改了字符串"></a>证明我们是真的修改了字符串</h1><h2 id="字符串的hashCode-方法"><a href="#字符串的hashCode-方法" class="headerlink" title="字符串的hashCode()方法"></a>字符串的<code>hashCode()</code>方法</h2><ul><li><p><strong>这里我们不能用<code>hashCode()</code>返回的哈希值来判断是否是同一个字符串</strong>，因为<code>hashCode</code>码值不等于地址，字符串的<code>hashCode</code>码是通过对每个字符进行一定的规则的累加得到的，然而<code>String</code>类中有一个int类型的属性叫<code>hash</code>，<strong>当这个<code>hash</code>=0的时候就会去计算这个String的<code>hashCode</code>码值</strong>，但是计算完后就会将计算结果赋值给这个<code>hash</code>属性；<strong>如果<code>hash</code>不等于0就返回这个属性值作为当前字符串的<code>hashCode</code><strong>。因此我们第一次计算调用<code>hashCode()</code>的时候由于<code>int</code>类型的属性默认为0，所以会逐个字符计算<code>hash</code>值，</strong>第二次调用<code>hashCode()</code>的时候返回的<code>hash</code>值其实是第一次计算出来缓存好的</strong>，因此肯定是相同的，所以此时调用<code>hashCode()</code>方法返回的值无法用来判断是否为同一个字符串。</p><ul><li><p><strong>源码如下</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private int hash; // Default to 0</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    int h = hash;//得到当前属性hash的值</span><br><span class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) &#123;//如果它为0就计算当前字符串的hashCode</span><br><span class="line">        char val[] = value;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = 31 * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;//计算完了后赋值给hash属性</span><br><span class="line">    &#125;</span><br><span class="line">    return h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>我们可以这样判断修改过后的字符串到底是<strong>原地修改</strong>得到的还是<strong>重新赋值</strong>得到的：<strong>将这个字符串的引用赋值给另一个字符串变量tempC，我们修改这个字符串前后都输出这个tempC，如果我们是原地修改，那么这个tempC输出的值前后两次肯定一样；如果是重新赋值，那么tempC的值前后两次肯定不同</strong>。</p><ul><li><pre><code>String  s = &quot;aabbc&quot;;Class&lt;? extends String&gt; aClass = s.getClass();Field value = aClass.getDeclaredField(&quot;value&quot;);//得到这个value属性value.setAccessible(true);//将它设置成可以访问char[] chars =  (char[]) value.get(s);String tempC = s;System.out.println(tempC );//在修改之前输出tempC chars[0] = &#39;k&#39;;         //修改sSystem.out.println(tempC );//输出修改之后的tempC <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **结果如下**：![image-20220418092752119](https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092752119.png)</span><br><span class="line"></span><br><span class="line">- **如果是重新赋值的情况**，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>String  s = &quot;aabbc&quot;;String tempC = s;System.out.println(tempC);s = &quot;sss&quot;;System.out.println(tempC);</code></pre><ul><li><strong>结果如下</strong>：<img src="https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418092930118.png" alt="image-20220418092930118"></li></ul></li></ul></li><li><p><strong>因此可知字符串确实是可以通过反射修改的</strong>。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;为什么说String类型不可变？&quot;&gt;&lt;a href=&quot;#为什么说String类型不可变？&quot; class=&quot;headerlink&quot; title=&quot;为什么说String类型不可变？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么说&lt;code&gt;String&lt;/code&gt;类型不可变&lt;/strong&gt;？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;的源码里其实使用一个&lt;code&gt;char&lt;/code&gt;数组来存储字符串的，**&lt;code&gt;String&lt;/code&gt;之所以说不可变，就是因为这个char数组它是&lt;code&gt;private&lt;/code&gt;类型，而且&lt;code&gt;String&lt;/code&gt;没有对外暴露和提供修改这个&lt;code&gt;char&lt;/code&gt;数组的方法，因此我们无法更改这个&lt;code&gt;char&lt;/code&gt;数组的值，所以&lt;code&gt;String&lt;/code&gt;是不可变的**。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;https://yufish-pic-1310579125.cos.ap-nanjing.myqcloud.com/markdown-Pic/image-20220418084542067.png&quot; alt=&quot;image-20220418084542067&quot;&gt;</summary>
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
